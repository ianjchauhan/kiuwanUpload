<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.optimyth.com/schema/definitions/library_metadata"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="Generic_Operating_System_Services" technology="python">

  <description url="https://docs.python.org/3/library/allos.html">Generic Operating System Services (Python 3)</description>

  <module name="os" standard="python3">
    <member name="error" type="OSError" />
    <member name="name" type="str" />
    
    <member name="environ" type="os._Environ" >
      <source argpos="-2" kind="environment_input"/>
    </member>

    <member name="environb" type="os._Environ" />
    <member name="PRIO_PROCESS" type="str" />
    <member name="PRIO_PGRP" type="str" />
    <member name="PRIO_USER" type="str" />
    <member name="supports_bytes_environ" type="bool" />
    <member name="F_LOCK" type="str" />
    <member name="F_TLOCK" type="str" />
    <member name="F_ULOCK" type="str" />
    <member name="F_TEST" type="str" />
    <member name="SEEK_SET" type="str" />
    <member name="SEEK_CUR" type="str" />
    <member name="SEEK_END" type="str" />

    <function name="ctermid" signature="ctermid()" >
      <return type="str" />
    </function>
    <function name="chdir" signature="chdir(path)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="fchdir" signature="fchdir(fd)" >
      <return type="NoneType" />
    </function>
    <function name="getcwd" signature="getcwd()" >
      <return type="str" />
    </function>
    <function name="fsencode" signature="fsencode(filename)" >
      <return type="bytes" />
    </function>
    <function name="fsdecode" signature="fsdecode(filename)" >
      <return type="bytes" />
    </function>
    <function name="fspath" signature="fspath(path)" >
      <return type="object" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="getenv" signature="getenv(key, default=None)" >
      <return type="str" />
    </function>
    <function name="getenvb" signature="getenvb(key, default=None)" >
      <return type="str" />
    </function>
    <function name="get_exec_path" signature="get_exec_path(env=None)" >
      <return type="list" />
    </function>
    <function name="getegid" signature="getegid()" >
      <return type="str" />
    </function>
    <function name="geteuid" signature="geteuid()" >
      <return type="str" />
    </function>
    <function name="getgid" signature="getgid()" >
      <return type="str" />
    </function>
    <function name="getgrouplist" signature="getgrouplist(user, group)" >
      <return type="list" />
    </function>
    <function name="getgroups" signature="getgroups()" >
      <return type="list" />
    </function>
    <function name="getlogin" signature="getlogin()" >
      <return type="str" />
    </function>
    <function name="getpgid" signature="getpgid(pid)" >
      <return type="str" />
    </function>
    <function name="getpgrp" signature="getpgrp()" >
      <return type="str" />
    </function>
    <function name="getpid" signature="getpid()" >
      <return type="str" />
    </function>
    <function name="getppid" signature="getppid()" >
      <return type="str" />
    </function>
    <function name="getpriority" signature="getpriority(which, who)" >
      <return type="str" />
    </function>
    <function name="getresuid" signature="getresuid()" >
      <return type="tuple" />
    </function>
    <function name="getresgid" signature="getresgid()" >
      <return type="str" />
    </function>
    <function name="getuid" signature="getuid()" >
      <return type="str" />
    </function>
    <function name="initgroups" signature="initgroups(username, gid)" >
      <return type="NoneType" />
    </function>
    <function name="putenv" signature="putenv(key, value)" >
      <return type="NoneType" />
    </function>
    <function name="setegid" signature="setegid(egid)" >
      <return type="NoneType" />
    </function>
    <function name="seteuid" signature="seteuid(euid)" >
      <return type="NoneType" />
    </function>
    <function name="setgid" signature="setgid(gid)" >
      <return type="NoneType" />
    </function>
    <function name="setgroups" signature="setgroups(groups)" >
      <return type="NoneType" />
    </function>
    <function name="setpgrp" signature="setpgrp()" >
      <return type="NoneType" />
    </function>
    <function name="setpgid" signature="setpgid(pid, pgrp)" >
      <return type="NoneType" />
    </function>
    <function name="setpriority" signature="setpriority(which, who, priority)" >
      <return type="NoneType" />
    </function>
    <function name="setregid" signature="setregid(rgid, egid)" >
      <return type="NoneType" />
    </function>
    <function name="setresgid" signature="setresgid(rgid, egid, sgid)" >
      <return type="NoneType" />
    </function>
    <function name="setresuid" signature="setresuid(ruid, euid, suid)" >
      <return type="NoneType" />
    </function>
    <function name="setreuid" signature="setreuid(ruid, euid)" >
      <return type="NoneType" />
    </function>
    <function name="getsid" signature="getsid(pid)" >
      <return type="str" />
    </function>
    <function name="setsid" signature="setsid()" >
      <return type="NoneType" />
    </function>
    <function name="setuid" signature="setuid(uid)" >
      <return type="NoneType" />
    </function>
    <function name="strerror" signature="strerror(code))" >
      <return type="str" />
    </function>
    <function name="setreuid" signature="setreuid(ruid, euid)" >
      <return type="NoneType" />
    </function>
    <function name="umask" signature="umask(mask)" >
      <return type="NoneType" />
    </function>
    <function name="uname" signature="uname()" >
      <return type="posix.uname_result" />
    </function>
    <function name="unsetenv" signature="unsetenv(key)" >
      <return type="NoneType" />
    </function>

    <function name="fdopen" signature="fdopen(fd, *args, **kwargs)" >
      <return type="io.TextIOWrapper" />
    </function>

    <function name="close" signature="close(fd)" >
      <return type="NoneType" />
    </function>
    <function name="closerange" signature="closerange(fd_low, fd_high)" >
      <return type="NoneType" />
    </function>
    <function name="device_encoding" signature="device_encoding(fd)" >
      <return type="str" />
    </function>
    <function name="dup" signature="dup(fd)" >
      <return type="int" />
    </function>
    <function name="dup2" signature="dup2(fd, fd2, inheritable=True)" >
      <return type="NoneType" />
    </function>
    <function name="fchmod" signature="fchmod(fd, mode)" >
      <return type="NoneType" />
    </function>
    <function name="fchown" signature="fchown(fd, uid, gid)" >
      <return type="NoneType" />
    </function>
    <function name="fdatasync" signature="fdatasync(fd)" >
      <return type="NoneType" />
    </function>
    <function name="fpathconf" signature="fpathconf(fd, name)" >
    </function>
    <function name="fstat" signature="fstat(fd)" >
      <return type="os.stat_result" />
    </function>
    <function name="fstatvfs" signature="fstatvfs(fd)" >
    </function>
    <function name="fsync" signature="fsync(fd)" >
      <return type="NoneType" />
    </function>
    <function name="ftruncate" signature="ftruncate(fd, length)" >
      <return type="NoneType" />
    </function>
    <function name="get_blocking" signature="get_blocking(fd)" >
    </function>
    <function name="isatty" signature="isatty(fd)" >
      <return type="bool" />
    </function>
    <function name="lockf" signature="lockf(fd, cmd, len)" >
      <return type="NoneType" />
    </function>
    <function name="lseek" signature="lseek(fd, pos, how)" >
      <return type="bytes" />
    </function>
    <function name="open" signature="open(path, flags, mode=0o777, *, dir_fd=None)" >
      <return type="int" />
      <sink argpos="0, 1, 2" kind="path_traversal" resource="web" />
    </function>
    <function name="openpty" signature="openpty()" >
      <return type="tuple" />
    </function>
    <function name="pipe" signature="pipe()" >
      <return type="tuple" />
    </function>
    <function name="pipe2" signature="pipe2(flags)" >
      <return type="tuple" />
    </function>
    <function name="posix_fallocate" signature="posix_fallocate(fd, offset, len)" >
    </function>
    <function name="posix_fadvise" signature="posix_fadvise(fd, offset, len, advice)" >
    </function>
    <function name="pread" signature="pread(fd, buffersize, offset)" >
      <return type="NoneType" />
    </function>
    <function name="pwrite" signature="pwrite(fd, str, offset)" >
      <return type="NoneType" />
    </function>
    <function name="read" signature="read(fd, n)" >
      <return type="bytes" />
    </function>
    <function name="sendfile" signature="sendfile(out, in, offset, count)" >
      <return type="bytes" />
    </function>
    <function name="sendfile" signature="sendfile(out, in, offset, count, [headers, ][trailers, ]flags=0)" >
      <return type="bytes" />
    </function>
    <function name="set_blocking" signature="set_blocking(fd, blocking)" >
      <return type="bytes" />
    </function>
    <function name="readv" signature="readv(fd, buffers)" >
      <return type="NoneType" />
    </function>
    <function name="tcgetpgrp" signature="tcgetpgrp(fd)" >
      <return type="str" />
    </function>
    <function name="tcsetpgrp" signature="tcsetpgrp(fd, pg)" >
      <return type="NoneType" />
    </function>
    <function name="readv" signature="ttyname(fd)" >
      <return type="str" />
    </function>
    <function name="write" signature="write(fd, str)" >
      <return type="int" />
    </function>
    <function name="writev" signature="writev(fd, buffers)" >
      <return type="NoneType" />
    </function>

    <function name="get_terminal_size" signature="get_terminal_size(fd=STDOUT_FILENO)" >
      <return type="os.terminal_size" />
    </function>


    <function name="get_inheritable" signature="get_inheritable(fd)" >
      <return type="os.bool" />
    </function>
    <function name="set_inheritable" signature="set_inheritable(fd, inheritable)" >
      <return type="NoneType" />
    </function>
    <function name="get_handle_inheritable" signature="get_handle_inheritable(handle)" >
      <return type="bool" />
    </function>
    <function name="get_handle_inheritable" signature="set_handle_inheritable(handle, inheritable)" >
      <return type="NoneType" />
    </function>

    <function name="access" signature="access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True)" >
      <return type="bool" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="chflags" signature="chflags(path, flags, *, follow_symlinks=True)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="chmod" signature="chmod(path, mode, *, dir_fd=None, follow_symlinks=True)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="chown" signature="chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="chroot" signature="chroot(path)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="getcwdb" signature="getcwdb()" >
      <return type="bytes" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="lchflags" signature="lchflags(path, flags)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="lchmod" signature="lchmod(path, mode)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="lchown" signature="lchown(path, uid, gid)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="link" signature="link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True)" >
      <return type="NoneType" />
    </function>
    <function name="listdir" signature="listdir(path='.')" >
      <return type="list" />
      <sink argpos="0" paramNames="path" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="lstat" signature="lstat(path, *, dir_fd=None)" >
      <return type="os.stat_result" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="mkdir" signature="mkdir(path, mode=0o777, *, dir_fd=None)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="makedirs" signature="makedirs(name, mode=0o777, exist_ok=False)" >
      <return type="NoneType" />
    </function>
    <function name="mkfifo" signature="mkfifo(path, mode=0o666, *, dir_fd=None)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="mknod" signature="mknod(path, mode=0o600, device=0, *, dir_fd=None)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="major" signature="major(device)" >
      <return type="int" />
    </function>
    <function name="minor" signature="minor(device)" >
      <return type="int" />
    </function>
    <function name="makedev" signature="makedev(major, minor)" >
      <return type="int" />
    </function>
    <function name="minor" signature="minor(device)" >
      <return type="int" />
    </function>
    <function name="makedev" signature="makedev(major, minor)" >
      <return type="int" />
    </function>
    <function name="makedev" signature="makedev(major, minor)" >
      <return type="int" />
    </function>
    <function name="readlink" signature="readlink(path, *, dir_fd=None)" >
      <return type="str" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="remove" signature="remove(path, *, dir_fd=None)" >
      <return type="int" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="removedirs" signature="removedirs(name)" >
      <return type="int" />
    </function>
    <function name="rename" signature="rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)" >
      <return type="NoneType" />
    </function>
    <function name="renames" signature="renames(old, new)" >
      <return type="NoneType" />
    </function>
    <function name="replace" signature="replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None)" >
      <return type="int" />
    </function>
    <function name="rmdir" signature="rmdir(path, *, dir_fd=None)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="scandir" signature="scandir(path='.')" >
      <return type="os.DirEntry" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="removedirs" signature="removedirs(name)" >
      <return type="int" />
    </function>
    <function name="stat" signature="stat(path, *, dir_fd=None, follow_symlinks=True)" >
      <return type="os.stat_result" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>

    <function name="abort" signature="abort()" >
      <return type="NoneType" />
    </function>
    <function name="execl" signature="execl(path, arg0, arg1, ...)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="execl" signature="execl(path, arg0, arg1, ...)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="execl" signature="execl(path, arg0, arg1, ...)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="execle" signature="execle(path, arg0, arg1, ..., env)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="execlp" signature="execlpe(file, arg0, arg1, ..., env)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="execv" signature="execv(path, args)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="execve" signature="execve(path, args, env)" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="execvp" signature="execvp(file, args))" >
      <return type="NoneType" />
    </function>
    <function name="execvpe" signature="execvpe(file, args, env)" >
      <return type="NoneType" />
    </function>
    <function name="_exit" signature="_exit(n)" >
      <return type="NoneType" />
    </function>
    <function name="fork" signature="fork()" >
      <return type="NoneType" />
    </function>
    <function name="forkpty" signature="forkpty()" >
      <return type="NoneType" />
    </function>
    <function name="kill" signature="kill(pid, sig)" >
      <return type="NoneType" />
    </function>
    <function name="killpg" signature="killpg(pgid, sig)" >
      <return type="NoneType" />
    </function>
    <function name="nice" signature="nice(increment)" >
      <return type="int" />
    </function>
    <function name="plock" signature="plock(op)" >
      <return type="NoneType" />
    </function>
    <function name="popen" signature="popen(cmd, mode='r', buffering=-1)" >
      <return type="object" />
    </function>
    <function name="spawnl" signature="spawnl(mode, path, ...)" >
      <return type="NoneType" />
      <sink argpos="1" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="spawnle" signature="spawnle(mode, path, ..., env)" >
      <return type="NoneType" />
      <sink argpos="1" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="spawnlp" signature="spawnlp(mode, file, ...)" >
      <return type="NoneType" />
    </function>
    <function name="spawnlpe" signature="spawnlpe(mode, file, ..., env)" >
      <return type="NoneType" />
    </function>
    <function name="spawnv" signature="spawnv(mode, path, args)" >
      <return type="NoneType" />
      <sink argpos="1" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="spawnve" signature="spawnve(mode, path, args, env)" >
      <return type="NoneType" />
      <sink argpos="1" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="spawnvp" signature="spawnvp(mode, file, args)" >
      <return type="NoneType" />
    </function>
    <function name="spawnvpe" signature="spawnvpe(mode, file, args, env)" >
      <return type="NoneType" />
    </function>
    <function name="startfile" signature="startfile(path[, operation])" >
      <return type="NoneType" />
      <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
    </function>
    <function name="system" signature="system(command)" >
      <return type="object" />
      <sink argpos="0" kind="command_injection" resource="environment" />
    </function>
    <function name="times" signature="times()" >
      <return type="int" />
    </function>
    <function name="wait" signature="wait()" >
      <return type="tuple" />
    </function>
    <function name="waitid" signature="waitid(idtype, id, options)" >
      <return type="tuple" />
    </function>
    <function name="waitpid" signature="waitpid(pid, options)" >
      <return type="tuple" />
    </function>
    <function name="wait3" signature="wait3(options)" >
      <return type="tuple" />
    </function>
    <function name="wait4" signature="wait4(pid, options)" >
      <return type="tuple" />
    </function>
    <function name="waitpid" signature="waitpid(pid, options)" >
      <return type="tuple" />
    </function>
    <function name="confstr" signature="confstr(name)" >
      <return type="object" />
    </function>
    <function name="cpu_count" signature="cpu_count()" >
      <return type="int" />
    </function>
    <function name="getloadavg" signature="getloadavg()" >
      <return type="int" />
    </function>
    <function name="sysconf" signature="sysconf(name)" >
      <return type="int" />
    </function>
    <function name="getrandom" signature="getrandom(size, flags=0)" >
      <tags>csprng, len:0, unit:bytes</tags>
      <return type="bytes" />
    </function>
    <function name="urandom" signature="urandom(size)">
      <tags>csprng, len:0, unit:bytes</tags>
      <return type="bytes" />
    </function>

    <class name="_Environ" supertypes="collections.abc.MutableMapping" />

    <class name="PathLike" kind="abstract_class" supertypes="abc.ABC" >
      <method name="__fspath__" signature="__fspath__()" >
        <return type="object" />
      </method>
    </class>

    <class name="terminal_size" supertypes="tuple" >
      <field name="columns" type="int" />
      <field name="lines" type="int" />
    </class>

    <class name="DirEntry">
      <field name="name" type="object" />
      <field name="path" type="object" />

      <method name="inode" signature="inode()" >
        <return type="int" />
      </method>
      <method name="is_dir" signature="is_dir(*, follow_symlinks=True)" >
        <return type="bool" />
      </method>
      <method name="is_dir" signature="is_dir(*, follow_symlinks=True)" >
        <return type="bool" />
      </method>
      <method name="is_file" signature="is_file(*, follow_symlinks=True)" >
        <return type="bool" />
      </method>
      <method name="stat" signature="stat(*, follow_symlinks=True)" >
        <return type="os.stat_result" />
      </method>
    </class>

    <class name="stat_result" supertypes="tuple" >
      <field name="st_mode" type="str" />
      <field name="st_ino" type="int" />
      <field name="st_dev" type="str" />
      <field name="st_nlink" type="str" />
      <field name="st_uid" type="str" />
      <field name="st_gid" type="str" />
      <field name="st_size" type="bytes" />
      <field name="st_atime" type="int" />
      <field name="st_mtime" type="int" />
      <field name="st_ctime" type="int" />
      <field name="st_atime_ns" type="int" />
      <field name="st_mtime_ns" type="int" />
      <field name="st_ctime_ns" type="int" />
      <field name="st_blocks" type="int" />
      <field name="st_blksize" type="int" />
      <field name="st_rdev" type="str" />
      <field name="st_flags" type="str" />
      <field name="st_gen" type="int" />
      <field name="st_birthtime" type="int" />
      <field name="st_rsize" type="bytes" />
      <field name="st_creator" type="object" />
      <field name="st_type" type="object" />
      <field name="st_file_attributes" type="object" />
      <field name="supports_dir_fd" type="set" />
      <field name="supports_effective_ids" type="set" />
      <field name="supports_fd" type="set" />
      <field name="supports_follow_symlinks" type="set" />

      <method name="stat_float_times" signature="stat_float_times([newvalue])" >
        <return type="bool" />
      </method>
      <method name="statvfs" signature="statvfs(path)" >
        <return type="object" />
        <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
      </method>
      <method name="symlink" signature="symlink(src, dst, target_is_directory=False, *, dir_fd=None)" >
        <return type="NoneType" />
      </method>
      <method name="sync" signature="sync()" >
        <return type="NoneType" />
      </method>
      <method name="truncate" signature="truncate(path, length)" >
        <return type="NoneType" />
        <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
      </method>
      <method name="unlink" signature="unlink(path, *, dir_fd=None)" >
        <return type="NoneType" />
        <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
      </method>
      <method name="utime" signature="utime(path, times=None, *, [ns, ]dir_fd=None, follow_symlinks=True)" >
        <return type="NoneType" />
        <sink argpos="0" kind="hardcoded_absolute_path" resource="web" />
      </method>
      <method name="walk" signature="walk(top, topdown=True, onerror=None, followlinks=False)" >
        <return type="list" />
      </method>
      <method name="fwalk" signature="fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None)" >
        <return type="list" />
      </method>
    </class>

    <class name="sched_param">
      <field name="sched_priority" type="object" />

      <method name="sched_get_priority_min" signature="sched_get_priority_min(policy)" >
        <return type="object" />
      </method>
      <method name="sched_get_priority_max" signature="sched_get_priority_max(policy)" >
        <return type="object" />
      </method>
      <method name="sched_setscheduler" signature="sched_setscheduler(pid, policy, param)" >
        <return type="NoneType" />
      </method>
      <method name="sched_getscheduler" signature="sched_getscheduler(pid)" >
        <return type="object" />
      </method>
      <method name="sched_setparam" signature="sched_setparam(pid, param)" >
        <return type="NoneType" />
      </method>
      <method name="sched_getparam" signature="sched_getparam(pid)" >
        <return type="object" />
      </method>
      <method name="sched_rr_get_interval" signature="sched_rr_get_interval(pid)" >
        <return type="object" />
      </method>
      <method name="sched_yield" signature="sched_yield()" >
        <return type="NoneType" />
      </method>
      <method name="sched_setaffinity" signature="sched_setaffinity(pid, mask)" >
        <return type="NoneType" />
      </method>
      <method name="sched_getaffinity" signature="sched_getaffinity(pid)" >
        <return type="set" />
      </method>
    </class>

  </module>

  <module name="logging" standard="python3">

    <function name="getLogger" signature="getLogger(name=None)">
      <return type="logging.Logger"/>
    </function>
    <function name="getLoggerClass" signature="getLoggerClass()">
      <return type="logging.Logger"/>
    </function>
    <function name="getLogRecordFactory" signature="getLogRecordFactory()">
      <return type="logging.LogRecord"/>
    </function>
    <function name="debug" signature="debug(msg, *args, **kwargs)">
      <return type="NoneType"/>
      <sink argpos="0,1" kind="log_forging" resource="web" />
      <sink argpos="0,1,2" kind="error_details"/>
    </function>
    <function name="info" signature="info(msg, *args, **kwargs)">
      <return type="NoneType"/>
      <sink argpos="0,1" kind="log_forging" resource="web" />
      <sink argpos="0,1,2" kind="error_details"/>
    </function>
    <function name="warning" signature="warning(msg, *args, **kwargs)">
      <return type="NoneType"/>
      <sink argpos="0,1" kind="log_forging" resource="web" />
      <sink argpos="0,1,2" kind="error_details"/>
    </function>
    <function name="error" signature="error(msg, *args, **kwargs)">
      <return type="NoneType"/>
      <sink argpos="0,1" kind="log_forging" resource="web" />
      <sink argpos="0,1,2" kind="error_details"/>
    </function>
    <function name="critical" signature="critical(msg, *args, **kwargs)">
      <return type="NoneType"/>
      <sink argpos="0,1" kind="log_forging" resource="web" />
      <sink argpos="0,1,2" kind="error_details"/>
    </function>
    <function name="exception" signature="exception(msg, *args, **kwargs)">
      <return type="NoneType"/>
      <sink argpos="0,1" kind="log_forging" resource="web" />
      <sink argpos="0,1,2" kind="error_details"/>
    </function>
    <function name="log" signature="log(msg, *args, **kwargs)">
      <return type="NoneType"/>
      <sink argpos="0,1" kind="log_forging" resource="web" />
      <sink argpos="0,1,2" kind="error_details"/>
    </function>
    <function name="disable" signature="disable(lvl)">
      <return type="NoneType"/>
    </function>
    <function name="addLevelName" signature="addLevelName(lvl, levelName)">
      <return type="NoneType"/>
    </function>
    <function name="getLevelName" signature="getLevelName(lvl)">
      <return type="str"/>
    </function>
    <function name="makeLogRecord" signature="makeLogRecord(attrdict)">
      <return type="NoneType"/>
    </function>
    <function name="basicConfig" signature="basicConfig(**kwargs)">
      <return type="NoneType"/>
    </function>
    <function name="shutdown" signature="shutdown()">
      <return type="NoneType"/>
    </function>
    <function name="setLoggerClass" signature="setLoggerClass(Klass)">
      <return type="NoneType"/>
    </function>
    <function name="setLogRecordFactory" signature="setLogRecordFactory(factory)">
      <return type="NoneType"/>
    </function>
    <function name="captureWarnings" signature="captureWarnings(capture)">
      <return type="NoneType"/>
    </function>

    <class name="Logger" supertypes="logging.Filterer">
      <field name="propagate" type="bool" />

      <method name="setLevel" signature="setLevel(lvl)" >
        <return type="NoneType" />
      </method>
      <method name="isEnabledFor" signature="isEnabledFor(lvl)" >
        <return type="bool" />
      </method>
      <method name="getEffectiveLevel" signature="getEffectiveLevel()" >
        <return type="int" />
      </method>
      <method name="getChild" signature="getChild(suffix)" >
        <return type="logging.Logger" />
      </method>
      <method name="debug" signature="debug(msg, *args, **kwargs)" >
        <return type="NoneType" />
        <sink argpos="0,1" kind="log_forging" resource="web" />
        <sink argpos="0,1,2" kind="error_details"/>
      </method>
      <method name="info" signature="info(msg, *args, **kwargs)" >
        <return type="NoneType" />
        <sink argpos="0,1" kind="log_forging" resource="web" />
        <sink argpos="0,1,2" kind="error_details"/>
      </method>
      <method name="warning" signature="warning(msg, *args, **kwargs)" >
        <return type="NoneType" />
        <sink argpos="0,1" kind="log_forging" resource="web" />
        <sink argpos="0,1,2" kind="error_details"/>
      </method>
      <method name="error" signature="error(msg, *args, **kwargs)" >
        <return type="NoneType" />
        <sink argpos="0,1" kind="log_forging" resource="web" />
        <sink argpos="0,1,2" kind="error_details"/>
      </method>
      <method name="critical" signature="critical(msg, *args, **kwargs)" >
        <return type="NoneType" />
        <sink argpos="0,1" kind="log_forging" resource="web" />
        <sink argpos="0,1,2" kind="error_details"/>
      </method>
      <method name="log" signature="log(lvl, msg, *args, **kwargs)" >
        <return type="NoneType" />
        <sink argpos="0,1" kind="log_forging" resource="web" />
        <sink argpos="0,1,2" kind="error_details"/>
      </method>
      <method name="exception" signature="exception(msg, *args, **kwargs)" >
        <return type="NoneType" />
        <sink argpos="0,1" kind="log_forging" resource="web" />
        <sink argpos="0,1,2" kind="error_details"/>
      </method>
      <method name="addFilter" signature="addFilter(filt)" >
        <return type="NoneType" />
      </method>
      <method name="removeFilter" signature="removeFilter(filt)" >
        <return type="NoneType" />
      </method>
      <method name="filter" signature="filter(filt)" >
        <return type="bool" />
      </method>
      <method name="findCaller" signature="findCaller(stack_info=False)" >
        <return type="tuple" />
      </method>
      <method name="handle" signature="handle(record)" >
        <return type="NoneType" />
      </method>
      <method name="makeRecord" signature="makeRecord(name, lvl, fn, lno, msg, args, exc_info, func=None, extra=None, sinfo=None)" >
        <return type="logging.LogRecord" />
        <sink argpos="4" kind="log_forging" resource="web" />
      </method>
      <method name="hasHandlers" signature="hasHandlers()" >
        <return type="bool" />
      </method>
    </class>

    <class name="Handler" supertypes="logging.Filterer">
      <constructor name="Handler" signature="Handler(level=NOTSET)" />
      <method name="createLock" signature="createLock()" >
        <return type="NoneType" />
      </method>
      <method name="acquire" signature="acquire()" >
        <return type="NoneType" />
      </method>
      <method name="setLevel" signature="setLevel(lvl)" >
        <return type="NoneType" />
      </method>
      <method name="release" signature="release()" >
        <return type="NoneType" />
      </method>
      <method name="setLevel" signature="setLevel(lvl)" >
        <return type="NoneType" />
      </method>
      <method name="setFormatter" signature="setFormatter(form)" >
        <return type="NoneType" />
      </method>
      <method name="addFilter" signature="addFilter(filt)" >
        <return type="NoneType" />
      </method>
      <method name="filter" signature="filter(record)" >
        <return type="logging.LogRecord" />
      </method>
      <method name="flush" signature="flush()" >
        <return type="NoneType" />
      </method>
      <method name="close" signature="close()" >
        <return type="NoneType" />
      </method>
      <method name="handle" signature="handle(record)" >
        <return type="NoneType" />
      </method>
      <method name="handleError" signature="handleError(record)" >
        <return type="NoneType" />
      </method>
      <method name="format" signature="format(record)" >
        <return type="NoneType" />
      </method>
      <method name="emit" signature="emit(record)" >
        <return type="NoneType" />
      </method>
    </class>

    <class name="Formatter">
      <constructor name="Formatter" signature="Formatter(fmt=None, datefmt=None, style='%')"/>
      <method name="format" signature="format(record)">
        <return type="str"/>
      </method>
      <method name="formatTime" signature="formatTime(record, datefmt=None)">
        <return type="str"/>
      </method>
      <method name="formatException" signature="formatException(exc_info)">
        <return type="str"/>
      </method>
      <method name="formatStack" signature="formatStack(stack_info)">
        <return type="str"/>
      </method>
    </class>

    <class name="Filter">
      <constructor name="Filter" signature="Filter(name='')"/>
      <method name="filter" signature="filter(record)">
        <return type="bool"/>
      </method>
    </class>

    <class name="Filterer">
      <method name="addFilter" signature="addFilter(filter)">
        <return type="NoneType"/>
      </method>
      <method name="removeFilter" signature="removeFilter(filter)" >
        <return type="NoneType"/>
      </method>
      <method name="filter" signature="filter(record)">
        <return type="bool"/>
      </method>
      
    </class>

    <class name="LogRecord">
      <constructor name="LogRecord" signature="LogRecord(name, level, pathname, lineno, msg, args, exc_info, func=None, sinfo=None)"/>
      <method name="getMessage" signature="getMessage()">
        <return type="str"/>
      </method>
    </class>

    <class name="LoggerAdapter">
      <constructor name="LoggerAdapter" signature="LoggerAdapter(logger, extra)"/>
      <method name="process" signature="process(msg, kwargs)">
        <return type="tuple"/>
      </method>
    </class>
    
    <class name="StreamHandler" supertypes="logging.Handler" >
      <constructor name="StreamHandler" signature="StreamHandler(stream=None)"/>
      <method name="flush" signature="flush()">
        <return type="NoneType"/>
      </method>
      <method name="emit" signature="emit(record)">
        <return type="NoneType"/>
      </method>
    </class>

    <class name="FileHandler" supertypes="logging.StreamHandler" >
      <field name="mode" type="str" />
      <method name="close" signature="close()">
        <return type="str"/>
      </method>
      <method name="emit" signature="emit(record)">
        <return type="NoneType"/>
      </method>
    </class>

    <class name="NullHandler" supertypes="logging.Handler">
      <method name="handle" signature="handle(record)">
        <return type="NoneType"/>
      </method>
      <method name="emit" signature="emit(record)">
        <return type="NoneType"/>
      </method>
      <method name="createLock" signature="createLock()">
        <return type="NoneType"/>
      </method>
    </class>

    <class name="PlaceHolder">
      <constructor name="PlaceHolder" signature="PlaceHolder(alogger)"/>
      <method name="append" signature="append(alogger)">
        <return type="NoneType"/>
      </method>
    </class>

    <module name="handlers" >

      <class name="WatchedFileHandler" supertypes="logging.FileHandler" >
        <method name="reopenIfNeeded" signature="reopenIfNeeded()" >
          <return type="NoneType" />
        </method>
      </class>

      <class name="BaseRotatingHandler" supertypes="logging.FileHandler" >
        <field name="namer" type="bool" />
      </class>

      <class name="RotatingFileHandler" supertypes="logging.handlers.BaseRotatingHandler" >
        <method name="doRollover" signature="doRollover()" >
          <return type="NoneType" />
        </method>
      </class>

      <class name="TimedRotatingFileHandler" supertypes="logging.handlers.RotatingFileHandler" />

      <class name="SocketHandler" supertypes="logging.Handler" >
        <method name="makeSocket" signature="makeSocket()" >
          <return type="socket.SOCK_STREAM" />
        </method>
        <method name="makePickle" signature="makePickle(record)" >
          <return type="NoneType" />
        </method>
        <method name="send" signature="send(packet)" >
          <return type="NoneType" />
        </method>
        <method name="createSocket" signature="createSocket()" >
          <return type="NoneType" />
        </method>
      </class>

      <class name="DatagramHandler" supertypes="logging.handlers.SocketHandler" />

      <class name="SysLogHandler" supertypes="logging.Handler" >
        <method name="encodePriority" signature="encodePriority(facility, priority)" >
          <return type="int" />
        </method>
        <method name="mapPriority" signature="mapPriority(levelname)" >
          <return type="str" />
        </method>
      </class>

      <class name="NTEventLogHandler" supertypes="logging.Handler" />

      <class name="SMTPHandler" supertypes="logging.Handler" />

      <class name="MemoryHandler" supertypes="logging.Handler" />

      <class name="HTTPHandler" supertypes="logging.Handler" />

    </module>
  </module>

</library>