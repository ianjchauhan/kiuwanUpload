<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.optimyth.com/schema/definitions/library_metadata"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="Data_Types" technology="python">

  <description url="https://docs.python.org/3/library/datatypes.html">Data Types (Python 3)</description>

  <module name="collections" standard="python3">
    <class name="ChainMap" supertypes="collections.abc.MutableMapping" />

    <class name="Counter" supertypes="dict">
      <method name="element" signature="elements()" >
        <return type="itertools_chain"/>
      </method>
      <method name="most_common" signature="most_common([n])" >
        <return type="list"/>
      </method>
      <method name="subtract" signature="subtract([iterable-or-mapping])" >
        <return type="NoneType"/>
      </method>
    </class>

    <class name="deque" supertypes="obj">
      <method name="append" signature="append(x)" >
        <return type="NoneType"/>
      </method>
      <method name="appendleft" signature="appendleft(x)" >
        <return type="NoneType"/>
      </method>
      <method name="clear" signature="clear()" >
        <return type="NoneType"/>
      </method>
      <method name="copy" signature="copy()" >
        <return type="deque"/>
      </method>
      <method name="count" signature="count(x)" >
        <return type="deque"/>
      </method>
      <method name="extend" signature="extend(iterable)" >
        <return type="NoneType"/>
      </method>
      <method name="extendleft" signature="extendleft(iterable)" >
        <return type="NoneType"/>
      </method>
      <method name="index" signature="index(x[, start[, stop]])" >
        <return type="int"/>
      </method>
      <method name="insert" signature="insert(i, x)" >
        <return type="NoneType"/>
      </method>
      <method name="pop" signature="pop()" >
        <return type="object"/>
      </method>
      <method name="popleft" signature="popleft()" >
        <return type="object"/>
      </method>
      <method name="remove" signature="remove(value)" >
        <return type="NoneType"/>
      </method>
      <method name="reverse" signature="reverse()" >
        <return type="NoneType"/>
      </method>
      <method name="rotate" signature="rotate(n)" >
        <return type="NoneType"/>
      </method>
      <method name="insert" signature="insert(i, x)" >
        <return type="NoneType"/>
      </method>
    </class>

    <class name="defaultdict" supertypes="dict"/>

    <function name="namedtuple" signature="namedtuple()">
      <return type="tuple"/>
    </function>

    <class name="OrderedDict" supertypes="dict">
      <method name="popitem" signature="popitem(last=True)">
        <return type="tuple"/>
      </method>
      <method name="move_to_end" signature="move_to_end(key, last=True)">
        <return type="NoneType"/>
      </method>
    </class>

    <class name="UserDict " supertypes="collections.abc.MutableMapping">
      <field name="data" type="dict"/>
    </class>

    <class name="UserList " supertypes="collections.abc.MutableSequence">
      <field name="data" type="list"/>
    </class>

    <class name="UserString " supertypes="collections.abc.Sequence"/>
  </module>

  <module name="collections.abc" standard="python3">
    <class name="Container" />
    <class name="Hashable" />
    <class name="Sized" />
    <class name="Callable" />
    <class name="Iterable" />
    <class name="Collection" />
    <class name="Iterator" />
    <class name="Reversible" supertypes="collections.abc.Iterator"/>
    <class name="Generator" supertypes="collections.abc.Iterator"/>
    <class name="Sequence" supertypes="collections.abc.Sized, collections.abc.Iterable, collections.abc.Container"/>
    <class name="MutableSequence" supertypes="collections.abc.Sequence"/>
    <class name="ByteString" supertypes="collections.abc.Sequence"/>
    <class name="Set" supertypes="collections.abc.Sized, collections.abc.Iterable, collections.abc.Container"/>
    <class name="MutableSet" supertypes="collections.abc.Set"/>
    <class name="Mapping" supertypes="collections.abc.Sized, collections.abc.Iterable, collections.abc.Container"/>
    <class name="MutableMapping" supertypes="collections.abc.Mapping"/>
    <class name="MappingView" supertypes="collections.abc.Sized"/>
    <class name="ItemsView" supertypes="collections.abc.MappingView, collections.abc.Set"/>
    <class name="KeysView" supertypes="collections.abc.MappingView, collections.abc.Set"/>
    <class name="ValuesView" supertypes="collections.abc.MappingView"/>
    <class name="Awaitable" />
    <class name="Coroutine" supertypes="collections.abc.Awaitable"/>
    <class name="AsyncIterable" />
    <class name="AsyncIterator" supertypes="collections.abc.AsyncIterable"/>
    <class name="AsyncGenerator" supertypes="collections.abc.AsyncIterator"/>
  </module>

  <module name="enum" standard="python3">
    <class name="Enum" />
    <class name="IntEnum" supertypes="int, enum.Enum" />
    <class name="IntFlag" supertypes="int, enum.Flag" />
    <class name="Flag" supertypes="enum.Enum"/>
    <class name="auto" />
  </module>

  <module name="datetime" standard="python3">
    <function name="timedelta" signature="timedelta([days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]])" />
    <class name="datetime">
      <constructor name="datetime" signature="datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0)"/>
      <method name="today" signature="today()" instance="false" alias="utcnow"><return type="datetime.datetime"/></method>
      <method name="now" signature="now(tz=None)" instance="false"><return type="datetime.datetime"/></method>
      <method name="fromtimestamp" signature="fromtimestamp(timestamp, tz=None)" instance="false"><return type="datetime.datetime"/></method>
      <method name="utcfromtimestamp" signature="utcfromtimestamp(timestamp)" instance="false"><return type="datetime.datetime"/></method>
      <method name="fromordinal" signature="fromordinal(ordinal)" instance="false" alias="fromisoformat"><return type="datetime.datetime"/></method>
      <method name="combine" signature="combine(date, time, tzinfo=self.tzinfo)" instance="false"><return type="datetime.datetime"/></method>
      <method name="fromisocalendar" signature="fromisocalendar(year, week, day)" instance="false"><return type="datetime.datetime"/></method>
      <method name="strptime" signature="strptime(date_string, format)" instance="false"><return type="datetime.datetime"/></method>

      <field name="min" alias="max" type="datetime.datetime" instance="false"/>
      <field name="year" alias="month,day,hour,minute,second,microsecond" type="builtin.int"></field>
      <field name="tzinfo" type="datetime.datetime.tzinfo"/>

      <method name="date" signature="date()"><return type="datetime.date"/></method>
      <method name="time" signature="time()" alias="timetz"><return type="datetime.time"/></method>
      <!-- and many more... -->
    </class>
  </module>
  
</library>