<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.optimyth.com/schema/definitions/library_metadata"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="Internet_Protocols_Support_2" technology="python">

  <description url="https://docs.python.org/2/library/internet.html">Internet Protocols (Python 2)</description>

  <module name="urllib" standard="python2">
    <function name="urlopen" signature="urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)" >
      <return type="httplib.HTTPResponse" />
      <sink argpos="0" kind="insecure_transport" resource="web" />
      <sink argpos="0" kind="http_parameter_pollution" resource="web"/>
      <source argpos="-1" kind="user_input" resource="network"/>
    </function>
  </module>

  <module name="urllib2" standard="python2">
    <function name="urlopen" signature="urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)" >
        <return type="httplib.HTTPResponse" />
        <sink argpos="0" kind="insecure_transport" resource="web" />
        <sink argpos="0" kind="http_parameter_pollution" resource="web"/>
        <source argpos="-1" kind="user_input" resource="network"/>
      </function>
      <function name="install_opener" signature="install_opener(opener)" >
        <return type="NoneType" />
      </function>
      <function name="build_opener" signature="build_opener([handler, ...])" >
        <return type="urllib2.OpenerDirector" />
      </function>
      <function name="pathname2url" signature="pathname2url(path)" >
        <return type="str" />
      </function>
      <function name="url2pathname" signature="url2pathname(path)" >
        <return type="str" />
      </function>
      <function name="getproxies" signature="getproxies()" >
        <return type="dict" />
      </function>
      <function name="urlretrieve" signature="urlretrieve(url, filename=None, reporthook=None, data=None)" >
        <return type="" />
      </function>
      <function name="urlcleanup" signature="urlcleanup()" >
        <return type="NoneType" />
      </function>
      
      <class name="Request" >
        <field name="full_url" type="str"/>
        <field name="type" type="str"/>
        <field name="host" type="str"/>
        <field name="origin_req_host" type="str"/>
        <field name="selector" type="str"/>
        <field name="data" type="object"/>
        <field name="unverifiable" type="bool"/>
        <field name="method" type="object"/>
        
        <function name="get_method" signature="get_method()" >
          <return type="str" />
        </function>
        <function name="add_header" signature="add_header(key, val)" >
          <tags>open_redirect: 0</tags>
          <return type="NoneType" />
          <sink argpos="0,1" kind="header_manipulation" resource="web"/>
        </function>
        <function name="add_unredirected_header" signature="add_unredirected_header(key, header)" >
          <return type="NoneType" />
        </function>
        <function name="has_header" signature="has_header(header)" >
          <return type="bool" />
        </function>
        <function name="remove_header" signature="remove_header(header)" >
          <return type="NoneType" />
        </function>
        <function name="get_full_url" signature="get_full_url()" >
          <return type="str" />
        </function>
        <function name="set_proxy" signature="set_proxy(host, type)" >
          <return type="NoneType" />
          <sink argpos="0" kind="resource_injection" resource="web" />
        </function>
        <function name="get_header" signature="get_header(header_name, default=None)" >
          <return type="object" />
          <source argpos="-1" kind="user_input" resource="web"/>
        </function>
        <function name="header_items" signature="header_items()" >
          <return type="list" />
          <source argpos="-1" kind="user_input" resource="web"/>
        </function>

      </class>

      <class name="OpenerDirector" >
        <function name="add_handler" signature="add_handler(handler)" >
          <return type="NoneType" />
        </function>
        <function name="open" signature="open(url, data=None[, timeout])" >
          <return type="httplib.HTTPResponse" />
          <sink argpos="0" kind="http_parameter_pollution" resource="web"/>
        </function>
        <function name="error" signature="error(proto, *args)" >
          <return type="object" />
        </function>
      </class>

      <class name="BaseHandler" >
        <function name="add_parent" signature="add_parent(director)" >
          <return type="NoneType" />
        </function>
        <function name="close" signature="close()" >
          <return type="" />
        </function>
        <function name="default_open" signature="default_open(req)" >
          <return type="object" />
        </function>
        <function name="protocol_open" signature="protocol_open(req)" >
          <return type="object" />
        </function>
        <function name="unknown_open" signature="unknown_open(req)" >
          <return type="object" />
        </function>
        <function name="http_error_default" signature="http_error_default(req, fp, code, msg, hdrs)" >
          <return type="httplib.HTTPResponse" />
        </function>
        <function name="http_error_nnn" signature="http_error_nnn(req, fp, code, msg, hdrs)" >
          <return type="int" />
        </function>
        <function name="protocol_request" signature="protocol_request(req)" >
          <return type="urllib2.Request" />
        </function>
        <function name="protocol_response" signature="protocol_response(req, response)" >
          <return type="httplib.HTTPResponse" />
        </function>
      </class>

      <class name="HTTPDefaultErrorHandler" supertypes="urllib2.request.BaseHandler" />

      <class name="HTTPRedirectHandler" supertypes="urllib2.request.BaseHandler" >
        <function name="redirect_request" signature="redirect_request(req, fp, code, msg, hdrs, newurl)" >
          <return type="urllib2.Request" />
          <sink argpos="0,1,2,3" kind="open_redirect" resource="web" />
          <sink kind="execution_after_redirect" argpos="5" paramNames="newurl" resource="web"/>
        </function>
        <function name="http_error_301" signature="http_error_301(req, fp, code, msg, hdrs)" >
          <return type="NoneType" />
        </function>
        <function name="http_error_302" signature="http_error_302(req, fp, code, msg, hdrs)" >
          <return type="NoneType" />
        </function>
        <function name="http_error_303" signature="http_error_303(req, fp, code, msg, hdrs)" >
          <return type="NoneType" />
        </function>
        <function name="http_error_307" signature="http_error_307(req, fp, code, msg, hdrs)" >
          <return type="NoneType" />
        </function>
      </class>

      <class name="HTTPCookieProcessor" supertypes="urllib2.request.BaseHandler" >
        <field name="cookiejar" type="http.cookiejar.CookieJar" >
          <source argpos="-1" kind="user_input" resource="web"/>
        </field>
      </class>

      <class name="ProxyHandler" supertypes="urllib2.request.BaseHandler" >
        <function name="protocol_open" signature="protocol_open(request)" >
          <return type="" />
        </function>
      </class>
      
      <class name="HTTPPasswordMgr" >
        <function name="add_password" signature="add_password(realm, uri, user, passwd)" >
          <return type="NoneType" />
        </function>
        <function name="find_user_password" signature="find_user_password(realm, authuri)" >
          <return type="tuple" />
        </function>
      </class>
      
      <class name="HTTPPasswordMgrWithDefaultRealm" supertypes="urllib2.request.HTTPPasswordMgr" >
        <function name="add_password" signature="add_password(realm, uri, user, passwd, is_authenticated=False)" >
          <return type="NoneType" />
        </function>
        <function name="find_user_password" signature="find_user_password(realm, authuri)" >
          <return type="tuple" />
        </function>
        <function name="update_authenticated" signature="update_authenticated(self, uri, is_authenticated=False)" >
          <return type="NoneType" />
        </function>
        <function name="is_authenticated" signature="is_authenticated(self, authuri)" >
          <return type="bool" />
        </function>
      </class>

      <class name="HTTPPasswordMgrWithPriorAuth" supertypes="urllib2.request.HTTPPasswordMgrWithDefaultRealm" />

      <class name="AbstractBasicAuthHandler" >
        <function name="http_error_auth_reqed" signature="http_error_auth_reqed(authreq, host, req, headers)" >
          <return type="NoneType" />
          <sink argpos="1" kind="resource_injection" resource="web" />
        </function>
      </class>

      <class name="HTTPBasicAuthHandler" supertypes="urllib2.request.AbstractBasicAuthHandler, urllib2.request.BaseHandler" >
        <function name="http_error_401" signature="http_error_401(req, fp, code, msg, hdrs)" >
          <return type="NoneType" />
        </function>
      </class>
      
      <class name="ProxyBasicAuthHandler" supertypes="urllib2.request.AbstractBasicAuthHandler, urllib2.request.BaseHandler" >
        <function name="http_error_407" signature="http_error_407(req, fp, code, msg, hdrs)" >
          <return type="NoneType" />
        </function>
      </class>
      
      <class name="AbstractDigestAuthHandler" >
        <function name="http_error_auth_reqed" signature="http_error_auth_reqed(authreq, host, req, headers)" >
          <return type="NoneType" />
          <sink argpos="1" kind="resource_injection" resource="web" />
        </function>
      </class>
      
      <class name="HTTPDigestAuthHandler" supertypes="urllib2.request.BaseHandler, urllib2.request.AbstractDigestAuthHandler" >
        <function name="http_error_401" signature="http_error_401(req, fp, code, msg, hdrs)" >
          <return type="NoneType" />
        </function>
      </class>

      <class name="ProxyDigestAuthHandler" supertypes="urllib2.request.BaseHandler, urllib2.request.AbstractDigestAuthHandler" >
        <function name="http_error_407" signature="http_error_407(req, fp, code, msg, hdrs)" >
          <return type="NoneType" />
        </function>
      </class>
      
      <class name="HTTPHandler" supertypes="urllib2.request.AbstractHTTPHandler" >
        <function name="http_open" signature="http_open(req)" >
          <return type="httplib.HTTPResponse" />
        </function>
      </class>

      <class name="HTTPSHandler" supertypes="urllib2.request.AbstractHTTPHandler" >
        <function name="https_open" signature="https_open(req)" >
          <return type="httplib.HTTPResponse" />
        </function>
      </class>

      <class name="FileHandler" supertypes="urllib2.request.BaseHandler" >
        <function name="file_open" signature="file_open(req)" >
          <return type="object" />
        </function>
      </class>

      <class name="DataHandler" supertypes="urllib2.request.BaseHandler" >
        <function name="data_open" signature="data_open(req)" >
          <return type="object" />
        </function>
      </class>

      <class name="FTPHandler" supertypes="urllib2.request.BaseHandler" >
        <function name="ftp_open" signature="ftp_open(req)" >
          <return type="object" />
        </function>
      </class>

      <class name="CacheFTPHandler" supertypes="urllib2.request.FTPHandler" >
        <function name="setTimeout" signature="setTimeout(t)" >
          <return type="NoneType" />
        </function>
        <function name="setMaxConns" signature="setMaxConns(m)" >
          <return type="NoneType" />
        </function>
      </class>

      <class name="UnknownHandler" supertypes="urllib2.request.BaseHandler" >
        <function name="unknown_open" signature="unknown_open()" >
          <return type="httplib.HTTPResponse" />
        </function>
      </class>

      <class name="HTTPErrorProcessor" supertypes="urllib2.request.BaseHandler" >
        <function name="http_response" signature="http_response()" >
          <return type="httplib.HTTPResponse" />
        </function>
        <function name="https_response" signature="https_response()" >
          <return type="httplib.HTTPResponse" />
        </function>
      </class>
      
      <class name="URLopener" >
        <function name="open" signature="open(fullurl, data=None)" >
          <return type="httplib.HTTPResponse" />
          <sink argpos="0" kind="insecure_transport" resource="web" />
          <sink argpos="0" kind="http_parameter_pollution" resource="web"/>
        </function>
        <function name="open_unknown" signature="open_unknown(fullurl, data=None)" >
          <return type="httplib.HTTPResponse" />
          <sink argpos="0" kind="insecure_transport" resource="web" />
          <sink argpos="0" kind="http_parameter_pollution" resource="web"/>
        </function>
        <function name="retrieve" signature="retrieve(url, filename=None, reporthook=None, data=None)" >
          <return type="tuple" />
          <sink argpos="0" kind="insecure_transport" resource="web" />
          <sink argpos="0" kind="http_parameter_pollution" resource="web"/>
        </function>

        <field name="version" type="str" />
      </class>
      
      <class name="FancyURLopener" >
        <function name="prompt_user_passwd" signature="prompt_user_passwd(host, realm)" >
          <return type="tuple" />
          <sink argpos="0" kind="resource_injection" resource="web" />
        </function>
      </class>

      <class name="addinfourl" supertypes="urllib2.addinfo'" >
        <function name="info" signature="info()" >
          <return type="str" />
        </function>
        <function name="geturl" signature="geturl()" >
          <return type="str" />
        </function>
      </class>

      <class name="addinfo" />
    
    <class name="URLError" supertypes="OSError" />
      
      <class name="HTTPError" supertypes="urllib2.URLError, urllib2.addinfourl" >
        <field name="code" type="int" />
        <field name="reason" type="str" />
        <field name="headers" type="str" />
      </class>
      
      <class name="ContentTooShortError" supertypes="URLError" />
  </module>
  
  
  <module name="httplib" >
    <class name="http.HTTPStatus" supertypes="enum.IntEnum" />

    <class name="HTTPConnection" >
        <constructor name="HTTPConnection" signature="HTTPConnection(host[, port[, strict[, timeout[, source_address]]]])" >
          <sink argpos="0, 1, 2" kind="server_insecure_transport" resource="web" />
        </constructor>

        <function name="request" signature="request(method, url, body=None, headers={}, *, encode_chunked=False)" >
          <return type="httplib.HTTPConnection" />
          <sink argpos="1" kind="http_parameter_pollution" resource="web"/>
        </function>
        <function name="getresponse" signature="getresponse()" >
          <return type="httplib.HTTPResponse" />
          <source argpos="-1" kind="user_input" resource="web" />
        </function>
        <function name="set_debuglevel" signature="set_debuglevel(level)" >
          <return type="NoneType" />
        </function>
        <function name="set_tunnel" signature="set_tunnel(host, port=None, headers=None)" >
          <return type="NoneType" />
          <sink argpos="0" kind="resource_injection" resource="web" />
        </function>
        <function name="connect" signature="connect()" >
          <return type="NoneType" />
        </function>
        <function name="close" signature="close()" >
          <return type="NoneType" />
        </function>
        <function name="putrequest" signature="putrequest(method, url, skip_host=False, skip_accept_encoding=False)" >
          <return type="NoneType" />
          <sink argpos="1" kind="http_parameter_pollution" resource="web"/>
        </function>
        <function name="putheader" signature="putheader(header, argument[, ...])" >
          <return type="NoneType" />
        </function>
        <function name="endheaders" signature="endheaders(message_body=None, *, encode_chunked=False)" >
          <return type="NoneType" />
        </function>
        <function name="send" signature="send(data)" >
          <return type="NoneType" />
        </function>
      </class>
  
      <class name="HTTPSConnection" supertypes="httplib.HTTPConnection" />
  
      <class name="HTTPResponse" supertypes="io.BufferedIOBase" >
        <function name="read" signature="read([amt])" >
          <return type="bytes" />
          <source argpos="-1" kind="user_input" resource="web" />
        </function>
        <function name="readinto" signature="readinto(b)" >
          <return type="NoneType" />
          <source argpos="0" kind="user_input" resource="web" />
        </function>
        <function name="getheader" signature="getheader(name, default=None)" >
          <return type="str" />
          <source argpos="-1" kind="user_input" resource="web" />
        </function>
        <function name="getheaders" signature="getheaders()" >
          <return type="list" />
          <source argpos="-1" kind="user_input" resource="web" />
        </function>
        <function name="fileno" signature="fileno()" >
          <return type="object" />
          <source argpos="-1" kind="user_input" resource="web" />
        </function>
  
        <field name="msg" type="httplib.HTTPMessage" />
        <field name="version" type="str" />
        <field name="status" type="str" />
        <field name="reason" type="str" />
        <field name="debuglevel" type="int" />
        <field name="closed" type="bool" />
      </class>
  
      <class name="HTTPMessage" supertypes="email.message.Message" />
  
      <class name="HTTPException" supertypes="Exception" />
      <class name="NotConnected" supertypes="httplib.HTTPException" />
      <class name="InvalidURL" supertypes="httplib.HTTPException" />
      <class name="UnknownProtocol" supertypes="httplib.HTTPException" />
      <class name="UnknownTransferEncoding" supertypes="httplib.HTTPException" />
      <class name="UnimplementedFileMode" supertypes="httplib.HTTPException" />
      <class name="IncompleteRead" supertypes="httplib.HTTPException" /> 
      <class name="ImproperConnectionState" supertypes="httplib.HTTPException" /> 
      <class name="CannotSendRequest" supertypes="httplib.ImproperConnectionState" /> 
      <class name="CannotSendHeader" supertypes="httplib.ImproperConnectionState" /> 
      <class name="ResponseNotReady" supertypes="httplib.ImproperConnectionState" /> 
      <class name="BadStatusLine" supertypes="httplib.HTTPException" />
      <class name="LineTooLong" supertypes="httplibHTTPException" />
      <class name="RemoteDisconnected" supertypes="ConnectionResetError, httplib.BadStatusLine" />
      <class name="ResponseNotReady" supertypes="httplib.ImproperConnectionState" />
  
      <member name="HTTP_PORT" type="int" />
      <member name="HTTPS_PORT" type="int" />
      <member name="responses" type="dict" />
  </module>

</library>