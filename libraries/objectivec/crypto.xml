<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.optimyth.com/schema/definitions/library_metadata"
         name="crypto" standard="objectivec" technology="objectivec">

  <description url="https://stackoverflow.com/questions/16602883/ios-commoncrypto-reference">CommonCrypto</description>

  <module name="CommonCrypto" >
    <function name="CC_MD2_Init" signature="CC_MD2_Init(CC_MD2_CTX *c)">
    <tags>insecure_hash_algorithm</tags>
    <parameters>
      <param type="CC_MD2_CTX"/>
    </parameters>
    </function>

    <function name="CC_MD2_Update" signature="CC_MD2_Update(CC_MD2_CTX *c, const void *data, CC_LONG len)">
      <tags>insecure_hash_algorithm</tags>
      <parameters>
        <param type="CC_MD2_CTX"/>
        <param type="void"/>
        <param type="CC_LONG"/>
      </parameters>
    </function>

    <function name="CC_MD2_Final" signature="CC_MD2_Final(unsigned char *md, CC_MD2_CTX *c)">
      <tags>insecure_hash_algorithm</tags>
      <parameters>
        <param type="char"/>
        <param type="CC_MD2_CTX"/>
      </parameters>
    </function>

    <function name="CC_MD2" signature="CC_MD2(const void *data, CC_LONG len, unsigned char *md)">
      <tags>insecure_hash_algorithm</tags>
      <parameters>
        <param type="void"/>
        <param type="CC_LONG"/>
        <param type="char"/>
      </parameters>
    </function>

    <function name="CC_MD4_Init" signature="CC_MD4_Init(CC_MD4_CTX *c)">
      <tags>insecure_hash_algorithm</tags>
      <parameters>
        <param type="CC_MD4_CTX"/>
      </parameters>
    </function>

    <function name="CC_MD4_Update" signature="CC_MD4_Update(CC_MD4_CTX *c, const void *data, CC_LONG len)">
      <tags>insecure_hash_algorithm</tags>
      <parameters>
        <param type="CC_MD4_CTX"/>
        <param type="void"/>
        <param type="CC_LONG"/>
      </parameters>
    </function>

    <function name="CC_MD4_Final" signature="CC_MD4_Final(unsigned char *md, CC_MD4_CTX *c)">
      <tags>insecure_hash_algorithm</tags>
      <parameters>
        <param type="char"/>
        <param type="CC_MD4_CTX"/>
      </parameters>
    </function>

    <function name="CC_MD4" signature="CC_MD4(const void *data, CC_LONG len, unsigned char *md)">
      <tags>insecure_hash_algorithm</tags>
      <parameters>
        <param type="void"/>
        <param type="CC_LONG"/>
        <param type="char"/>
      </parameters>
    </function>

    <function name="CC_MD5_Init" signature="CC_MD5_Init(CC_MD5_CTX *c)">
      <tags>insecure_hash_algorithm</tags>
      <parameters>
        <param type="CC_MD5_CTX"/>
      </parameters>
    </function>

    <function name="CC_MD5_Update" signature="CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)">
      <tags>insecure_hash_algorithm</tags>
      <parameters>
        <param type="CC_MD5_CTX"/>
        <param type="void"/>
        <param type="CC_LONG"/>
      </parameters>
    </function>

    <function name="CC_MD5_Final" signature="CC_MD5_Final(unsigned char *md, CC_MD5_CTX *c)">
      <tags>insecure_hash_algorithm</tags>
      <parameters>
        <param type="char"/>
        <param type="CC_MD5_CTX"/>
      </parameters>
    </function>

    <function name="CC_MD5" signature="CC_MD5(const void *data, CC_LONG len, unsigned char *md)">
      <tags>insecure_hash_algorithm</tags>
      <parameters>
        <param type="void"/>
        <param type="CC_LONG"/>
        <param type="char"/>
      </parameters>
    </function>

    <function name="CC_SHA1_Init" signature="CCC_SHA1_Init(CC_SHA1_CTX *c)">
      <tags>insecure_hash_algorithm</tags>
      <parameters>
        <param type="CC_SHA1_CTX"/>
      </parameters>
    </function>

    <function name="CC_SHA1_Update" signature="CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)">
      <tags>insecure_hash_algorithm</tags>
      <parameters>
        <param type="CC_SHA1_CTX"/>
        <param type="void"/>
        <param type="CC_LONG"/>
      </parameters>
    </function>

    <function name="CC_SHA1_Final" signature="CC_SHA1_Final(unsigned char *md, CC_SHA1_CTX *c)">
      <tags>insecure_hash_algorithm</tags>
      <parameters>
        <param type="char"/>
        <param type="CC_SHA1_CTX"/>
      </parameters>
    </function>

    <function name="CC_SHA1" signature="CC_SHA1(const void *data, CC_LONG len, unsigned char *md)">
      <tags>insecure_hash_algorithm</tags>
      <parameters>
        <param type="void"/>
        <param type="CC_LONG"/>
        <param type="char"/>
      </parameters>
    </function>

    <function name="CCCryptorCreate" signature="CCCryptorCreate(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef)">
      <tags>insecure_symmetric_algorithm, algorithm_pos: 1, kCCAlgorithmDES, kCCAlgorithmCAST, kCCAlgorithmRC4, kCCAlgorithmRC2, block_cipher_pos: 2, kCCOptionECBMode, key_pos: 3, key_size_pos: 4, kCCKeySizeDES, kCCKeySizeMinCAST, kCCKeySizeMaxCAST, kCCKeySizeMinRC4, kCCKeySizeMaxRC, vector_pos: 5</tags>
      <parameters>
        <param type="CCOperation"/>
        <param type="CCAlgorithm"/>
        <param type="CCOptions"/>
        <param type="void"/>
        <param type="size_t"/>
        <param type="void"/>
        <param type="CCCryptorRef"/>
      </parameters>
    </function>

    <function name="CCCryptorCreateFromData" signature="CCCryptorCreateFromData(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef, size_t *dataUsed)">
      <tags>insecure_symmetric_algorithm, algorithm_pos: 1, kCCAlgorithmDES, kCCAlgorithmCAST, kCCAlgorithmRC4, kCCAlgorithmRC2, block_cipher_pos: 2, kCCOptionECBMode, key_pos: 3, key_size_pos: 4, kCCKeySizeDES, kCCKeySizeMinCAST, kCCKeySizeMaxCAST, kCCKeySizeMinRC4, kCCKeySizeMaxRC4, vector_pos: 5</tags>
      <parameters>
        <param type="CCOperation"/>
        <param type="CCAlgorithm"/>
        <param type="CCOptions"/>
        <param type="void"/>
        <param type="size_t"/>
        <param type="void"/>
        <param type="CCCryptorRef"/>
        <param type="size_t"/>
      </parameters>
    </function>

    <function name="CCCrypt" signature="CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)">
      <tags>insecure_symmetric_algorithm, algorithm_pos: 1, kCCAlgorithmDES, kCCAlgorithmCAST, kCCAlgorithmRC4, kCCAlgorithmRC2, block_cipher_pos: 2, kCCOptionECBMode, key_pos: 3, key_size_pos: 4, kCCKeySizeDES, kCCKeySizeMinCAST, kCCKeySizeMaxCAST, kCCKeySizeMinRC4, kCCKeySizeMaxRC4, vector_pos: 5</tags>
      <parameters>
        <param type="CCOperation"/>
        <param type="CCAlgorithm"/>
        <param type="CCOptions"/>
        <param type="void"/>
        <param type="size_t"/>
        <param type="void"/>
        <param type="void"/>
        <param type="size_t"/>
        <param type="void"/>
        <param type="size_t"/>
        <param type="size_t"/>
      </parameters>
      <sink argpos="3" kind="hardcoded_crypto_key" resource="crypto" />
    </function>

    <function name="CCHmacInit" signature="CCHmacInit(CCHmacContext *ctx, CCHmacAlgorithm algorithm, const void *key, size_t keyLength)">
      <tags>insecure_hash_algorithm, algorithm_pos: 1, kCCHmacAlgSHA1, kCCHmacAlgMD5</tags>
      <parameters>
        <param type="CCHmacContext"/>
        <param type="CCHmacAlgorithm"/>
        <param type="void"/>
        <param type="size_t"/>
      </parameters>
    </function>

    <function name="CCHmac" signature="CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)">
      <tags>insecure_hash_algorithm, algorithm_pos: 0, kCCHmacAlgSHA1, kCCHmacAlgMD5,</tags>
      <parameters>
        <param type="CCHmacAlgorithm"/>
        <param type="void"/>
        <param type="size_t"/>
        <param type="void"/>
        <param type="size_t"/>
        <param type="void"/>
      </parameters>
    </function>

    <function name="CCKeyDerivationPBKDF" signature="CCKeyDerivationPBKDF(CCPBKDFAlgorithm algorithm, const char *password, size_t passwordLen, const uint8_t *salt, size_t saltLen, CCPseudoRandomAlgorithm prf, uint rounds, uint8_t *derivedKey, size_t derivedKeyLen) SX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_NA);">
      <tags>insecure_key_derivation,weak_key_derivation:1;2,salt_pos: 3, iteration_pos: 6</tags>
      <parameters>
        <param type="CCPBKDFAlgorithm"/>
        <param type="char"/>
        <param type="size_t"/>
        <param type="uint8_t"/>
        <param type="size_t"/>
        <param type="CCPseudoRandomAlgorithm"/>
        <param type="uint"/>
        <param type="uint8_t"/>
        <param type="size_t"/>
      </parameters>
    </function>
  </module>

  <module name="Certificate_Key_and_Trust Services">
    <description url="https://developer.apple.com/documentation/security/certificate_key_and_trust_services">Establish trust using certificates and cryptographic keys</description>

    <function name="SecKeyGeneratePair" signature="SecKeyGeneratePair ( CFDictionaryRef parameters, SecKeyRef _Nullable *publicKey, SecKeyRef _Nullable *privateKey )">
      <tags>insecure_asymmetric_algorithm, params_pos: 0</tags>
      <parameters>
        <param type="CFDictionaryRef"/>
        <param type="SecKeyRef"/>
        <param type="SecKeyRef"/>
      </parameters>
    </function>
  </module>

</library>