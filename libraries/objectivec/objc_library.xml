<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.optimyth.com/schema/definitions/library_metadata"
         name="cocoa" technology="objectivec">

  <description url="https://developer.apple.com/documentation/technologies?language=objc">Cocoa</description>

  <module name="cocoa" >
    <class name="CALayer" supertypes="NSObject">
      <description>Manages image-based content and allows you to perform animations on that content.</description>
      <field name="shadowOpacity" type="float"/>
      <field name="shadowPath" type="CGPathRef"/>
    </class>

    <class name="NSArray" supertypes="NSObject">
      <description>Creates static arrays.</description>
      <tags>Collection: true</tags>
      <function name="objectAtIndex:" signature="- (ObjectType)objectAtIndex:(NSUInteger)index">
        <return type="ObjectType"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="objectAtIndexedSubscript:" signature="- (ObjectType)objectAtIndexedSubscript:(NSUInteger)idx">
        <return type="objectAtIndexedSubscript"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="objectsAtIndexes:" signature="- (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes">
        <return type="NSArray"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="objectEnumerator:" signature="- (NSEnumerator *)objectEnumerator">
        <return type="NSEnumerator"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="reverseObjectEnumerator:" signature="- (NSEnumerator *)reverseObjectEnumerator">
        <return type="NSEnumerator"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="valueForKey:" signature="- (id)valueForKey:(NSString *)key">
        <return type="id"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="setValue:forKey:" signature="-(void)setValue:(id)value forKey:(NSString *)key">
        <return type="void"/>
        <propagate from="0,1" to="-1"/>
      </function>
      <function name="arrayWithArray:" signature="+ (instancetype)arrayWithArray:(NSArray *)anArray">
        <return type="instancetype"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="arrayWithContentsOfFile:" signature="+ (NSArray *)arrayWithContentsOfFile:(NSString *)aPath">
        <return type="NSArray"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="arrayWithContentsOfURL:" signature="+ (NSArray *)arrayWithContentsOfURL:(NSURL *)aURL Parameters">
        <return type="NSArray"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="arrayWithObject:" signature="+ (instancetype)arrayWithObject:(ObjectType)anObject">
        <return type="instancetype"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="arrayWithObjects:" signature="+ (instancetype)arrayWithObjects:(ObjectType)firstObj,...">
        <return type="instancetype"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="arrayWithObjects:count:" signature="+ (instancetype)arrayWithObjects:(const ObjectType _Nonnull []) objects count:(NSUInteger)count">
        <return type="instancetype"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="agetObjects:range:" signature="- (void)getObjects:(ObjectType _Nonnull [])aBuffer range:(NSRange)aRange">
        <return type="void"/>
        <propagate from="-1" to="0"/>
      </function>
      <function name="initWithArray:" signature="- (instancetype)initWithArray:(NSArray *)anArray">
        <return type="instancetype"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="initWithArray:copyItems:" signature="- (instancetype)initWithArray:(NSArray *)array copyItems:(BOOL)flag">
        <return type="instancetype"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="initWithContentsOfFile:" signature="- (NSArray *)initWithContentsOfFile:(NSString *)aPath">
        <return type="NSArray"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="initWithContentsOfURL:" signature="- (NSArray *)initWithContentsOfURL:(NSURL *)aURL">
        <return type="NSArray"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="initWithObjects:" signature="- (instancetype)initWithObjects:(ObjectType)firstObj,...">
        <return type="instancetype"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="initWithObjects:count:" signature="- (instancetype)initWithObjects:(const ObjectType _Nonnull [])objects count:(NSUInteger)count">
        <return type="instancetype"/>
        <propagate from="0" to="-1"/>
      </function>
    </class>

    <class name="NSEnumerator" supertypes="NSObject">
      <description>Abstract class, instances of whose subclasses enumerate collections of other objects, such as arrays and dictionaries.</description>
      <tags>Collection: true</tags>
      <field name="allObjects" type="NSArray" />
      <function name="nextObject:" signature="- (ObjectType)nextObject">
        <return type="ObjectType"/>
        <propagate from="0" to="-2"/>
      </function>
    </class>

    <class name="NSFetchRequest" supertypes="NSPersistentStoreRequest">
      <description>Describes search criteria used to retrieve data from a persistent store.</description>
      <function name="initWithEntityName:" signature="-(instancetype)initWithEntityName:(NSString *)entityName">
        <return type="instancetype"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="fetchRequestWithEntityName:" signature="+(instancetype)fetchRequestWithEntityName:(NSString *)entityName">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="setEntity:" signature="-(void)setEntity:(NSEntityDescription *)entity">
        <return type="void"/>
        <propagate from="0" to="-1"/>
      </function>
    </class>

    <class name="NSEntityDescription" supertypes="NSObject">
      <description>Describes describes an entity in Core Data.</description>
      <function name="entityForName:inManagedObjectContext:" signature="+ (NSEntityDescription *)entityForName:(NSString *)entityName inManagedObjectContext:(NSManagedObjectContext *)context">
        <return type="NSEntityDescription"/>
        <propagate from="1" to="-2"/>
        <source argpos="-1" kind="database_input" />
      </function>
      <function name="insertNewObjectForEntityForName:inManagedObjectContext:" signature="+ (NSEntityDescription *)insertNewObjectForEntityForName:(NSString *)entityName inManagedObjectContext:(NSManagedObjectContext *)context">
        <return type="NSEntityDescription"/>
        <propagate from="1" to="-2"/>
        <sink argpos="-1" kind="sensitive_core_data" />
      </function>
    </class>


    <class name="NSObject">
      <description>NSObject is the root class of most Objective-C class hierarchies. Through NSObject, objects inherit a basic interface to the runtime system and the ability to behave as Objective-C objects.</description>
      <function name="poseAsClass:" signature="+(void)poseAsClass:(Class)aClass">
        <tags>deprecated:OS X v10.5</tags>
      </function>
      <function name="performSelector:withObject:afterDelay:" signature="- (void)performSelector:(SEL)aSelector withObject:(id)anArgument afterDelay:(NSTimeInterval)delay">
        <return type="void"/>
        <sink paramNames="performSelector" kind="unsafe_reflection"/>
      </function>
      <function name="performSelector:withObject:afterDelay:inModes:" signature="- (void)performSelector:(SEL)aSelector withObject:(id)anArgument afterDelay:(NSTimeInterval)delay inModes:(NSArray *)modes">
        <return type="void"/>
        <sink paramNames="performSelector" kind="unsafe_reflection"/>
      </function>
      <function name="performSelectorOnMainThread:withObject:waitUntilDone:modes:" signature="- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(id)arg waitUntilDone:(BOOL)wait">
        <return type="void"/>
        <sink paramNames="performSelectorOnMainThread" kind="unsafe_reflection"/>
      </function>
      <function name="performSelectorOnMainThread:withObject:waitUntilDone:" signature="- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(id)arg waitUntilDone:(BOOL)wait modes:(NSArray *)array">
        <return type="void"/>
        <sink paramNames="performSelectorOnMainThread" kind="unsafe_reflection"/>
      </function>
      <function name="performSelector:onThread:withObject:waitUntilDone:" signature="- (void)performSelector:(SEL)aSelector onThread:(NSThread *)thread withObject:(id)arg waitUntilDone:(BOOL)wait">
        <return type="void"/>
        <sink paramNames="performSelector" kind="unsafe_reflection"/>
      </function>
      <function name="performSelector:onThread:withObject:waitUntilDone:modes:" signature="- (void)performSelector:(SEL)aSelector onThread:(NSThread *)thread withObject:(id)arg waitUntilDone:(BOOL)wait modes:(NSArray *)array">
        <return type="void"/>
        <sink paramNames="performSelector" kind="unsafe_reflection"/>
      </function>
      <function name="performSelectorInBackground:withObject:" signature="- (void)performSelectorInBackground:(SEL)aSelector withObject:(id)arg">
        <return type="void"/>
        <sink paramNames="performSelectorInBackground" kind="unsafe_reflection"/>
      </function>
      <function name="forwardingTargetForSelector:" signature="- (id)forwardingTargetForSelector:(SEL)aSelector">
        <return type="id"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="forwardInvocation::" signature="- (void)forwardInvocation:(NSInvocation *)anInvocation">
        <return type="id"/>
        <propagate from="-1" to="0"/>
      </function>
    </class>

    <class name="NSSelectorFromString">
      <description>The NSString class declares the programmatic interface for an object that manages immutable strings.</description>
      <function name="initWithBytes:length:encoding:" signature="- (instancetype)initWithBytes:(const void *)bytes length:(NSUInteger)length encoding:(NSStringEncoding)encoding">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
    </class>

    <class name="NSString">
      <description>The NSString class declares the programmatic interface for an object that manages immutable strings.</description>
      <function name="initWithBytes:length:encoding:" signature="- (instancetype)initWithBytes:(const void *)bytes length:(NSUInteger)length encoding:(NSStringEncoding)encoding">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithBytesNoCopy:length:encoding:freeWhenDone:" signature="- (instancetype)initWithBytesNoCopy:(void *)byte length:(NSUInteger)length encoding:(NSStringEncoding)encoding freeWhenDone:(BOOL)flag">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithCharacters:length:" signature="- (instancetype)initWithCharacters:(const unichar *)characters length:(NSUInteger)length">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithCharactersNoCopy:length:freeWhenDone:" signature="- (instancetype)initWithCharactersNoCopy:(unichar *)characters length:(NSUInteger)length freeWhenDone:(BOOL)flag">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithString:" signature="- (instancetype)initWithString:(NSString *)aString">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithCString:encoding:" signature="- (instancetype)initWithCString:(const char *)nullTerminatedCString encoding:(NSStringEncoding)encoding">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithUTF8String:" signature="- (instancetype)initWithUTF8String:(const char *)bytes">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="stringWithCString:" signature="+(id)stringWithCString:(const char *)cString">
        <tags>deprecated:OS X v10.4</tags>
        <sink paramNames="stringWithCString" resource="memory" kind="buffer_overflow"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithData:encoding:" signature="- (instancetype)initWithData:(NSData *)data encoding:(NSStringEncoding)encoding">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithFormat:" signature="+(id)initWithFormat:(NSString *)format,...">
        <tags>formattedOutput</tags>
        <sink paramNames="initWithFormat" resource="formatstr" kind="format_injection"/>
      </function>
      <function name="stringWithFormat:" signature="+(id)stringWithFormat:(NSString *)format,...">
        <tags>formattedOutput</tags>
        <sink paramNames="stringWithFormat" resource="formatstr" kind="format_injection"/>
        <propagate from="0,1,2" to="-2"/>
      </function>
      <function name="localizedStringWithFormat:" signature="+(id)localizedStringWithFormat:(NSString *)format ...">
        <tags>formattedOutput</tags>
        <sink paramNames="localizedStringWithFormat" resource="formatstr" kind="format_injection"/>
        <propagate from="0,1,2" to="-2"/>
      </function>
      <function name="writeToFile:atomically:encoding:error:" signature="-(BOOL)writeToFile:(NSString *)atomically:(BOOL)encoding:(NSStringEncoding)error:(NSError * _Nullable *)">
        <sink paramNames="writeToFile" kind="sensitive_output" resource="filesystem" />
        <sink paramNames="writeToFile" kind="path_traversal" resource="filesystem" />
        <sink argpos="-2" kind="insecure_temporary_file" resource="filesystem">
          <checker id="foundation.atomicallyChecker" />
        </sink>
      </function>
      <function name="writeToURL:atomically:encoding:error:" signature="-(BOOL)writeToURL:(NSString *)atomically:(BOOL)encoding:(NSStringEncoding)error:(NSError * _Nullable *)">
        <sink paramNames="writeToFile" kind="sensitive_output" resource="filesystem" />
        <sink paramNames="writeToFile" kind="path_traversal" resource="filesystem" />
      </function>
      <function name="writeToFile:atomically" signature="-(BOOL)writeToFile:(NSString *)atomically:(BOOL)">
        <sink paramNames="writeToFile" kind="sensitive_output" resource="filesystem" />
        <sink paramNames="writeToFile" kind="path_traversal" resource="filesystem" />
        <sink argpos="-2" kind="insecure_temporary_file" resource="filesystem">
          <checker id="foundation.atomicallyChecker" />
        </sink>
      </function>
      <function name="writeToURL:atomically" signature="-(BOOL)writeToURL:(NSString *)atomically:(BOOL)">
        <sink paramNames="writeToFile" kind="sensitive_output" resource="filesystem" />
        <sink paramNames="writeToFile" kind="path_traversal" resource="filesystem" />
      </function>
      <function name="getCString:maxLength:encoding:" signature="- (BOOL)getCString:(char) maxLength:(NSUInteger) encoding:(NSStringEncoding)" >
        <propagate from="0" to="-2" />
      </function>
    </class>

    <class name="NSMutableString" supertypes="NSString">
      <description>Manages a mutable string -that is, a string whose contents can be edited</description>
      <function name="appendFormat:" signature="-(void)appendFormat:(NSString *)format,...">
        <tags>formattedOutput</tags>
        <sink paramNames="appendFormat" resource="formatstr" kind="format_injection"/>
      </function>
    </class>

    <class name="NSRegularExpression" supertypes="NSObject">
      <description>Represent and apply regular expressions to Unicode strings. Used often for input validation.</description>
      <function name="regularExpressionWithPattern:options:error:" signature="+ (NSRegularExpression *)regularExpressionWithPattern:(NSString *)pattern options:(NSRegularExpressionOptions)options error:(NSError * _Nullable *)error">
        <sink paramNames="regularExpressionWithPattern" kind="regex_dos"/>
      </function>
      <function name="initWithPattern:options:error:" signature="- (instancetype)initWithPattern:(NSString *)pattern options:(NSRegularExpressionOptions)options error:(NSError * _Nullable *)error">
        <sink paramNames="initWithPattern" kind="regex_dos"/>
      </function>
      <function name="enumerateMatchesInString:options:range:usingBlock:" signature="">
        <neutralization paramNames="enumerateMatchesInString" kind="string"/>
      </function>
      <function name="firstMatchInString:options:range:" signature="">
        <neutralization paramNames="firstMatchInString" kind="string"/>
      </function>
      <function name="matchesInString:options:range:" signature="">
        <neutralization paramNames="matchesInString" kind="string"/>
      </function>
      <function name="numberOfMatchesInString:options:range:" signature="">
        <neutralization paramNames="numberOfMatchesInString" kind="string"/>
      </function>
      <function name="rangeOfFirstMatchInString:options:range:" signature="">
        <neutralization paramNames="rangeOfFirstMatchInString" kind="string"/>
      </function>
      <function name="replaceMatchesInString:options:range:withTemplate:" signature="">
        <neutralization argpos="-1" kind="string"/>
      </function>
      <function name="replaceMatchesInString" signature="">
        <neutralization argpos="-1" kind="string"/>
      </function>
      <function name="replacementStringForResult:inString:offset:template:" signature="">
        <neutralization paramNames="inString" kind="string"/>
      </function>
      <function name="stringByReplacingMatchesInString:options:range:withTemplate:" signature="">
        <neutralization paramNames="stringByReplacingMatchesInString" kind="string"/>
      </function>
    </class>

    <class name="NSPredicate" supertypes="NSObject">
      <description>Used to define logical conditions used to constrain a search either for a fetch or for in-memory filtering.</description>
      <function name="predicateWithFormat:" signature="+ (NSPredicate *)predicateWithFormat:(NSString *)format,...">
        <sink paramNames="predicateWithFormat" resource="formatstr" kind="format_injection"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="predicateWithFormat:argumentArray:" signature="+ (NSPredicate *)predicateWithFormat:(NSString *)predicateFormat argumentArray:(NSArray *)arguments">
        <sink paramNames="predicateWithFormat" resource="formatstr" kind="format_injection"/>
        <propagate from="0,1" to="-2"/>
      </function>
      <function name="predicateWithFormat:arguments:" signature="+ (NSPredicate *)predicateWithFormat:(NSString *)format arguments:(va_list)argList">
        <sink paramNames="predicateWithFormat" resource="formatstr" kind="format_injection"/>
        <propagate from="0,1" to="-2"/>
      </function>
      <function name="predicateWithSubstitutionVariables:" signature="- (instancetype)predicateWithSubstitutionVariables:(NSDictionary variables">
        <propagate from="0" to="-2"/>
      </function>
      <function name="predicateWithValue:" signature="+ (NSPredicate *)predicateWithValue:(BOOL)value">
        <propagate from="0" to="-2"/>
      </function>
      <function name="predicateWithBlock:" signature="+ (NSPredicate *)predicateWithBlock:(BOOL (^)(id evaluatedObject, NSDictionary *bindings))block">
        <propagate from="1" to="-2"/>
      </function>
      <!--
      <function name="evaluateWithObject:" signature="- (BOOL)evaluateWithObject:(id)object">
        <sink paramNames="evaluateWithObject" kind="regex_dos"/>
      </function>
      <function name="evaluateWithObject:substitutionVariables:" signature="- (BOOL)evaluateWithObject:(id)object substitutionVariables:(NSDictionary *)variables">
        <sink paramNames="evaluateWithObject" kind="regex_dos"/>
      </function>
      -->
    </class>

    <class name="NSException">
      <description>NSException is used to implement exception handling and contains information about an exception.</description>
      <function name="raise:format:" signature="+(void)raise:(NSString *)name format:(NSString *)format, ...">
        <tags>exit</tags>
        <sink paramNames="format" resource="formatstr" kind="format_injection"/>
      </function>
      <function name="raise:format:arguments:" signature="+(void)raise:(NSString *)name format:(NSString *)format arguments:(va_list)argList">
        <tags>exit</tags>
        <sink paramNames="format" resource="formatstr" kind="format_injection"/>
      </function>
    </class>

    <class name="NSAlert">
      <description>NSAlert displays an alert, either as an application-modal dialog or as a sheet attached to a document window.</description>
      <function name="alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:"
                signature="+(NSAlert *)alertWithMessageText:(NSString *)messageTitle defaultButton:(NSString *)defaultButtonTitle alternateButton:(NSString *)alternateButtonTitle otherButton:(NSString *)otherButtonTitle informativeTextWithFormat:(NSString *)informativeText,...">
        <sink paramNames="informativeTextWithFormat" resource="formatstr" kind="format_injection"/>
      </function>
    </class>

    <function name="NSLog" alias="XLog, NSLogv" signature="void NSLog(NSString *format, ...)">
      <description>Writes output to the console, under control of the string pointed to by format</description>
      <tags>formattedOutput</tags>
      <parameters><param type="NSString*"/><param type="..."/></parameters>
      <return type="int"/>
      <sink resource="formatstr" argpos="0" kind="format_injection"/>
      <sink argpos="0,1,2,3" kind="log_forging"/>
      <sink argpos="0,1,2,3" kind="privacy_violation" >
        <tags>cwe:532</tags>
      </sink>
    </function>

    <function name="os_log" alias="os_log_info, os_log_debug, os_log_error, os_log_fault, os_log_with_type" signature="os_log(log, format...)">
      <sink resource="formatstr" argpos="0" kind="format_injection"/>
      <sink argpos="1,2,3" kind="log_forging"/>
      <sink argpos="1,2,3" kind="privacy_violation">
        <tags>cwe:532</tags>
      </sink>
    </function>

    <function name="NSSelectorFromString" signature="SEL NSSelectorFromString ( NSString *aSelectorName );">
      <description>Returns the selector with a given name.</description>
      <parameters>
        <param type="NSString"/>
      </parameters>
      <return type="SEL"/>
      <propagate from="0" to="-1"/>
    </function>

    <class name="SEL">
      <description>Represents a method selector.</description>
    </class>

    <class name="NSFileManager">
      <description>NSFileManager enables you to perform many generic file-system operations and insulates an app from the underlying file system.</description>
      <function name="createDirectoryAtURL:withIntermediateDirectories:attributes:error:" signature="">
        <sink paramNames="createDirectoryAtURL" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="createDirectoryAtPath:withIntermediateDirectories:attributes:error:" signature="">
        <sink paramNames="createDirectoryAtPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="createFileAtPath:contents:attributes:" signature="">
        <sink paramNames="createFileAtPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="removeItemAtURL:error:" signature="">
        <sink paramNames="removeItemAtURL" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="removeItemAtPath:error:" signature="">
        <sink paramNames="removeItemAtPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:" signature="">
        <sink paramNames="replaceItemAtURL,withItemAtURL,backupItemName" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="trashItemAtURL:resultingItemURL:error:" signature="">
        <sink paramNames="trashItemAtURL" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="copyItemAtURL:toURL:error:" signature="">
        <sink paramNames="copyItemAtURL,toURL" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="copyItemAtPath:toPath:error:" signature="">
        <sink paramNames="copyItemAtPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="moveItemAtURL:toURL:error:" signature="">
        <sink paramNames="moveItemAtURL" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="moveItemAtPath:toPath:error:" signature="">
        <sink paramNames="moveItemAtPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="createSymbolicLinkAtURL:withDestinationURL:error:" signature="">
        <sink paramNames="createSymbolicLinkAtURL,withDestinationURL" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="createSymbolicLinkAtPath:withDestinationPath:error:" signature="">
        <sink paramNames="createSymbolicLinkAtPath,withDestinationPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="linkItemAtURL:toURL:error:" signature="">
        <sink paramNames="linkItemAtURL,toURL" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="linkItemAtPath:toPath:error:" signature="">
        <sink paramNames="linkItemAtPath,toPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="setAttributes:ofItemAtPath:error:" signature="">
        <sink paramNames="ofItemAtPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="contentsAtPath:" signature="">
        <sink paramNames="contentsAtPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="changeCurrentDirectoryPath:" signature="">
        <sink paramNames="changeCurrentDirectoryPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="changeFileAttributes:atPath:" signature="">
        <sink paramNames="atPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="copyPath:toPath:handler:" signature="">
        <sink paramNames="copyPath,toPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="createDirectoryAtPath:attributes:" signature="">
        <sink paramNames="createDirectoryAtPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="createSymbolicLinkAtPath:pathContent:" signature="">
        <sink paramNames="createSymbolicLinkAtPath,pathContent" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="contentsOfDirectoryAtPath:error:" signature="">
        <sink paramNames="contentsOfDirectoryAtPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="directoryContentsAtPath:" signature="">
        <sink paramNames="directoryContentsAtPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="linkPath:toPath:handler:" signature="">
        <sink paramNames="linkPath,toPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="movePath:toPath:handler:" signature="">
        <sink paramNames="movePath,toPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="pathContentOfSymbolicLinkAtPath:" signature="">
        <sink paramNames="pathContentOfSymbolicLinkAtPath" resource="filesystem" kind="path_traversal"/>
      </function>
      <function name="removeFileAtPath:handler:" signature="">
        <sink paramNames="removeFileAtPath" resource="filesystem" kind="path_traversal"/>
      </function>
    </class>

    <class name="NSManagedObject" supertypes="NSObject">
      <description>Generic class that implements all the basic behavior required of a Core Data model object</description>
      <function name="valueForKey:" signature="-(id)valueForKey:(NSString *)key">
        <return type="id"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="primitiveValueForKey:" signature="-(id)primitiveValueForKey:(NSString *)key">
        <return type="id"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="mutableSetValueForKey:" signature="- (NSMutableSet *)mutableSetValueForKey:(NSString *)key">
        <return type="NSMutableSet "/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="setPrimitiveValue:forKey:" signature="- (void)setPrimitiveValue:(id)value forKey:(NSString *)key">
        <return type="void "/>
        <propagate from="0,1" to="-2"/>
      </function>
      <function name="executeFetchRequest:error:" signature="- (NSArray *)executeFetchRequest:(NSFetchRequest *)request error:(NSError * _Nullable *)error">
        <return type="NSArray "/>
        <source argpos="-1" kind="database_input"/>
      </function>
    </class>

    <class name="NSMutableArray" supertypes="NSArray">
      <description>Mutable ordered collection of objects</description>
      <tags>Collection: true</tags>
      <function name="arrayWithContentsOfFile:" signature="+ (NSMutableArray *)arrayWithContentsOfFile:(NSString *)aPath">
        <return type="NSMutableArray"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="arrayWithContentsOfURL:" signature="+ (NSMutableArray *)arrayWithContentsOfURL:(NSURL *)aURL">
        <return type="NSMutableArray"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="initWithContentsOfFile:" signature="- (NSMutableArray *)initWithContentsOfFile:(NSString *)aPath">
        <return type="NSMutableArray"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="initWithContentsOfURL:" signature="- (NSMutableArray *)initWithContentsOfURL:(NSURL *)aURL">
        <return type="NSMutableArray"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="objectAtIndex:" signature="-(id)objectAtIndex:(NSUInteger)index">
        <return type="id"/>
        <source argpos="1" kind="object_deallocation"/>
      </function>
      <function name="objectAtIndexedSubscript:" signature="-(id)objectAtIndexedSubscript:(NSUInteger)idx">
        <return type="id"/>
        <source argpos="1" kind="object_deallocation"/>
      </function>
      <function name="removeObjectAtIndex:" signature="-(void)removeObjectAtIndex:(NSUInteger)index">
        <sink argpos="1" kind="object_deallocation"/>
      </function>
      <function name="removeLastObject:" signature="- (void)removeLastObjectx">
        <sink argpos="-1" kind="object_deallocation"/>
      </function>
      <function name="removeAllObjects" signature="-(void)removeAllObjects">
        <sink argpos="-1" kind="object_deallocation"/>
      </function>
      <function name="insertObject:atIndex:" signature="- (void)insertObject:(ObjectType)anObject atIndex:(NSUInteger)index">
        <return type="void "/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="addObject:" signature="- (void)addObject:(ObjectType)anObject">
        <return type="void "/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="replaceObjectAtIndex:withObject:" signature="- (void)replaceObjectAtIndex:(NSUInteger)index withObject:(ObjectType)anObject">
        <return type="void "/>
        <propagate from="1" to="-1"/>
      </function>
    </class>

    <class name="NSMapTable" supertypes="NSObject">
      <description>Mutable collection of associations of keys and values.</description>
      <tags>Collection: true</tags>
      <function name="objectForKey:" signature="- (ObjectType)objectForKey:(KeyType)aKey">
        <return type="ObjectType "/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="keyEnumerator:" signature="- (NSEnumerator *)keyEnumerator">
        <return type="NSEnumerator"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="objectEnumerator:" signature="- (NSEnumerator *)objectEnumerator">
        <return type="NSEnumerator"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="setObject:forKey:" signature="- (void)setObject:(ObjectType)anObject forKey:(KeyType)aKey">
        <return type="void"/>
        <propagate from="0, 1" to="-1"/>
      </function>
      <function name="removeObjectForKey:" signature="- (void)removeObjectForKey:(KeyType)aKey">
        <return type="void"/>
        <sink argpos="1" kind="object_deallocation"/>
      </function>
      <function name="removeAllObjects" signature="-(void)removeAllObjects">
        <sink argpos="-1" kind="object_deallocation"/>
      </function>
    </class>

    <class name="NSHashTable" supertypes="NSObject">
      <description>Mutable collection of associations of keys and values.</description>
      <tags>Collection: true</tags>
      <field name="allObjects" type="NSArray" />
      <function name="member:" signature="- (ObjectType)member:(ObjectType)object">
        <return type="ObjectType "/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="objectEnumerator:" signature="- (NSEnumerator *)objectEnumerator">
        <return type="NSEnumerator"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="addObject:" signature="- (void)addObject:(ObjectType)object">
        <return type="void"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="removeAllObjects" signature="-(void)removeAllObjects">
        <sink argpos="-1" kind="object_deallocation"/>
      </function>
      <function name="removeObject:" signature="- (void)removeObject:(ObjectType)object">
        <sink argpos="1" kind="object_deallocation"/>
      </function>
      <function name="unionHashTable:" signature="- (void)unionHashTable:(NSHashTable *)other">
        <return type="void"/>
        <propagate from="0" to="-1"/>
      </function>
    </class>

    <class name="NSDictionary" supertypes="NSObject">
      <description>Declares the programmatic interface to objects that manage immutable associations of keys and values.</description>
      <tags>Collection: true</tags>
      <function name="writeToFile:atomically" signature="-(BOOL)writeToFile:(NSString *)atomically:(BOOL)">
        <sink paramNames="writeToFile" kind="sensitive_output" resource="filesystem" />
        <sink paramNames="writeToFile" kind="path_traversal" resource="filesystem" />
        <sink argpos="-2" kind="insecure_temporary_file" resource="filesystem">
          <checker id="foundation.atomicallyChecker" />
        </sink>
      </function>
      <function name="writeToFile:atomically:encoding:error:" signature="-(BOOL)writeToFile:(NSString *)atomically:(BOOL)encoding:(NSStringEncoding)error:(NSError * _Nullable *)">
        <sink paramNames="writeToFile" kind="sensitive_output" resource="filesystem" />
        <sink paramNames="writeToFile" kind="path_traversal" resource="filesystem" />
        <sink argpos="-2" kind="insecure_temporary_file" resource="filesystem">
          <checker id="foundation.atomicallyChecker" />
        </sink>
      </function>
    </class>

    <class name="NSMutableDictionary" supertypes="NSDictionary">
      <description>Mutable collection of associations of keys and values.</description>
      <tags>Collection: true</tags>
      <function name="objectForKey:" signature="-(id)objectForKey:(id)aKey">
        <return type="id"/>
        <source argpos="1" kind="object_deallocation"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="objectForKeyedSubscript:" signature="-(id)objectForKeyedSubscript:(id)key">
        <return type="id"/>
        <source argpos="1" kind="object_deallocation"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="valueForKey:" signature="-(id)valueForKey:(NSString *)key">
        <return type="id"/>
        <source argpos="1" kind="object_deallocation"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="removeObjectForKey:" signature="- (void)removeObjectForKey:(id)aKey">
        <sink argpos="1" kind="object_deallocation"/>
      </function>
      <function name="removeAllObjects" signature="-(void)removeAllObjects">
        <sink argpos="-1" kind="object_deallocation"/>
      </function>
    </class>

    <class name="NSSet" supertypes="NSObject">
      <description>Declares the programmatic interface for static sets of distinct objects.</description>
      <tags>Collection: true</tags>
      <field name="allObjects" type="NSArray" />
      <function name="setWithArray:" signature="+ (instancetype)setWithArray:(NSArray *)array">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="setWithObject:" signature="+ (instancetype)setWithObject:(ObjectType)object">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="setWithObjects:" signature="+ (instancetype)setWithObjects:(ObjectType)firstObj,...">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="setWithSet:" signature="+ (instancetype)setWithSet:(NSSet *)set">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="setWithSet:" signature="+ (instancetype)setWithSet:(NSSet *)set">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="setWithSet:count:" signature="+ (instancetype)setWithObjects:(const ObjectType _Nonnull [])objects count:(NSUInteger)cnt">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="setByAddingObjectsFromSet:" signature="- (NSSet *)setByAddingObjectsFromSet:(NSSet *)other">
        <return type="NSSet"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="setByAddingObjectsFromArray:" signature="- (NSSet *)setByAddingObjectsFromArray:(NSArray *)other">
        <return type="NSSet"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithArray:" signature="- (instancetype)initWithArray:(NSArray *)array">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithObjects:" signature="- (instancetype)initWithObjects:(ObjectType)firstObj,...">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithObjects:count:" signature="- (instancetype)initWithObjects:(const ObjectType _Nonnull [])objects count:(NSUInteger)cnt">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithSet:" signature="- (instancetype)initWithSet:(NSSet *)set">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithSet:copyItems:" signature="- (instancetype)initWithSet:(NSSet *)set copyItems:(BOOL)flag">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="enumerateObjectsUsingBlock:" signature="- (void)enumerateObjectsUsingBlock:(void (^)(ObjectType obj, BOOL *stop))block">
        <return type="void"/>
        <propagate from="-1" to="0"/>
      </function>
      <function name="enumerateObjectsWithOptions:usingBlock:" signature="- (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(ObjectType obj, BOOL *stop))block">
        <return type="void"/>
        <propagate from="-1" to="1"/>
      </function>
      <function name="valueForKey:" signature="-(id)valueForKey:(NSString *)key">
        <return type="id"/>
        <source argpos="1" kind="object_deallocation"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="setValue:forKey:" signature="- (void)setValue:(id)value forKey:(NSString *)key">
        <return type="void"/>
        <propagate from="0, 1" to="-1"/>
      </function>
    </class>

    <class name="NSMutableSet" supertypes="NSSet">
      <description>Declares the programmatic interface to a mutable, unordered collection of distinct objects.</description>
      <tags>Collection: true</tags>
      <function name="addObject:" signature="- (void)addObject:(ObjectType)anObject">
        <return type="void"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="removeObject:" signature="- (void)removeObject:(ObjectType)anObject">
        <sink argpos="-1" kind="object_deallocation"/>
      </function>
      <function name="removeAllObjects" signature="-(void)removeAllObjects">
        <sink argpos="-1" kind="object_deallocation"/>
      </function>
      <function name="addObjectsFromArray:" signature="- (void)addObjectsFromArray:(NSArray *)array">
        <return type="void"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="unionSet:" signature="- (void)unionSet:(NSSet *)otherSet">
        <return type="void"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="setSet:" signature="- (void)setSet:(NSSet *)otherSet">
        <return type="void"/>
        <propagate from="0" to="-1"/>
      </function>
    </class>

    <class name="NSCountedSet" supertypes="NSMutableSet">
      <description>Declares the programmatic interface to a mutable, unordered collection of distinct objects.</description>
      <tags>Collection: true</tags>
      <function name="initWithArray:" signature="- (instancetype)initWithArray:(NSArray *)anArray">
        <return type="instancetype"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="initWithSet:" signature="- (instancetype)initWithSet:(NSSet *)aSet">
        <return type="instancetype"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="addObject:" signature="- (void)addObject:(ObjectType)anObject">
        <return type="void"/>
        <propagate from="0" to="-1"/>
      </function>
      <function name="removeObject:" signature="- (void)removeObject:(ObjectType)anObject">
        <sink argpos="-1" kind="object_deallocation"/>
      </function>
      <function name="objectEnumerator:" signature="- (NSEnumerator *)objectEnumerator">
        <return type="NSEnumerator"/>
        <propagate from="0" to="-2"/>
      </function>
    </class>

    <class name="UIApplicationDelegate" supertypes="NSObject">
      <description>Defines methods called by the singleton UIApplication object in response to important events</description>
      <field name="window" type="UIWindow"/>

      <function name="application:openURL:sourceApplication:annotation:" signature="-(BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation">
        <return type="BOOL"/>
        <sink argpos="1" kind="path_traversal"/>
      </function>
      <function name="application:openURL:options:" signature="-(BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary *)options">
        <return type="BOOL"/>
        <sink argpos="1" kind="path_traversal"/>
      </function>
    </class>

    <class name="UIApplication">
      <field name="shared" type="UIApplication" />
      <field name="sharedApplication" type="UIApplication" />
      <field name="delegate" type="UIApplicationDelegate" />

      <method name="openURL:" signature="- (BOOL)openURL:(NSURL)" >
        <sink paramNames="openURL" kind="url_scheme_hijacking" />
      </method>
      <method name="openURL:options:completionHandler:" signature="- (void)openURL:(NSURL) options:(NSDictionary) completionHandler:(void)" >
        <sink paramNames="openURL" kind="url_scheme_hijacking" />
      </method>
    </class>

    <class name="UIView" supertypes="UIResponder">
      <description>Defines a rectangular area on the screen and the interfaces for managing the content in that area.</description>
      <field name="layer" type="CALayer"/>
      <field name="hidden" type="Bool">
        <tags>screen_caching_neutralizer:true</tags>
      </field>
      <field name="window" type="UIWindow"/>
      <method name="addSubview:" signature="addSubview:(UIView)">
        <tags>screen_caching_neutralizer:true</tags>
      </method>
      <method name="setHidden:" signature="setHidden:">
        <tags>screen_caching_neutralizer:true</tags>
      </method>
    </class>

    <class name="UIViewController" supertypes="UIResponder">
      <description>Defines a rectangular area on the screen and the interfaces for managing the content in that area.</description>
      <field name="view" type="UIView"/>
    </class>

    <class name="UIWindow" supertypes="UIView">
      <description>Defines a rectangular area on the screen and the interfaces for managing the content in that area.</description>
      <field name="rootViewController" type="UIViewController"/>
    </class>

    <class name="UIWebView" supertypes="UIView">
      <description>Used to embed web content in your app, to move back and forward in the history of webpages, and to set
        some web content properties programmatically.</description>
      <function name="stringByEvaluatingJavaScriptFromString:" signature="-(NSString *)stringByEvaluatingJavaScriptFromString:(NSString *)script">
        <return type="NSString"/>
        <sink paramNames="stringByEvaluatingJavaScriptFromString" kind="code_injection"/>
      </function>
      <function name="loadHTMLString:baseURL:" signature="-(void *)loadHTMLString:(NSString *)string baseURL:(NSURL *)baseURL">
        <return type="void"/>
        <sink paramNames="loadHTMLString" kind="xss"/>
      </function>
    </class>

    <class name="WKWebView" supertypes="UIView">
      <description>Displays interactive web content, such as for an in-app browser.</description>
      <function name="evaluateJavaScript:completionHandler:" signature="-(void)evaluateJavaScript:(NSString *)javaScriptString completionHandler:(void (^)(id, NSError *error))completionHandler">
        <return type="void"/>
        <sink paramNames="evaluateJavaScript" kind="code_injection"/>
      </function>
      <function name="loadHTMLString:baseURL:" signature="-(WKNavigation *)loadHTMLString:(NSString *)string baseURL:(NSURL *)baseURL">
        <return type="WKNavigation"/>
        <sink paramNames="loadHTMLString" kind="xss"/>
      </function>
    </class>

    <class name="WKNavigation" supertypes="NSObject">
      <description>Contains information for tracking the loading progress of a webpage.</description>
      <tags>mutable: true</tags>
    </class>

    <class name="NSJSONSerialization" supertypes="NSObject">
      <description>Convert JSON to Foundation objects and convert Foundation objects to JSON.</description>
      <function name="JSONObjectWithData:options:error:" signature="+ (id)JSONObjectWithData:(NSData *)data options:(NSJSONReadingOptions)opt error:(NSError * _Nullable *)error">
        <return type="id"/>
        <sink paramNames="JSONObjectWithData" kind="json_injection"/>
      </function>
      <function name="JSONObjectWithStream:options:error:" signature="+ (id)JSONObjectWithStream:(NSInputStream *)stream options:(NSJSONReadingOptions)opt error:(NSError * _Nullable *)error">
        <return type="id"/>
        <sink paramNames="JSONObjectWithStream" kind="json_injection"/>
      </function>
      <function name="dataWithJSONObject:options:error:" signature="+ (NSData *)dataWithJSONObject:(id)obj options:(NSJSONWritingOptions)opt error:(NSError * _Nullable *)error">
        <return type="NSData"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="writeJSONObject:toStream:options:error:" signature="+ (NSInteger)writeJSONObject:(id)obj toStream:(NSOutputStream *)stream options:(NSJSONWritingOptions)opt error:(NSError * _Nullable *)error">
        <return type="NSInteger"/>
        <propagate from="0" to="1"/>
      </function>
    </class>

    <class name="NSURLConnection" supertypes="NSObject">
      <description>Contains information for tracking the loading progress of a webpage.</description>
      <function name="initWithRequest:delegate:" signature="- (instancetype)initWithRequest:(NSURLRequest *)request delegate:(id)delegate">
        <return type="instancetype"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <sink argpos="0"  kind="insecure_transport" resource="network" >
          <checker id="foundation.httpGetChecker"/>
        </sink>
        <sink paramNames="initWithRequest" kind="http_caching" resource="network" />
      </function>
      <function name="initWithRequest:delegate:startImmediately:" signature="- (instancetype)initWithRequest:(NSURLRequest *)request delegate:(id)delegate startImmediately:(BOOL)startImmediately">
        <return type="instancetype"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <sink paramNames="initWithRequest"  kind="insecure_transport" resource="network" >
          <checker id="foundation.httpGetChecker"/>
        </sink>
        <sink paramNames="initWithRequest"  kind="http_caching" resource="network" />
      </function>
      <function name="sendSynchronousRequest:returningResponse:error:" signature="+ (NSData *)sendSynchronousRequest:(NSURLRequest *)request returningResponse:(NSURLResponse * _Nullable *)response error:(NSError * _Nullable *)error">
        <return type="NSData"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <sink paramNames="sendSynchronousRequest" kind="insecure_transport" resource="network" />
        <sink paramNames="sendSynchronousRequest" kind="privacy_violation" resource="network" >
          <checker id="foundation.httpGetChecker"/>
        </sink>
        <sink paramNames="sendSynchronousRequest" kind="http_caching" resource="network" />
      </function>
      <function name="sendAsynchronousRequest:queue:completionHandler:" signature="+ (void)sendAsynchronousRequest:(NSURLRequest *)request queue:(NSOperationQueue *)queue completionHandler:(void (^)(NSURLResponse *response, NSData *data, NSError *connectionError))handler">
        <return type="void"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <sink paramNames="sendAsynchronousRequest" kind="insecure_transport" resource="network" />
        <sink paramNames="sendAsynchronousRequest" kind="privacy_violation" resource="network" >
          <checker id="foundation.httpGetChecker"/>
        </sink>
        <sink paramNames="sendAsynchronousRequest" kind="http_caching" resource="network" />
      </function>
    </class>

    <class name="NSURLSession" supertypes="NSObject">
      <description>Provides an API for downloading content.</description>
      <field name="shared" type="NSURLSession" />

      <function name="dataTaskWithURL:" signature="- (NSURLSessionDataTask *)dataTaskWithURL:(NSURL *)url">
        <return type="NSURLSessionDataTask"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <sink paramNames="dataTaskWithURL" kind="insecure_transport" resource="network" />
        <sink paramNames="dataTaskWithURL" kind="privacy_violation" resource="network" />
        <sink paramNames="dataTaskWithURL" kind="http_caching" resource="network" />
      </function>
      <function name="dataTaskWithURL:completionHandler:" signature="- (NSURLSessionDataTask *)dataTaskWithURL:(NSURL *)url completionHandler:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler">
        <return type="NSURLSessionDataTask"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <propagate from="-1,0" to="1,2"/>
        <sink paramNames="dataTaskWithURL" kind="insecure_transport" resource="network" />
        <sink paramNames="dataTaskWithURL" kind="privacy_violation" resource="network" />
        <sink paramNames="dataTaskWithURL" kind="http_caching" resource="network" />
      </function>
      <function name="dataTaskWithRequest:" signature="- (NSURLSessionDataTask *)dataTaskWithRequest:(NSURLRequest *)request">
        <return type="NSURLSessionDataTask"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <sink paramNames="dataTaskWithRequest" kind="insecure_transport" resource="network" />
        <sink paramNames="dataTaskWithRequest" kind="privacy_violation" resource="network" />
        <sink paramNames="dataTaskWithRequest" kind="http_caching" resource="network" />
      </function>
      <function name="dataTaskWithRequest:completionHandler:" signature="- (NSURLSessionDataTask *)dataTaskWithRequest:(NSURLRequest *)request completionHandler:(void (^)(NSData *data,  NSURLResponse *response, NSError *error))completionHandler">
        <return type="NSURLSessionDataTask"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <sink paramNames="dataTaskWithRequest" kind="insecure_transport" resource="network" />
        <sink paramNames="dataTaskWithRequest" kind="privacy_violation" resource="network" />
        <sink paramNames="dataTaskWithRequest" kind="http_caching" resource="network" />
      </function>
      <function name="downloadTaskWithURL:" signature="- (NSURLSessionDownloadTask *)downloadTaskWithURL:(NSURL *)url">
        <return type="NSURLSessionDownloadTask"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <sink paramNames="downloadTaskWithURL" kind="insecure_transport" resource="network" />
        <sink paramNames="downloadTaskWithURL" kind="privacy_violation" resource="network" />
        <sink paramNames="downloadTaskWithURL" kind="http_caching" resource="network" />
      </function>
      <function name="downloadTaskWithURL:completionHandler:" signature="- (NSURLSessionDownloadTask *)downloadTaskWithURL:(NSURL *)url completionHandler:(void (^)(NSURL *location, NSURLResponse *response, NSError *error))completionHandler">
        <return type="NSURLSessionDownloadTask"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <sink paramNames="downloadTaskWithURL" kind="insecure_transport" resource="network" />
        <sink paramNames="downloadTaskWithURL" kind="privacy_violation" resource="network" />
        <sink paramNames="downloadTaskWithURL" kind="http_caching" resource="network" />
      </function>
      <function name="downloadTaskWithRequest:" signature="- (NSURLSessionDownloadTask *)downloadTaskWithRequest:(NSURLRequest *)request">
        <return type="NSURLSessionDownloadTask"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <sink paramNames="downloadTaskWithRequest" kind="insecure_transport" resource="network" />
        <sink paramNames="downloadTaskWithRequest" kind="privacy_violation" resource="network" />
        <sink paramNames="downloadTaskWithRequest" kind="http_caching" resource="network" />
      </function>
      <function name="downloadTaskWithRequest:completionHandler:" signature="- (NSURLSessionDownloadTask *)downloadTaskWithRequest:(NSURLRequest *)request completionHandler:(void (^)(NSURL *location, NSURLResponse *response, NSError *error))completionHandler">
        <return type="NSURLSessionDownloadTask"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <sink paramNames="downloadTaskWithRequest" kind="insecure_transport" resource="network" />
        <sink paramNames="downloadTaskWithRequest" kind="privacy_violation" resource="network" />
        <sink paramNames="downloadTaskWithRequest" kind="http_caching" resource="network" />
      </function>
      <function name="downloadTaskWithResumeData:" signature="- (NSURLSessionDownloadTask *)downloadTaskWithResumeData:(NSData *)resumeData">
        <return type="NSURLSessionDownloadTask"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <sink paramNames="downloadTaskWithResumeData" kind="insecure_transport" resource="network" />
        <sink paramNames="downloadTaskWithResumeData" kind="privacy_violation" resource="network" />
        <sink paramNames="downloadTaskWithResumeData" kind="http_caching" resource="network" />
      </function>
      <function name="downloadTaskWithResumeData:completionHandler:" signature="- (NSURLSessionDownloadTask *)downloadTaskWithResumeData:(NSData *)resumeData completionHandler:(void (^)(NSURL *location, NSURLResponse *response, NSError *error))completionHandler">
        <return type="NSURLSessionDownloadTask"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <sink paramNames="downloadTaskWithResumeData" kind="insecure_transport" resource="network" />
        <sink paramNames="downloadTaskWithResumeData" kind="privacy_violation" resource="network" />
        <sink paramNames="downloadTaskWithResumeData" kind="http_caching" resource="network" />
      </function>
      <function name="uploadTaskWithRequest:fromData:" signature="- (NSURLSessionUploadTask *)uploadTaskWithRequest:(NSURLRequest *)request fromData:(NSData *)bodyData">
        <return type="NSURLSessionUploadTask"/>
        <source argpos="0,1" kind="user_input" resource="network"/>
        <sink paramNames="uploadTaskWithRequest" kind="insecure_transport" resource="network" />
        <sink paramNames="uploadTaskWithRequest" kind="privacy_violation" resource="network" />
        <sink paramNames="uploadTaskWithRequest" kind="http_caching" resource="network" />
      </function>
      <function name="uploadTaskWithRequest:fromData:completionHandler:" signature="- (NSURLSessionUploadTask *)uploadTaskWithRequest:(NSURLRequest *)request fromData:(NSData *)bodyData completionHandler:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler">
        <return type="NSURLSessionUploadTask"/>
        <source argpos="0,1" kind="user_input" resource="network"/>
        <sink paramNames="uploadTaskWithRequest" kind="insecure_transport" resource="network" />
        <sink paramNames="uploadTaskWithRequest" kind="privacy_violation" resource="network" />
        <sink paramNames="uploadTaskWithRequest" kind="http_caching" resource="network" />
      </function>
      <function name="uploadTaskWithRequest:fromFile:" signature="- (NSURLSessionUploadTask *)uploadTaskWithRequest:(NSURLRequest *)request fromFile:(NSURL *)fileURL">
        <return type="NSURLSessionUploadTask"/>
        <source argpos="0,1" kind="user_input" resource="network"/>
        <sink paramNames="uploadTaskWithRequest" kind="insecure_transport" resource="network" />
        <sink paramNames="uploadTaskWithRequest" kind="privacy_violation" resource="network" />
        <sink paramNames="uploadTaskWithRequest" kind="http_caching" resource="network" />
      </function>
      <function name="uploadTaskWithRequest:fromFile:completionHandler:" signature="- (NSURLSessionUploadTask *)uploadTaskWithRequest:(NSURLRequest *)request fromFile:(NSURL *)fileURL completionHandler:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler">
        <return type="NSURLSessionUploadTask"/>
        <source argpos="0,1" kind="user_input" resource="network"/>
        <sink paramNames="uploadTaskWithStreamedRequest" kind="insecure_transport" resource="network" />
        <sink paramNames="uploadTaskWithStreamedRequest" kind="privacy_violation" resource="network" />
        <sink paramNames="uploadTaskWithStreamedRequest" kind="http_caching" resource="network" />
      </function>
      <function name="uploadTaskWithStreamedRequest:" signature="- (NSURLSessionUploadTask *)uploadTaskWithStreamedRequest:(NSURLRequest *)request">
        <return type="NSURLSessionUploadTask"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <sink paramNames="uploadTaskWithStreamedRequest" kind="insecure_transport" resource="network" />
        <sink paramNames="uploadTaskWithStreamedRequest" kind="privacy_violation" resource="network" />
        <sink paramNames="uploadTaskWithStreamedRequest" kind="http_caching" resource="network" />
      </function>
      <function name="streamTaskWithHostName:port:" signature="">
        <return type="NSURLSessionUploadTask"/>
        <source argpos="0,1" kind="user_input" resource="network"/>
        <sink paramNames="streamTaskWithHostName" kind="insecure_transport" resource="network" />
        <sink paramNames="streamTaskWithHostName" kind="privacy_violation" resource="network" />
        <sink paramNames="streamTaskWithHostName" kind="http_caching" resource="network" />
      </function>
      <function name="streamTaskWithNetService:" signature="">
        <return type="NSURLSessionUploadTask"/>
        <source argpos="0" kind="user_input" resource="network"/>
        <sink paramNames="streamTaskWithNetService" kind="insecure_transport" resource="network" />
        <sink paramNames="streamTaskWithNetService" kind="privacy_violation" resource="network" />
        <sink paramNames="streamTaskWithNetService" kind="http_caching" resource="network" />
      </function>
    </class>

    <class name="NSURL" supertypes="NSObject">
      <description>Represents a URL that can potentially contain the location of a resource on a remote server, the path of a local file on disk, or even an arbitrary piece of encoded data.</description>
      <function name="URLWithString:" signature="+ (instancetype)URLWithString:(NSString *)URLString">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
        <!--<sink paramNames="URLWithString" kind="insecure_transport" />-->
      </function>
      <function name="initWithString:" signature="- (instancetype)initWithString:(NSString *)URLString">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
        <!--<sink paramNames="initWithString" kind="insecure_transport" />-->
      </function>
      <function name="URLWithString:relativeToURL:" signature="+ (instancetype)URLWithString:(NSString *)URLString relativeToURL:(NSURL *)baseURL">
        <return type="instancetype"/>
        <propagate from="0, 1" to="-2"/>
        <!--<sink paramNames="URLWithString" kind="insecure_transport" />-->
      </function>
      <function name="fileURLWithPath:isDirectory:" signature="+ (NSURL *)fileURLWithPath:(NSString *)path isDirectory:(BOOL)isDir">
        <return type="NSURL"/>
        <propagate from="0" to="-2"/>
        <sink paramNames="fileURLWithPath" kind="path_traversal" />
      </function>
      <function name="initFileURLWithPath:isDirectory:" signature="- (instancetype)initFileURLWithPath:(NSString *)path isDirectory:(BOOL)isDir">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
        <sink paramNames="initFileURLWithPath" kind="path_traversal" />
      </function>
      <function name="fileURLWithPath:" signature="+ (NSURL *)fileURLWithPath:(NSString *)path">
        <return type="NSURL"/>
        <propagate from="0" to="-2"/>
        <sink paramNames="fileURLWithPath" kind="path_traversal" />
      </function>
      <function name="initFileURLWithPath:" signature="- (instancetype)initFileURLWithPath:(NSString *)path">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
        <sink paramNames="initFileURLWithPath" kind="path_traversal" />
      </function>
      <function name="fileURLWithPathComponents:" signature="+ (NSURL *)fileURLWithPathComponents:(NSArray *)components">
        <return type="NSURL"/>
        <propagate from="0" to="-2"/>
        <sink paramNames="fileURLWithPathComponents" kind="path_traversal" />
      </function>
      <function name="URLByResolvingAliasFileAtURL:options:error:" signature="+ (instancetype)URLByResolvingAliasFileAtURL:(NSURL *)url options:(NSURLBookmarkResolutionOptions)options error:(NSError * _Nullable *)error">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
        <sink paramNames="URLByResolvingAliasFileAtURL" kind="path_traversal" />
      </function>
      <function name="URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:" signature="+ (instancetype)URLByResolvingBookmarkData:(NSData *)bookmarkData options:(NSURLBookmarkResolutionOptions)options relativeToURL:(NSURL *)relativeURL bookmarkDataIsStale:(BOOL *)isStale error:(NSError * _Nullable *)error">
        <return type="instancetype"/>
        <propagate from="0,2" to="-2"/>
      </function>
      <function name="initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:" signature="- (instancetype)initByResolvingBookmarkData:(NSData *)bookmarkData options:(NSURLBookmarkResolutionOptions)options relativeToURL:(NSURL *)relativeURL bookmarkDataIsStale:(BOOL *)isStale error:(NSError * _Nullable *)error">
        <return type="instancetype"/>
        <propagate from="0,2" to="-2"/>
      </function>
      <function name="fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:" signature="+ (NSURL *)fileURLWithFileSystemRepresentation:(const char *)path isDirectory:(BOOL)isDir relativeToURL:(NSURL *)baseURL">
        <return type="NSURL"/>
        <propagate from="0,2" to="-2"/>
        <sink paramNames="fileURLWithFileSystemRepresentation,relativeToURL" kind="path_traversal" />
      </function>
      <function name="initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:" signature="- (instancetype)initFileURLWithFileSystemRepresentation:(const char *)path isDirectory:(BOOL)isDir relativeToURL:(NSURL *)baseURL">
        <return type="instancetype"/>
        <propagate from="0,2" to="-2"/>
        <sink paramNames="initFileURLWithFileSystemRepresentationrelativeToURL" kind="path_traversal" />
      </function>
    </class>

    <class name="NSURLRequest" supertypes="NSObject">
      <description>Represent a URL load request in a manner independent of protocol and URL scheme.</description>
      <function name="setHTTPMethod:" signature="setHTTPMethod:" />
      <function name="requestWithURL:" signature="+ (instancetype)requestWithURL:(NSURL *)theURL">
        <return type="instancetype"/>
        <propagate from="0" to="-1,-2"/>
        <sink paramNames="requestWithURL" kind="http_parameter_pollution" />
      </function>
      <function name="initWithURL:" signature="- (instancetype)initWithURL:(NSURL *)theURL">
        <return type="instancetype"/>
        <propagate from="0" to="-1,-2"/>
        <sink paramNames="initWithURL" kind="http_parameter_pollution" />
      </function>
      <function name="requestWithURL:cachePolicy:timeoutInterval:" signature="+ (instancetype)requestWithURL:(NSURL *)theURL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval">
        <return type="instancetype"/>
        <propagate from="0" to="-1,-2"/>
        <sink paramNames="requestWithURL" kind="http_parameter_pollution" />
      </function>
      <function name="initWithURL:cachePolicy:timeoutInterval:" signature="- (instancetype)initWithURL:(NSURL *)theURL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval">
        <return type="instancetype"/>
        <propagate from="0" to="-1,-2"/>
        <sink paramNames="initWithURL" kind="http_parameter_pollution" />
      </function>
    </class>

    <class name="NSMutableURLRequest" supertypes="NSURLRequest">
      <description>Subclass of NSURLRequest provided to aid developers who may find it more convenient to mutate a single request object for a series of URL load requests instead of creating an immutable NSURLRequest object for each load.</description>
      <function name="addValue:forHTTPHeaderField:" signature="- (void)addValue:(NSString *)value forHTTPHeaderField:(NSString *)field">
        <return type="void"/>
        <sink paramNames="addValue" kind="header_manipulation" resource="network" />
      </function>
      <function name="setValue:forHTTPHeaderField:" signature="- (void)setValue:(NSString *)value forHTTPHeaderField:(NSString *)field">
        <return type="void"/>
        <sink paramNames="setValue" kind="header_manipulation" resource="network" />
      </function>
      <function name="setAllHTTPHeaderFields:" signature="(void) setAllHTTPHeaderFields:(NSDictionary)" >
        <return type="void"/>
        <sink paramNames="setAllHTTPHeaderFields" kind="header_manipulation" resource="network" />
      </function>
    </class>

    <class name="NSData" supertypes="NSObject">
      <description>Provide data objects, object-oriented wrappers for byte buffers.</description>
      <method name="dataWithBytes:length:" signature="+ (instancetype)dataWithBytes:(const void *)bytes length:(NSUInteger)length">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="dataWithBytesNoCopy:length:" signature="+ (instancetype)dataWithBytesNoCopy:(void *)bytes length:(NSUInteger)length">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="dataWithBytesNoCopy:length:freeWhenDone:" signature="+ (instancetype)dataWithBytesNoCopy:(void *)bytes length:(NSUInteger)length freeWhenDone:(BOOL)freeWhenDone">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="dataWithContentsOfFile:" signature="+ (instancetype)dataWithContentsOfFile:(NSString *)path">
        <tags>hardcoded_path:contentsOfFile</tags>
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
        <source argpos="0" kind="file_input" resource="filesystem" />
        <sink paramNames="dataWithContentsOfFile" kind="path_traversal" resource="filesystem" />
      </method>
      <method name="dataWithContentsOfFile:options:error:" signature="+ (instancetype)dataWithContentsOfFile:(NSString *)path options:(NSDataReadingOptions)mask error:(NSError * _Nullable *)errorPtr">
        <tags>hardcoded_path:contentsOfFile</tags>
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
        <source argpos="0" kind="file_input" resource="filesystem" />
        <sink paramNames="dataWithContentsOfFile" kind="path_traversal" resource="filesystem" />
      </method>
      <method name="dataWithContentsOfURL:" signature="+ (instancetype)dataWithContentsOfURL:(NSURL *)aURL">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="dataWithContentsOfURL:options:error:" signature="+ (instancetype)dataWithContentsOfURL:(NSURL *)aURL options:(NSDataReadingOptions)mask error:(NSError * _Nullable *)errorPtr">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="dataWithData:" signature="+ (instancetype)dataWithData:(NSData *)aData">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="initWithBase64EncodedData:options:" signature="- (instancetype)initWithBase64EncodedData:(NSData *)base64Data options:(NSDataBase64DecodingOptions)options">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="initWithBase64EncodedString:options:" signature="- (instancetype)initWithBase64EncodedString:(NSString *)base64String options:(NSDataBase64DecodingOptions)options">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="initWithBytes:length:" signature="- (instancetype)initWithBytes:(const void *)bytes length:(NSUInteger)length">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="initWithBytesNoCopy:length:" signature="- (instancetype)initWithBytes:(const void *)bytes length:(NSUInteger)length">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="initWithBytesNoCopy:length:deallocator:" signature="- (instancetype)initWithBytesNoCopy:(void *)bytes length:(NSUInteger)length deallocator:(void (^)(void *bytes, NSUInteger length))deallocator">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="initWithBytesNoCopy:length:freeWhenDone:" signature="- (instancetype)initWithBytesNoCopy:(void *)bytes length:(NSUInteger)length freeWhenDone:(BOOL)flag">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="initWithContentsOfFile:" signature="- (instancetype)initWithContentsOfFile:(NSString *)path">
        <tags>hardcoded_path:contentsOfFile</tags>
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
        <source argpos="0" kind="file_input" resource="filesystem" />
        <sink paramNames="dataWithContentsOfFile" kind="path_traversal" resource="filesystem" />
      </method>
      <method name="initWithContentsOfFile:options:error:" signature="- (instancetype)initWithContentsOfFile:(NSString *)path options:(NSDataReadingOptions)mask error:(NSError * _Nullable *)errorPtr">
        <tags>hardcoded_path:contentsOfFile</tags>
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
        <source argpos="0" kind="file_input" resource="filesystem" />
        <sink paramNames="dataWithContentsOfFile" kind="path_traversal" resource="filesystem" />
      </method>
      <method name="initWithContentsOfURL:" signature="- (instancetype)initWithContentsOfURL:(NSURL *)aURL">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="initWithContentsOfURL:options:error:" signature="- (instancetype)initWithContentsOfURL:(NSURL *)aURL options:(NSDataReadingOptions)mask error:(NSError * _Nullable *)errorPtr">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="initWithContentsOfURL:options:error:" signature="- (instancetype)initWithContentsOfURL:(NSURL *)aURL options:(NSDataReadingOptions)mask error:(NSError * _Nullable *)errorPtr">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="initWithContentsOfMappedFile:" signature="" >
        <tags>hardcoded_path:contentsOfMappedFile</tags>
        <source argpos="0" kind="file_input" resource="filesystem" />
        <sink paramNames="dataWithContentsOfFile" kind="path_traversal" resource="filesystem" />
      </method>
      <method name="dataWithContentsOfMappedFile:" signature="" >
        <tags>hardcoded_path:contentsOfMappedFile</tags>
        <source argpos="0" kind="file_input" resource="filesystem" />
        <sink paramNames="dataWithContentsOfFile" kind="path_traversal" resource="filesystem" />
      </method>
      <method name="initWithData:" signature="- (instancetype)initWithData:(NSData *)data">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="getBytes:length:" signature="- (void)getBytes:(void *)buffer length:(NSUInteger)length">
        <return type="void"/>
        <propagate from="-1" to="0"/>
      </method>
      <method name="getBytes:range:" signature="- (void)getBytes:(void *)buffer range:(NSRange)range">
        <return type="void"/>
        <propagate from="-1" to="0"/>
      </method>
      <method name="subdataWithRange:" signature="- (NSData *)subdataWithRange:(NSRange)range">
        <return type="NSData"/>
        <propagate from="0" to="-2"/>
      </method>
      <method name="writeToFile:atomically:" signature="- (BOOL)writeToFile:(NSString *)path atomically:(BOOL)atomically">
        <return type="BOOL"/>
        <propagate from="-1" to="0"/>
        <sink paramNames="writeToFile" kind="sensitive_output" resource="filesystem" />
        <sink paramNames="writeToFile" kind="path_traversal" resource="filesystem" />
        <sink argpos="-2" kind="insecure_temporary_file" resource="filesystem">
          <checker id="foundation.atomicallyChecker" />
        </sink>
      </method>
      <method name="writeToFile:options:error:" signature="- (BOOL)writeToFile:(NSString *)path options:(NSDataWritingOptions)mask error:(NSError * _Nullable *)errorPtr">
        <return type="BOOL"/>
        <propagate from="-1" to="0"/>
        <sink paramNames="writeToFile" kind="sensitive_output" resource="filesystem" />
        <sink paramNames="writeToFile" kind="path_traversal" resource="filesystem" />
      </method>
      <method name="writeToURL:atomically:" signature="" >
        <sink paramNames="writeToFile" kind="sensitive_output" resource="filesystem" />
        <sink paramNames="writeToFile" kind="path_traversal" resource="filesystem" />
      </method>
      <method name="writeToURL:options:error:" signature=""  >
        <sink paramNames="writeToFile" kind="sensitive_output" resource="filesystem" />
        <sink paramNames="writeToFile" kind="path_traversal" resource="filesystem" />
      </method>
      <method name="initWithBase64EncodedData:options:" signature="" >
        <tags>algo:base64</tags>
        <return type="NSData" />
        <sink argpos="-1" kind="weak_hash_algorithm" resource="crypto" />
      </method>
      <method name="initWithBase64Encoding:" signature="" >
        <tags>algo:base64</tags>
        <return type="NSData" />
        <sink argpos="-1" kind="weak_hash_algorithm" resource="crypto" />
      </method>
      <method name="initWithBase64EncodedString:options:" signature="" >
        <tags>algo:base64</tags>
        <return type="NSData" />
        <sink argpos="-1" kind="weak_hash_algorithm" resource="crypto" />
      </method>
      <method name="base64EncodedDataWithOptions" signature="" >
        <tags>algo:base64</tags>
        <return type="NSData" />
        <sink argpos="-1" kind="weak_hash_algorithm" resource="crypto" />
      </method>
      <method name="base64EncodedStringWithOptions:" signature="" >
        <tags>algo:base64</tags>
        <return type="NSData" />
        <sink argpos="-1" kind="weak_hash_algorithm" resource="crypto" />
      </method>
      <method name="base64Encoding" signature="" >
        <tags>algo:base64</tags>
        <return type="NSData" />
        <sink argpos="-1" kind="weak_hash_algorithm" resource="crypto" />
      </method>
      <method name="AES256EncryptWithKey" signature="(NSString) AES256EncryptWithKey:(NSString)" >
        <neutralization argpos="-1" kind="encryption" resource="crypto" />
      </method>
    </class>

    <class name="NSMutableData" supertypes="NSData">
      <description>Provide data objects, or object-oriented wrappers for byte buffers.</description>
      <function name="setData:" signature="- (void)setData:(NSData *)aData">
        <return type="void"/>
        <propagate from="0" to="-1"/>
      </function>
    </class>

    <class name="NSPurgeableData" supertypes="NSMutableData">
      <description>Used when you have objects with bytes that can be discarded when no longer needed.</description>
    </class>

    <class name="NSURLProtocol" supertypes="NSObject">
      <description>Handles the loading of protocol-specific URL data.</description>
      <function name="initWithRequest:cachedResponse:client:" signature="- (instancetype)initWithRequest:(NSURLRequest *)request cachedResponse:(NSCachedURLResponse *)cachedResponse client:(id)client">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="propertyForKey:inRequest:" signature="+ (id)propertyForKey:(NSString *)key inRequest:(NSURLRequest *)request">
        <return type="id"/>
        <propagate from="0,1" to="-2"/>
      </function>
      <function name="setProperty:forKey:inRequest:" signature="+ (void)setProperty:(id)value forKey:(NSString *)key inRequest:(NSMutableURLRequest *)request">
        <return type="void"/>
        <propagate from="0" to="1,2"/>
      </function>
    </class>

    <class name="NSURLComponents" supertypes="NSObject">
      <description>Designed to parse URLs based on RFC 3986 and to construct URLs from their constituent parts.</description>
      <field name="URL" type="NSSURL">
        <source argpos="-1" kind="user_input"/>
      </field>
      <field name="fragment" type="NSString">
        <source argpos="-1" kind="user_input"/>
      </field>
      <field name="host" type="NSString">
        <source argpos="-1" kind="user_input"/>
      </field>
      <field name="user" type="NSString">
        <source argpos="-1" kind="user_input"/>
      </field>
      <field name="password" type="NSString">
        <source argpos="-1" kind="user_input"/>
      </field>
      <field name="path" type="NSString">
        <source argpos="-1" kind="user_input"/>
      </field>
      <field name="query" type="NSString">
        <source argpos="-1" kind="user_input"/>
      </field>
      <field name="queryItems" type="NSArray">
        <source argpos="-1" kind="user_input"/>
      </field>
      <function name="componentsWithString:" signature="+ (instancetype)componentsWithString:(NSString *)URLString">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="componentsWithURL:resolvingAgainstBaseURL:" signature="+ (instancetype)componentsWithURL:(NSURL *)url resolvingAgainstBaseURL:(BOOL)resolve">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithString:" signature="- (instancetype)initWithString:(NSString *)URLString">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithURL:resolvingAgainstBaseURL:" signature="- (instancetype)initWithURL:(NSURL *)url resolvingAgainstBaseURL:(BOOL)resolve">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="URLRelativeToURL:" signature="- (NSURL *)URLRelativeToURL:(NSURL *)baseURL">
        <return type="NSURL"/>
        <propagate from="0" to="-2"/>
      </function>
    </class>

    <class name="NSXMLParser" supertypes="NSObject">
      <description>Parse XML documents (including DTD declarations) in an event-driven manner.</description>
      <field name="shouldResolveExternalEntities" type="BOOL">
        <sink  argpos="-1" kind="xml_injection"/>
      </field>
      <function name="initWithContentsOfURL:" signature="- (instancetype)initWithContentsOfURL:(NSURL *)url">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithData:" signature="- (instancetype)initWithData:(NSData *)data">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithStream:" signature="- (instancetype)initWithStream:(NSInputStream *)stream">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="setShouldResolveExternalEntities:" signature="">
        <sink  argpos="-1" kind="xml_injection"/>
        <propagate from="-1" to="-2"/>
      </function>
    </class>

    <class name="NSXMLNode" supertypes="NSObject">
      <description>Represents a xml node.</description>
      <function name="initWithKind:" signature="- (instancetype)initWithKind:(NSXMLNodeKind)kind">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="initWithKind:options:" signature="- (instancetype)initWithKind:(NSXMLNodeKind)kind options:(NSUInteger)options">
        <return type="instancetype"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="documentWithRootElement:" signature="+ (id)documentWithRootElement:(NSXMLElement *)element">
        <return type="id"/>
        <propagate from="0" to="-2"/>
      </function>
      <function name="nodesForXPath:error:" signature="- (NSArray *)nodesForXPath:(NSString *)xpath error:(NSError * _Nullable *)error">
        <return type="NSArray"/>
        <sink  paramNames="nodesForXPath" kind="xpath_injection"/>
      </function>
      <function name="objectsForXQuery:error:" signature="- (NSArray *)objectsForXQuery:(NSString *)xquery error:(NSError * _Nullable *)error">
        <return type="NSArray"/>
        <sink  paramNames="nodesForXPath" kind="xpath_injection"/>
      </function>
      <function name="objectsForXQuery:constants:error:" signature="- (NSArray *)objectsForXQuery:(NSString *)xquery constants:(NSDictionary *)constants error:(NSError * _Nullable *)error">
        <return type="NSArray"/>
        <sink  paramNames="nodesForXPath" kind="xpath_injection"/>
      </function>
    </class>

    <class name="NSXMLDTD" supertypes="NSXMLNode">
      <description>Represents a DTD instance.</description>
    </class>

    <class name="NSXMLDTDNode" supertypes="NSXMLNode">
      <description>Represents a DTD node.</description>
    </class>

    <class name="NSXMLDocument" supertypes="NSXMLNode">
      <description>Represents a xml document.</description>
      <constructor name="initWithContentsOfURL:options:error:" signature="- (instancetype)initWithContentsOfURL:(NSURL) options:(NSXMLNodeOptions) error:(NSError)" >
        <sink paramNames="initWithContentsOfURL" kind="xml_injection" resource="other" />
      </constructor>
      <constructor name="initWithData:options:error:" signature="- (instancetype)initWithData:(NSData) options:(NSXMLNodeOptions) error:(NSError)" >
        <sink paramNames="initWithData" kind="xml_injection" resource="other" />
      </constructor>
      <constructor name="initWithRootElement:" signature="- (instancetype)initWithRootElement:(NSXMLElement)" >
        <sink paramNames="initWithRootElement" kind="xml_injection" resource="other" />
      </constructor>
      <constructor name="initWithXMLString:options:error:" signature="- (instancetype)initWithXMLString:(NSString) options:(NSXMLNodeOptions) error:(NSError)" >
        <sink paramNames="initWithXMLString" kind="xml_injection" resource="other" />
      </constructor>
      <method name="addChild:" signature="- (void)addChild:(NSXMLNode *)child" >
        <sink paramNames="addChild" kind="xml_injection" resource="other" />
      </method>
      <method name="insertChild:atIndex:" signature="- (void)insertChild:(NSXMLNode) atIndex:(NSUInteger)" >
        <sink paramNames="insertChild" kind="xml_injection" resource="other" />
      </method>
      <method name="insertChildren:atIndex:" signature="- (void)insertChildren:(NSArray) atIndex:(NSUInteger)index" >
        <sink paramNames="insertChildren" kind="xml_injection" resource="other" />
      </method>
      <method name="replaceChild:atIndex:" signature="- (void)replaceChild:(NSXMLNode) atIndex:(NSUInteger)index" >
        <sink paramNames="replaceChild" kind="xml_injection" resource="other" />
      </method>
      <method name="setChildren:" signature="- (void)setChildren:(NSArray)" >
        <sink paramNames="setChildren" kind="xml_injection" resource="other" />
      </method>
    </class>

    <class name="NSXMLElement" supertypes="NSXMLNode">
      <description>Represents a xml element.</description>
      <constructor name="initWithName:" signature="- (instancetype)initWithName:(NSString)" >
        <sink paramNames="initWithName" kind="xml_injection" resource="other" />
      </constructor>
      <constructor name="initWithName:stringValue:" signature="- (instancetype)initWithName:(NSString *) stringValue:(NSString *)" >
        <sink paramNames="initWithName" kind="xml_injection" resource="other" />
      </constructor>
      <constructor name="initWithXMLString:error:" signature="- (instancetype)initWithXMLString:(NSURL) error:(NSError)" >
        <sink paramNames="initWithXMLString" kind="xml_injection" resource="other" />
      </constructor>
      <constructor name="initWithName:URI:" signature="- (instancetype)initWithName:(NSString) URI:(NSString)URI;" >
        <sink paramNames="initWithName" kind="xml_injection" resource="other" />
      </constructor>
      <method name="addChild:" signature="- (void)addChild:(NSXMLNode *)child" >
        <sink paramNames="addChild" kind="xml_injection" resource="other" />
      </method>
      <method name="insertChild:atIndex:" signature="- (void)insertChild:(NSXMLNode) atIndex:(NSUInteger)" >
        <sink paramNames="insertChild" kind="xml_injection" resource="other" />
      </method>
      <method name="insertChildren:atIndex:" signature="- (void)insertChildren:(NSArray) atIndex:(NSUInteger)index" >
        <sink paramNames="insertChildren" kind="xml_injection" resource="other" />
      </method>
      <method name="replaceChild:atIndex:" signature="- (void)replaceChild:(NSXMLNode) atIndex:(NSUInteger)index" >
        <sink paramNames="replaceChild" kind="xml_injection" resource="other" />
      </method>
      <method name="setChildren:" signature="- (void)setChildren:(NSArray)" >
        <sink paramNames="setChildren" kind="xml_injection" resource="other" />
      </method>
    </class>

    <class name="NSIndexSet" supertypes="NSObject">
      <description>Represents an immutable collection of unique unsigned integers.</description>
      <tags>Collection: true</tags>
    </class>

    <class name="NSMutableIndexSet" supertypes="NSIndexSet">
      <description>Represents a mutable collection of unique unsigned integers.</description>
      <tags>Collection: true</tags>
    </class>

    <class name="UIControl" supertypes="UIView">
      <description>Implements common behavior for visual elements that convey a specific action or intention in response to user interactions.</description>
      <field name="frame" type="CGRect"></field>
    </class>

    <class name="UIButton" supertypes="UIControl">
      <description>Is a view that executes your custom code in response to user interactions.</description>
      <field name="frame" type="CGRect"></field>
    </class>

    <class name="PKAddPassButton" supertypes="UIButton">
      <description>Provides a button that is used to add passes to Wallet.</description>
      <field name="frame" type="CGRect"></field>
    </class>

    <class name="PKPaymentButton" supertypes="UIButton">
      <description>Provides a button that is used either to trigger payments through Apple Pay or to prompt the user to set up a card.</description>
      <field name="frame" type="CGRect"></field>
    </class>

    <class name="UIDatePicker" supertypes="UIControl">
      <description>Implements an object that uses multiple rotating wheels to allow users to select dates and times.</description>
      <field name="frame" type="CGRect"></field>
    </class>

    <class name="UIPageControl" supertypes="UIControl">
      <description>Create and manage page controls.</description>
      <field name="frame" type="CGRect"></field>
    </class>

    <class name="UIRefreshControl" supertypes="UIControl">
      <description>Provides a standard control that can be used to initiate the refreshing of a table view’s contents.</description>
      <field name="frame" type="CGRect"></field>
    </class>

    <class name="UISegmentedControl" supertypes="UIControl">
      <description>A horizontal control made of multiple segments, each segment functioning as a discrete button.</description>
      <field name="frame" type="CGRect"></field>
    </class>

    <class name="UISlider" supertypes="UIControl">
      <description>A visual control used to select a single value from a continuous range of values.</description>
      <field name="frame" type="CGRect"></field>
    </class>

    <class name="UIStepper" supertypes="UIControl">
      <description>Provides a user interface for incrementing or decrementing a value.</description>
      <field name="frame" type="CGRect"></field>
    </class>

    <class name="UISwitch" supertypes="UIControl">
      <description>Used to create and manage the On/Off buttons used</description>
      <field name="frame" type="CGRect"></field>
    </class>

    <class name="UITextField" supertypes="UIControl">
      <description>Displays an editable text area in your interface.</description>
      <field name="text" type="NSString">
        <source argpos="-1" kind="user_input"/>
      </field>
      <field name="frame" type="CGRect"></field>
    </class>

    <class name="NSControl" supertypes="NSObject">
      <description>Base class for user interface controls</description>
      <field name="frame" type="NSRect"></field>
      <function name="stringValue" signature="-(NSString *)stringValue">
        <return type="NSString*"/>
        <source argpos="-1" kind="user_input"/>
      </function>
      <function name="attributedStringValue" signature="-(NSAttributedString *)attributedStringValue">
        <return type="NSAttributedString*"/>
        <source argpos="-1" kind="user_input"/>
      </function>
      <function name="integerValue" signature="-(NSInteger)integerValue">
        <return type="NSInteger"/>
        <source argpos="-1" kind="user_input"/>
      </function>
      <function name="doubleValue" signature="-(double)doubleValue">
        <return type="double"/>
        <source argpos="-1" kind="user_input"/>
      </function>
      <function name="floatValue" signature="-(float)floatValue">
        <return type="float"/>
        <source argpos="-1" kind="user_input"/>
      </function>
      <function name="objectValue" signature="-(id)objectValue">
        <return type="id"/>
        <source argpos="-1" kind="user_input"/>
      </function>
    </class>

    <class name="NSBrowser" supertypes="NSControl">
      <description>Provides a user interface for displaying and selecting items from a list of data or from hierarchically organized lists of data such as directory paths.</description>
      <field name="frame" type="NSRect"></field>
    </class>

    <class name="NSButton" supertypes="NSControl">
      <description>Sends an action message to a target object, such as a view controller, when the button is clicked.</description>
      <field name="frame" type="NSRect"></field>
    </class>

    <class name="NSColorWell" supertypes="NSControl">
      <description>An NSControl for selecting and displaying a single color value.</description>
      <field name="frame" type="NSRect"></field>
    </class>

    <class name="NSDatePicker" supertypes="NSControl">
      <description>Provides a user interface for displaying and editing an NSDate object.</description>
      <field name="frame" type="NSRect"></field>
    </class>

    <class name="NSImageView" supertypes="NSControl">
      <description>Displays image data from an NSImage object in a frame.</description>
      <field name="frame" type="NSRect"></field>
    </class>

    <class name="NSLevelIndicator" supertypes="NSControl">
      <description>Displays a value on a linear scale..</description>
      <field name="frame" type="NSRect"></field>
    </class>

    <class name="NSImageView" supertypes="NSControl">
      <description>Displays image data from an NSImage object in a frame.</description>
      <field name="frame" type="NSRect"></field>
    </class>

    <class name="NSMatrix" supertypes="NSControl">
      <description>Matrix input control</description>
      <field name="frame" type="NSRect"></field>
    </class>

    <class name="NSPathControl" supertypes="NSControl">
      <description>Represents a file system path or virtual path..</description>
      <field name="frame" type="NSRect"></field>
    </class>

    <class name="NSRuleEditor" supertypes="NSControl">
      <description>A view that allows the user to visually create and configure a list of options which are expressed by the rule editor as a predicate.</description>
      <field name="frame" type="NSRect"></field>
    </class>

    <class name="NSTextField" supertypes="NSControl">
      <description>Input text field.</description>
      <field name="frame" type="NSRect"></field>
    </class>

    <class name="NSComboBox" supertypes="NSTextField">
      <description>Combo box (could be editable...).</description>
      <field name="frame" type="NSRect"></field>
    </class>

    <class name="NSSecureTextField" supertypes="NSTextField">
      <description>Password input text field.</description>
      <field name="frame" type="NSRect"></field>
    </class>

    <class name="NSSearchField" supertypes="NSTextField">
      <description>Search input field.</description>
      <field name="frame" type="NSRect"></field>
    </class>

    <class name="NSCoder" supertypes="NSObject">
      <method name="encodeArrayOfObjCType:count:at:" signature="- (void)encodeArrayOfObjCType:(const char *) count:(NSUInteger) at:(const void *)">
        <sink paramNames="encodeArrayOfObjCType" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeBool:forKey:" signature="- (void)encodeBool:(BOOL) forKey:(NSString)">
        <sink paramNames="encodeBool" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeBycopyObject:" signature="- (void)encodeBycopyObject:">
        <sink paramNames="encodeBycopyObject" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeByrefObject:" signature="- (void)encodeByrefObject:" >
        <sink paramNames="encodeByrefObject" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeBytes:length:" signature="- (void)encodeBytes:length:" >
        <sink paramNames="encodeBytes" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeBytes:length:forKey:" signature="- (void)encodeBytes:length:forKey:" >
        <sink paramNames="encodeBytes" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeConditionalObject:" signature="- (void)encodeConditionalObject:" >
        <sink paramNames="encodeConditionalObject" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeConditionalObject:forKey:" signature="- (void)encodeConditionalObject:forKey:" >
        <sink paramNames="encodeConditionalObject" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeDataObject:" signature="- (void)encodeDataObject:" >
        <sink paramNames="encodeDataObject" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeDouble:forKey:" signature="- (void)encodeDouble:forKey:" >
        <sink paramNames="encodeDouble" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeFloat:forKey:" signature="- (void)encodeFloat:forKey:" >
        <sink paramNames="encodeFloat" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeInteger:forKey:" signature="- (void)encodeInt:forKey:" >
        <sink paramNames="encodeInteger" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeInteger:forKey:" signature="- (void)encodeInteger:forKey:" >
        <sink paramNames="encodeInteger" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeInt32:forKey:" signature="- (void)encodeInt32:forKey:" >
        <sink paramNames="encodeInt32" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeInt64:forKey:" signature="- (void)encodeInt64:forKey:" >
        <sink paramNames="encodeInt64" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeNXObject:" signature="- (void)encodeNXObject:" >
        <sink paramNames="encodeNXObject" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeObject:" signature="- (void)encodeObject:" >
        <sink paramNames="encodeObject" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeObject:forKey:" signature="- (void)encodeObject:forKey:" >
        <sink paramNames="encodeObject" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodePoint:" signature="- (void)encodePoint:" >
        <sink paramNames="encodePoint" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodePoint:forKey:" signature="- (void)encodePoint:forKey:" >
        <sink paramNames="encodePoint" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodePropertyList:" signature="- (void)encodePropertyList:" >
        <sink paramNames="encodePropertyList" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeRect:" signature="- (void)encodeRect:" >
        <sink paramNames="encodeRect" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeRect:forKey:" signature="- (void)encodeRect:forKey:" >
        <sink paramNames="encodeRect" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeRootObject:" signature="- (void)encodeRootObject:" >
        <sink paramNames="encodeRootObject" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeSize:" signature="- (void)encodeSize:" >
        <sink paramNames="encodeSize" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeSize:forKey:" signature="- (void)encodeSize:forKey::" >
        <sink paramNames="encodeSize" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeValueOfObjCType:at:" signature="- (void)encodeValueOfObjCType:at:" >
        <sink paramNames="encodeValueOfObjCType" kind="serialization_injection" resource="other" />
      </method>
      <method name="encodeValuesOfObjCTypes:" signature="- (void)encodeValuesOfObjCTypes:" >
        <sink paramNames="encodeValuesOfObjCTypes" kind="serialization_injection" resource="other" />
      </method>
    </class>

    <class name="NSUserDefaults">
      <method name="standardUserDefaults" signature="standardUserDefaults" >
        <return type="NSUserDefaults" />
      </method>

      <method name="objectForKey" signature="" >
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </method>
      <method name="URLForKey" signature="" >
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </method>
      <method name="URLForKey" signature="" >
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </method>
      <method name="arrayForKey" signature="" >
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </method>
      <method name="dictionaryForKey" signature="" >
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </method>
      <method name="stringForKey" signature="" >
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </method>
      <method name="stringArrayForKey" signature="" >
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </method>
      <method name="dataForKey" signature="" >
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </method>
      <method name="integerForKey" signature="" >
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </method>
      <method name="floatForKey" signature="" >
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </method>
      <method name="doubleForKey" signature="" >
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </method>
      <method name="doubleForKey" signature="" >
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </method>
      <method name="dictionaryRepresentation" signature="" >
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </method>

      <method name="setObject:forKey:" signature="" >
        <sink paramNames="setObject,forKey" kind="privacy_violation" resource="filesystem" />
        <sink paramNames="setObject,forKey" kind="sensitive_file_disclosure" resource="filesystem" />
      </method>
    </class>

    <class name="LAContext" >
      <method name="evaluatePolicy:localizedReason:reply:" signature="-(void)evaluatePolicy:(LAPolicy)localizedReason:(NSString *)reply:(void)" />
    </class>

    <!-- global objects -->
    <function name="NSSearchPathForDirectoriesInDomains" signature="NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, BOOL)" >
      <source argpos="-1" kind="other_input" resource="filesystem"><tags>document_dir</tags></source>
    </function>

    <class name="UIDevice" supertypes="NSObject">
      <field name="currentDevice" type="UIDevice" />
      <field name="name" type="NSString">
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </field>
      <field name="systemName" type="NSString">
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </field>
      <field name="systemVersion" type="NSString">
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </field>
    </class>

    <class name="CTMessageCenter">
      <field name="sharedMessageCenter" type="CTMessageCenter" />
      <method name="sendSMSWithText:serviceCenter:toAddress:" signature="" />
    </class>

    <class name="SecTrust" />

    <function name="SecTrustEvaluate" signature="SecTrustEvaluate(_:_:)" />

    <class name="NSURLCache">
      <field name="shared" type="NSURLCache" />

      <method name="removeCachedResponseForRequest:" signature="removeCachedResponseForRequest:" >
        <tags>cache_cleared</tags>
      </method>
      <method name="removeCachedResponseForDataTask" signature="removeCachedResponseForDataTask:" >
        <tags>cache_cleared</tags>
      </method>
      <method name="removeCachedResponsesSinceDate" signature="removeCachedResponsesSinceDate:" >
        <tags>cache_cleared</tags>
      </method>
      <method name="removeAllCachedResponses:" signature="removeAllCachedResponses:" >
        <tags>cache_cleared</tags>
      </method>
    </class>

    <class name="NSFileHandle">
      <method name="fileHandleWithStandardInput" signature="fileHandleWithStandardInput" >
        <source argpos="-1" kind="user_input" resource="environment" />
      </method>
    </class>

    <class name="UIPasteboard">
      <field name="generalPasteboard" type="UIPasteboard" />

      <field name="items" type="NSArray" >
        <tags>pasteboard_caching_neutralizer: true</tags>
      </field>
    </class>

    <class name="SecTrustRef"/>

    <class name="NSURLProtectionSpace">
      <field name="serverTrust" type="SecTrustRef" />
    </class>

    <class name="NSURLAuthenticationChallenge">
      <field name="protectionSpace" type="NSURLProtectionSpace" />
    </class>

    <class name="NSTask">
      <field name="arguments" type="NString" />
      <field name="launchPath" type="NString" />

      <method name="launch" signature="launch" >
        <sink argpos="-2" kind="command_injection" resource="os" />
      </method>
    </class>

    <class name="NSHTTPCookie">
      <constructor name="cookieWithProperties:" signature="+ (NSHTTPCookie *)cookieWithProperties:(NSDictionary)" >
        <sink paramNames="cookieWithProperties" kind="cookie_plaintext_storage" resource="network" />
      </constructor>
      <constructor name="initWithProperties:" signature="- (instancetype)initWithProperties:(NSDictionary)" >
        <sink paramNames="initWithProperties" kind="cookie_plaintext_storage" resource="network" />
      </constructor>
      <constructor name="cookiesWithResponseHeaderFields:" signature="+ (NSArray)cookiesWithResponseHeaderFields:(NSDictionary) forURL:(NSURL)" >
        <sink paramNames="cookiesWithResponseHeaderFields" kind="cookie_plaintext_storage" resource="network" />
      </constructor>
    </class>

    <class name="NSHTTPCookiePropertyKey" kind="struct">
      <field name="discard" type="NSString"/>
      <field name="domain" type="NSString"/>
      <field name="path" type="NSString"/>
      <field name="value" type="NSString"/>
      <field name="name" type="NSString"/>
      <field name="secure" type="NSString"/>
      <field name="maximumAge" type="NSString"/>
    </class>

    <class name="NSHTTPCookieStorage">
      <field name="shared" type="NSHTTPCookieStorage"/>

      <method name="setCookie" signature="setCookie(NSHTTPCookie)" >
        <return type="Void" />
        <propagate from="0" to="-1"/>
      </method>
    </class>

    <class name="MFMailComposeViewController">
      <method name="setSubject:" signature="- (void)setSubject:(NSString)" >
        <sink paramNames="setSubject" kind="mail_command_injection" />
      </method>
      <method name="setToRecipients:" signature="- (void)setToRecipients:(NSArray)" >
        <sink paramNames="setToRecipients" kind="mail_command_injection" />
      </method>
      <method name="setCcRecipients:" signature="- (void)setCcRecipients:(NSArray)" >
        <sink paramNames="setCcRecipients" kind="mail_command_injection" />
      </method>
      <method name="setBccRecipients:" signature="- (void)setBccRecipients:(NSArray)" >
        <sink paramNames="setBccRecipients" kind="mail_command_injection" />
      </method>
      <method name="setMessageBody:isHTML:" signature="- (void)setMessageBody:(NSString) isHTML:(BOOL)" >
        <sink paramNames="setMessageBody" kind="mail_command_injection" />
      </method>
      <method name="addAttachmentData:mimeType:fileName:" signature="- (void)addAttachmentData:(NSData)attachment mimeType:(NSString) fileName:(NSString)" >
        <sink paramNames="addAttachmentData" kind="mail_command_injection" />
      </method>
    </class>
  </module>
</library>