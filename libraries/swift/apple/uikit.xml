<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.optimyth.com/schema/definitions/library_metadata"
         technology="swift" name="uikit" standard="swift">

  <description url="https://developer.apple.com/documentation/uikit">Construct and manage a graphical, event-driven user interface</description>

  <module name="UIKit">
    <function name="UIApplicationMain" signature="UIApplicationMain(Int32, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;Int8&gt;&gt;!, String?, String?)">
      <return type="Int32"/>
    </function>

    <function name="UIGuidedAccessRestrictionStateForIdentifier" signature="func UIGuidedAccessRestrictionStateForIdentifier(String)">
      <return type="UIGuidedAccessRestrictionState"/>
    </function>

    <function name="UIInterfaceOrientationIsLandscape" signature="UIInterfaceOrientationIsPortrait(UIInterfaceOrientation)">
      <return type="Bool" />
    </function>

    <function name="UIInterfaceOrientationIsPortrait" signature="UIInterfaceOrientationIsLandscape(UIInterfaceOrientation)">
      <return type="Bool" />
    </function>


    <class name="UIApplication" supertypes="UIResponder">
      <field name="UIApplicationBackgroundRefreshStatusDidChange" type="NSNotification.Name"/>
      <field name="UIApplicationDidBecomeActive" type="NSNotification.Name"/>
      <field name="UIApplicationDidChangeStatusBarFrame" type="NSNotification.Name"/>
      <field name="UIApplicationDidChangeStatusBarOrientation" type="NSNotification.Name"/>
      <field name="UIApplicationDidEnterBackground" type="NSNotification.Name"/>
      <field name="UIApplicationDidFinishLaunching" type="NSNotification.Name"/>
      <field name="UIApplicationDidReceiveMemoryWarning" type="NSNotification.Name"/>
      <field name="UIApplicationInvalidInterfaceOrientationException" type="NSExceptionName"/>
      <field name="UIApplicationProtectedDataDidBecomeAvailable" type="NSNotification.Name"/>
      <field name="UIApplicationProtectedDataWillBecomeUnavailable" type="NSNotification.Name"/>
      <field name="UIApplicationSignificantTimeChange" type="NSNotification.Name"/>
      <field name="UIApplicationUserDidTakeScreenshot" type="NSNotification.Name"/>
      <field name="UIApplicationWillChangeStatusBarFrame" type="NSNotification.Name"/>
      <field name="UIApplicationWillChangeStatusBarOrientation" type="NSNotification.Name"/>
      <field name="UIApplicationWillEnterForeground" type="NSNotification.Name"/>
      <field name="UIApplicationWillResignActive" type="NSNotification.Name"/>
      <field name="UIApplicationWillTerminate" type="NSNotification.Name"/>
      <field name="UIContentSizeCategoryDidChange" type="NSNotification.Name"/>
      <field name="UITrackingRunLoopMode" type="RunLoopMode"/>
      <field name="accessibilityExtraExtraExtraLarge" type="UIContentSizeCategory"/>
      <field name="accessibilityExtraExtraLarge" type="UIContentSizeCategory"/>
      <field name="accessibilityExtraLarge" type="UIContentSizeCategory"/>
      <field name="accessibilityLarge" type="UIContentSizeCategory"/>
      <field name="accessibilityMedium" type="UIContentSizeCategory"/>
      <field name="alternateIconName" type="String?"/>
      <field name="applicationIconBadgeNumber" type="Int"/>
      <field name="applicationState" type="UIApplicationState"/>
      <field name="applicationSupportsShakeToEdit" type="Bool"/>
      <field name="backgroundRefreshStatus" type="UIBackgroundRefreshStatus"/>
      <field name="backgroundTimeRemaining" type="TimeInterval"/>
      <method name="beginBackgroundTask" signature="beginBackgroundTask(withName: String?, expirationHandler: (() -&gt; Void)? = nil)">
        <parameters>
          <param name="withName" type="String?"/>
          <param name="expirationHandler" type="(() -&gt; Void)? = nil"/>
        </parameters>
        <return type="UIBackgroundTaskIdentifier"/>
      </method>
      <method name="beginBackgroundTask" signature="beginBackgroundTask(expirationHandler: (() -&gt; Void)? = nil)">
        <parameters>
          <param name="expirationHandler" type="(() -&gt; Void)? = nil"/>
        </parameters>
        <return type="UIBackgroundTaskIdentifier"/>
      </method>
      <method name="beginIgnoringInteractionEvents" signature="beginIgnoringInteractionEvents()"/>
      <method name="beginReceivingRemoteControlEvents" signature="beginReceivingRemoteControlEvents()"/>
      <method name="canOpenURL" signature="canOpenURL(URL)">
        <parameters>
          <param name="" type="URL"/>
        </parameters>
        <return type="Bool"/>
      </method>
      <method name="cancelAllLocalNotifications" signature="cancelAllLocalNotifications()"/>
      <method name="cancelLocalNotification" signature="cancelLocalNotification(UILocalNotification)">
        <parameters>
          <param name="" type="UILocalNotification"/>
        </parameters>
      </method>
      <method name="clearKeepAliveTimeout" signature="clearKeepAliveTimeout()"/>
      <method name="completeStateRestoration" signature="completeStateRestoration()"/>
      <field name="currentUserNotificationSettings" type="UIUserNotificationSettings?"/>
      <field name="delegate" type="UIKit.UIApplicationDelegate?"/>
      <method name="enabledRemoteNotificationTypes" signature="enabledRemoteNotificationTypes()">
        <return type="UIRemoteNotificationType"/>
      </method>
      <method name="endBackgroundTask" signature="endBackgroundTask(UIBackgroundTaskIdentifier)">
        <parameters>
          <param name="" type="UIBackgroundTaskIdentifier"/>
        </parameters>
      </method>
      <method name="endIgnoringInteractionEvents" signature="endIgnoringInteractionEvents()"/>
      <method name="endReceivingRemoteControlEvents" signature="endReceivingRemoteControlEvents()"/>
      <method name="extendStateRestoration" signature="extendStateRestoration()"/>
      <field name="extraExtraExtraLarge" type="UIContentSizeCategory"/>
      <field name="extraExtraLarge" type="UIContentSizeCategory"/>
      <field name="extraLarge" type="UIContentSizeCategory"/>
      <field name="extraSmall" type="UIContentSizeCategory"/>
      <method name="ignoreSnapshotOnNextApplicationLaunch" signature="ignoreSnapshotOnNextApplicationLaunch()"/>
      <field name="isIdleTimerDisabled" type="Bool"/>
      <field name="isIgnoringInteractionEvents" type="Bool"/>
      <field name="isNetworkActivityIndicatorVisible" type="Bool"/>
      <field name="isProtectedDataAvailable" type="Bool"/>
      <field name="isRegisteredForRemoteNotifications" type="Bool"/>
      <field name="isStatusBarHidden" type="Bool"/>
      <field name="keyWindow" type="UIWindow?"/>
      <field name="keyboard" type="UIApplicationExtensionPointIdentifier"/>
      <field name="large" type="UIContentSizeCategory"/>
      <field name="medium" type="UIContentSizeCategory"/>
      <method name="open" signature="open(URL, options: [String : Any] = [:], completionHandler: ((Bool) -&gt; Void)? = nil)">
        <parameters>
          <param type="URL"/>
          <param name="options" type="options"/>
          <param name="completionHandler" type="((Bool) -&gt; Void)? = nil"/>
        </parameters>
        <sink argpos="0" kind="url_scheme_hijacking" />
      </method>
      <method name="openURL" signature="openURL(URL)">
        <parameters>
          <param type="URL"/>
        </parameters>
        <return type="Bool"/>
        <sink argpos="0" kind="url_scheme_hijacking" />
      </method>
      <field name="preferredContentSizeCategory" type="UIContentSizeCategory"/>
      <method name="presentLocalNotificationNow" signature="presentLocalNotificationNow(UILocalNotification)">
        <parameters>
          <param name="" type="UILocalNotification"/>
        </parameters>
      </method>
      <method name="registerForRemoteNotifications" signature="registerForRemoteNotifications()"/>
      <method name="registerForRemoteNotifications" signature="registerForRemoteNotifications(matching: UIRemoteNotificationType)">
        <parameters>
          <param name="matching" type="UIRemoteNotificationType"/>
        </parameters>
      </method>
      <method name="registerObject" signature="registerObject(forStateRestoration: UIStateRestoring, restorationIdentifier: String)">
        <parameters>
          <param name="forStateRestoration" type="UIStateRestoring"/>
          <param name="restorationIdentifier" type="String"/>
        </parameters>
      </method>
      <method name="registerUserNotificationSettings" signature="registerUserNotificationSettings(UIUserNotificationSettings)">
        <parameters>
          <param name="" type="UIUserNotificationSettings"/>
        </parameters>
      </method>
      <method name="scheduleLocalNotification" signature="scheduleLocalNotification(UILocalNotification)">
        <parameters>
          <param name="" type="UILocalNotification"/>
        </parameters>
      </method>
      <field name="scheduledLocalNotifications" type="[UILocalNotification]?"/>
      <method name="sendAction" signature="sendAction(Selector, to: Any?, from: Any?, for: UIEvent?)">
        <parameters>
          <param name="" type="Selector"/>
          <param name="to" type="Any?"/>
          <param name="from" type="Any?"/>
          <param name="for" type="UIEvent?"/>
        </parameters>
        <return type="Bool"/>
      </method>
      <method name="sendEvent" signature="sendEvent(UIEvent)">
        <parameters>
          <param name="" type="UIEvent"/>
        </parameters>
      </method>
      <method name="setAlternateIconName" signature="setAlternateIconName(String?, completionHandler: ((Error?) -&gt; Void)? = nil)">
        <parameters>
          <param name="" type="String?"/>
          <param name="completionHandler" type="((Error?) -&gt; Void)? = nil"/>
        </parameters>
      </method>
      <method name="setKeepAliveTimeout" signature="setKeepAliveTimeout(TimeInterval, handler: (() -&gt; Void)? = nil)">
        <parameters>
          <param name="" type="TimeInterval"/>
          <param name="handler" type="(() -&gt; Void)? = nil"/>
        </parameters>
        <return type="Bool"/>
      </method>
      <method name="setMinimumBackgroundFetchInterval" signature="setMinimumBackgroundFetchInterval(TimeInterval)">
        <parameters>
          <param name="" type="TimeInterval"/>
        </parameters>
      </method>
      <method name="setNewsstandIconImage" signature="setNewsstandIconImage(UIImage?)">
        <parameters>
          <param name="" type="UIImage?"/>
        </parameters>
      </method>
      <method name="setStatusBarHidden" signature="setStatusBarHidden(Bool, with: UIStatusBarAnimation)">
        <parameters>
          <param name="" type="Bool"/>
          <param name="with" type="UIStatusBarAnimation"/>
        </parameters>
      </method>
      <method name="setStatusBarOrientation" signature="setStatusBarOrientation(UIInterfaceOrientation, animated: Bool)">
        <parameters>
          <param name="" type="UIInterfaceOrientation"/>
          <param name="animated" type="Bool"/>
        </parameters>
      </method>
      <method name="setStatusBarStyle" signature="setStatusBarStyle(UIStatusBarStyle, animated: Bool)">
        <parameters>
          <param name="" type="UIStatusBarStyle"/>
          <param name="animated" type="Bool"/>
        </parameters>
      </method>
      <field name="shared" type="UIKit.UIApplication"/>
      <field name="shortcutItems" type="[UIApplicationShortcutItem]?"/>
      <field name="small" type="UIContentSizeCategory"/>
      <field name="statusBarFrame" type="CGRect"/>
      <field name="statusBarOrientation" type="UIInterfaceOrientation"/>
      <field name="statusBarOrientationAnimationDuration" type="TimeInterval"/>
      <field name="statusBarStyle" type="UIStatusBarStyle"/>
      <method name="supportedInterfaceOrientations" signature="supportedInterfaceOrientations(for: UIWindow?)">
        <parameters>
          <param name="for" type="UIWindow?"/>
        </parameters>
        <return type="UIInterfaceOrientationMask"/>
      </method>
      <field name="supportsAlternateIcons" type="Bool"/>
      <method name="unregisterForRemoteNotifications" signature="unregisterForRemoteNotifications()"/>
      <field name="userInterfaceLayoutDirection" type="UIUserInterfaceLayoutDirection"/>
      <field name="windows" type="[UIWindow]"/>
    </class>

    <class kind="protocol" name="UIApplicationDelegate" supertypes="NSObjectProtocol">
      <method name="application" signature="application(UIApplication, willFinishLaunchingWithOptions: [UIApplicationLaunchOptionsKey : Any]? = nil)">
        <return type="Bool"/>
      </method>
      <method name="application" signature="application(UIApplication, didFinishLaunchingWithOptions: [UIApplicationLaunchOptionsKey : Any]? = nil)">
        <return type="Bool"/>
      </method>
      <method name="applicationDidFinishLaunching" signature="applicationDidFinishLaunching(UIApplication)"/>
      <method name="applicationDidBecomeActive" signature="applicationDidBecomeActive(UIApplication)"/>
      <method name="applicationWillResignActive" signature="applicationWillResignActive(UIApplication)"/>
      <method name="applicationDidEnterBackground" signature="applicationDidEnterBackground(UIApplication)"/>
      <method name="applicationWillEnterForeground" signature="applicationWillEnterForeground(UIApplication)"/>
      <method name="applicationWillTerminate" signature="applicationWillTerminate(UIApplication)"/>
      <method name="applicationProtectedDataWillBecomeUnavailable" signature="applicationProtectedDataWillBecomeUnavailable(UIApplication)"/>
      <method name="applicationProtectedDataDidBecomeAvailable" signature="applicationProtectedDataDidBecomeAvailable(UIApplication)"/>
      <method name="applicationDidReceiveMemoryWarning" signature="applicationDidReceiveMemoryWarning(UIApplication)"/>
      <method name="applicationSignificantTimeChange" signature="applicationSignificantTimeChange(UIApplication)"/>
      <method name="application" signature="application(UIApplication, shouldSaveApplicationState: NSCoder)">
        <return type="Bool"/>
      </method>
      <method name="application" signature="application(UIApplication, shouldRestoreApplicationState: NSCoder)">
        <return type="Bool"/>
      </method>
      <method name="application" signature="application(UIApplication, viewControllerWithRestorationIdentifierPath: [Any], coder: NSCoder)">
        <return type="UIViewController?"/>
      </method>
      <method name="application" signature="application(UIApplication, willEncodeRestorableStateWith: NSCoder)"/>
      <method name="application" signature="application(UIApplication, didDecodeRestorableStateWith: NSCoder)"/>
      <method name="application" signature="application(UIApplication, performFetchWithCompletionHandler: (UIBackgroundFetchResult) -&gt; Void)"/>
      <method name="application" signature="application(UIApplication, handleEventsForBackgroundURLSession: String, completionHandler: () -&gt; Void)"/>
      <method name="application" signature="application(UIApplication, didRegisterForRemoteNotificationsWithDeviceToken: Data)"/>
      <method name="application" signature="application(UIApplication, didFailToRegisterForRemoteNotificationsWithError: Error)"/>
      <method name="application" signature="application(UIApplication, didReceiveRemoteNotification: [AnyHashable : Any], fetchCompletionHandler: (UIBackgroundFetchResult) -&gt; Void)"/>
      <method name="application" signature="application(UIApplication, willContinueUserActivityWithType: String)">
        <return type="Bool"/>
      </method>
      <method name="application" signature="application(UIApplication, continue: NSUserActivity, restorationHandler: ([Any]?) -&gt; Void)">
        <return type="Bool"/>
      </method>
      <method name="application" signature="application(UIApplication, didUpdate: NSUserActivity)"/>
      <method name="application" signature="application(UIApplication, didFailToContinueUserActivityWithType: String, error: Error)"/>
      <method name="application" signature="application(UIApplication, performActionFor: UIApplicationShortcutItem, completionHandler: (Bool) -&gt; Void)"/>
      <method name="application" signature="application(UIApplication, handleWatchKitExtensionRequest: [AnyHashable : Any]?, reply: ([AnyHashable : Any]?) -&gt; Void)"/>
      <method name="applicationShouldRequestHealthAuthorization" signature="applicationShouldRequestHealthAuthorization(UIApplication)"/>
      <method name="application" signature="application(UIApplication, shouldAllowExtensionPointIdentifier: UIApplicationExtensionPointIdentifier)">
        <return type="Bool"/>
      </method>
      <method name="application" signature="application(UIApplication, handle: INIntent, completionHandler: (INIntentResponse) -&gt; Void)"/>
      <method name="application" signature="application(UIApplication, userDidAcceptCloudKitShareWith: CKShareMetadata)"/>
      <method name="application" signature="application(UIApplication, supportedInterfaceOrientationsFor: UIWindow?)">
        <return type="UIInterfaceOrientationMask"/>
      </method>
      <method name="application" signature="application(UIApplication, willChangeStatusBarOrientation: UIInterfaceOrientation, duration: TimeInterval)"/>
      <method name="application" signature="application(UIApplication, didChangeStatusBarOrientation: UIInterfaceOrientation)"/>
      <method name="application" signature="application(UIApplication, willChangeStatusBarFrame: CGRect)"/>
      <method name="application" signature="application(UIApplication, didChangeStatusBarFrame: CGRect)"/>
      <field name="window" type="UIWindow?"/>
      <method name="application" signature="application(UIApplication, didRegister: UIUserNotificationSettings)"/>
      <method name="application" signature="application(UIApplication, didReceive: UILocalNotification)"/>
      <method name="application" signature="application(UIApplication, didReceiveRemoteNotification: [AnyHashable : Any])"/>
      <method name="application" signature="application(UIApplication, handleActionWithIdentifier: String?, for: UILocalNotification, completionHandler: () -&gt; Void)"/>
      <method name="application" signature="application(UIApplication, handleActionWithIdentifier: String?, for: UILocalNotification, withResponseInfo: [AnyHashable : Any], completionHandler: () -&gt; Void)"/>
      <method name="application" signature="application(UIApplication, handleActionWithIdentifier: String?, forRemoteNotification: [AnyHashable : Any], completionHandler: () -&gt; Void)"/>
      <method name="application" signature="application(UIApplication, handleActionWithIdentifier: String?, forRemoteNotification: [AnyHashable : Any], withResponseInfo: [AnyHashable : Any], completionHandler: () -&gt; Void)"/>
      <method name="application" signature="application(UIApplication, handleOpen: URL)">
        <tags>source:handleOpen</tags>
        <parameters>
          <param type="UIKit.UIApplication" />
          <param type="Foundation.URL" name="handleOpen" />
        </parameters>
        <return type="Bool"/>
      </method>
      <method name="application" signature="application(UIApplication, open: URL, options: [UIApplicationOpenURLOptionsKey : Any] = [:])">
        <tags>source:open</tags>
        <parameters>
          <param type="UIKit.UIApplication" />
          <param type="Foundation.URL" name="open" />
          <param type="[UIApplicationOpenURLOptionsKey : Any]" name="options" />
        </parameters>
        <return type="Bool"/>
      </method>
      <method name="application" signature="application(UIApplication, open: URL, sourceApplication: String?, annotation: Any)">
        <tags>source:open</tags>
        <parameters>
          <param type="UIKit.UIApplication" />
          <param type="Foundation.URL" name="open" />
          <param type="String" name="sourceApplication" />
          <param type="Any" name="annotation" />
        </parameters>
        <return type="Bool"/>
      </method>

      <field name="bluetoothCentrals" type="UIApplicationLaunchOptionsKey"/>
      <field name="bluetoothPeripherals" type="UIApplicationLaunchOptionsKey"/>
      <field name="localNotification" type="UIApplicationLaunchOptionsKey"/>
      <field name="location" type="UIApplicationLaunchOptionsKey"/>
      <field name="newsstandDownloads" type="UIApplicationLaunchOptionsKey"/>
      <field name="remoteNotification" type="UIApplicationLaunchOptionsKey"/>
      <field name="shortcutItem" type="UIApplicationLaunchOptionsKey"/>
      <field name="sourceApplication" type="UIApplicationLaunchOptionsKey"/>
      <field name="url" type="UIApplicationLaunchOptionsKey"/>
      <field name="userActivityDictionary" type="UIApplicationLaunchOptionsKey"/>
      <field name="userActivityType" type="UIApplicationLaunchOptionsKey"/>
      <field name="window" type="UIKit.UIWindow?"/>
    </class>

    <class name="UIDevice" supertypes="NSObject">
      <field name="isMultitaskingSupported" type="Bool"/>
      <field name="name" type="String">
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </field>
      <field name="systemName" type="String">
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </field>
      <field name="systemVersion" type="String">
        <source argpos="-1" kind="sensitive_info" resource="other" />
      </field>
      <field name="model" type="String"/>
      <field name="localizedModel" type="String"/>
      <field name="userInterfaceIdiom" type="UIUserInterfaceIdiom"/>
      <field name="identifierForVendor" type="UUID?"/>
      <field name="orientation" type="UIDeviceOrientation"/>
      <field name="isGeneratingDeviceOrientationNotifications" type="Bool"/>
      <method name="beginGeneratingDeviceOrientationNotifications" signature="beginGeneratingDeviceOrientationNotifications()"/>
      <method name="endGeneratingDeviceOrientationNotifications" signature="endGeneratingDeviceOrientationNotifications()"/>
      <field name="batteryLevel" type="Float"/>
      <field name="isBatteryMonitoringEnabled" type="Bool"/>
      <field name="batteryState" type="UIDeviceBatteryState"/>
      <field name="isProximityMonitoringEnabled" type="Bool"/>
      <field name="proximityState" type="Bool"/>
      <method name="playInputClick" signature="playInputClick()"/>
      <method name="UIDeviceOrientationIsPortrait" signature="UIDeviceOrientationIsPortrait(UIDeviceOrientation)">
        <return type="Bool"/>
      </method>
      <method name="UIDeviceOrientationIsPortrait" signature="UIDeviceOrientationIsPortrait(UIDeviceOrientation)"/>
      <method name="UIDeviceOrientationIsLandscape" signature="UIDeviceOrientationIsLandscape(UIDeviceOrientation)">
        <return type="Bool"/>
      </method>
      <method name="UIDeviceOrientationIsLandscape" signature="UIDeviceOrientationIsLandscape(UIDeviceOrientation)"/>
      <method name="UIDeviceOrientationIsValidInterfaceOrientation" signature="UIDeviceOrientationIsValidInterfaceOrientation(UIDeviceOrientation)"/>
      <method name="UI_USER_INTERFACE_IDIOM" signature="UI_USER_INTERFACE_IDIOM()">
        <return type="UIUserInterfaceIdiom"/>
      </method>
      <method name="currentDevice" signature="currentDevice()" >
        <return type="UIKit.UIDevice" />
      </method>
    </class>

    <class name="UITraitCollection" supertypes="NSObject">
      <constructor name="UITraitCollection" signature="UITraitCollection()"/>
      <constructor name="UITraitCollection" signature="UITraitCollection(traitsFrom: [UITraitCollection])"/>
      <constructor name="UITraitCollection" signature="UITraitCollection(userInterfaceIdiom: UIUserInterfaceIdiom)"/>
      <constructor name="UITraitCollection" signature="UITraitCollection(horizontalSizeClass: UIUserInterfaceSizeClass)"/>
      <constructor name="UITraitCollection" signature="UITraitCollection(verticalSizeClass: UIUserInterfaceSizeClass)"/>
      <constructor name="UITraitCollection" signature="UITraitCollection(forceTouchCapability: UIForceTouchCapability)"/>
      <constructor name="UITraitCollection" signature="UITraitCollection(displayScale: CGFloat)"/>
      <constructor name="UITraitCollection" signature="UITraitCollection(displayGamut: UIDisplayGamut)"/>
      <constructor name="UITraitCollection" signature="UITraitCollection(layoutDirection: UITraitEnvironmentLayoutDirection)"/>
      <constructor name="UITraitCollection" signature="UITraitCollection(preferredContentSizeCategory: UIContentSizeCategory)"/>
      <constructor name="UITraitCollection" signature="UITraitCollection(userInterfaceStyle: UIUserInterfaceStyle)"/>
      <constructor name="UITraitCollection" signature="UITraitCollection?(coder: NSCoder)"/>
      <field name="horizontalSizeClass" type="UIUserInterfaceSizeClass"/>
      <field name="verticalSizeClass" type="UIUserInterfaceSizeClass"/>
      <field name="displayScale" type="CGFloat"/>
      <field name="displayGamut" type="UIDisplayGamut"/>
      <field name="userInterfaceIdiom" type="UIUserInterfaceIdiom"/>
      <field name="forceTouchCapability" type="UIForceTouchCapability"/>
      <field name="layoutDirection" type="UITraitEnvironmentLayoutDirection"/>
      <field name="userInterfaceStyle" type="UIUserInterfaceStyle"/>
      <field name="preferredContentSizeCategory" type="UIContentSizeCategory"/>
      <method name="containsTraits" signature="containsTraits(in: UITraitCollection?)">
        <return type="Bool"/>
      </method>
    </class>

    <class kind="protocol" name="UITraitEnvironment" supertypes="NSObjectProtocol">
      <field name="traitCollection" type="UITraitCollection"/>
      <method name="traitCollectionDidChange" signature="traitCollectionDidChange(UITraitCollection?)"/>
    </class>

    <class kind="protocol" name="UIAdaptivePresentationControllerDelegate" supertypes="NSObjectProtocol">
      <method name="adaptivePresentationStyle" signature="adaptivePresentationStyle(for: UIPresentationController, traitCollection: UITraitCollection)">
        <return type="UIModalPresentationStyle"/>
      </method>
      <method name="adaptivePresentationStyle" signature="adaptivePresentationStyle(for: UIPresentationController)">
        <return type="UIModalPresentationStyle"/>
      </method>
      <method name="presentationController" signature="presentationController(UIPresentationController, viewControllerForAdaptivePresentationStyle: UIModalPresentationStyle)">
        <return type="UIViewController?"/>
      </method>
      <method name="presentationController" signature="presentationController(UIPresentationController, willPresentWithAdaptiveStyle: UIModalPresentationStyle, transitionCoordinator: UIViewControllerTransitionCoordinator?)"/>
    </class>

    <class name="UIDocument" supertypes="NSObject">
      <constructor name="UIDocument" signature="UIDocument(fileURL: URL)"/>
      <field name="fileURL" type="URL"/>
      <field name="localizedName" type="String"/>
      <field name="fileType" type="String?"/>
      <field name="fileModificationDate" type="Date?"/>
      <field name="documentState" type="UIDocumentState"/>
      <field name="progress" type="Progress?"/>
      <method name="close" signature="close(completionHandler: ((Bool) -&gt; Void)? = nil)"/>
      <method name="contents" signature="contents(forType: String)">
        <return type="Any"/>
      </method>
      <method name="save" signature="save(to: URL, for: UIDocumentSaveOperation, completionHandler: ((Bool) -&gt; Void)? = nil)"/>
      <method name="writeContents" signature="writeContents(Any, andAttributes: [AnyHashable : Any]? = nil, safelyTo: URL, for: UIDocumentSaveOperation)">
        <return type="Bool"/>
      </method>
      <method name="writeContents" signature="writeContents(Any, to: URL, for: UIDocumentSaveOperation, originalContentsURL: URL?)">
        <return type="Bool"/>
      </method>
      <field name="savingFileType" type="String?"/>
      <method name="fileAttributesToWrite" signature="fileAttributesToWrite(to: URL, for: UIDocumentSaveOperation)">
        <return type="[AnyHashable : Any]"/>
      </method>
      <method name="fileNameExtension" signature="fileNameExtension(forType: String?, saveOperation: UIDocumentSaveOperation)">
        <return type="String"/>
      </method>
      <method name="open" signature="open(completionHandler: ((Bool) -&gt; Void)? = nil)"/>
      <method name="load" signature="load(fromContents: Any, ofType: String?)">
        <return type="Bool"/>
      </method>
      <method name="read" signature="read(from: URL)">
        <return type="Bool"/>
      </method>
      <method name="performAsynchronousFileAccess" signature="performAsynchronousFileAccess(() -&gt; Void)"/>
      <method name="revert" signature="revert(toContentsOf: URL, completionHandler: ((Bool) -&gt; Void)? = nil)"/>
      <method name="disableEditing" signature="disableEditing()"/>
      <method name="enableEditing" signature="enableEditing()"/>
      <field name="hasUnsavedChanges" type="Bool"/>
      <method name="updateChangeCount" signature="updateChangeCount(UIDocumentChangeKind)"/>
      <field name="undoManager" type="UndoManager!"/>
      <method name="changeCountToken" signature="changeCountToken(for: UIDocumentSaveOperation)">
        <return type="Any"/>
      </method>
      <method name="updateChangeCount" signature="updateChangeCount(withToken: Any, for: UIDocumentSaveOperation)"/>
      <method name="autosave" signature="autosave(completionHandler: ((Bool) -&gt; Void)? = nil)"/>
      <field name="userActivity" type="NSUserActivity?"/>
      <method name="restoreUserActivityState" signature="restoreUserActivityState(NSUserActivity)"/>
      <method name="updateUserActivityState" signature="updateUserActivityState(NSUserActivity)"/>
      <method name="handleError" signature="handleError(Error, userInteractionPermitted: Bool)"/>
      <method name="finishedHandlingError" signature="finishedHandlingError(Error, recovered: Bool)"/>
      <method name="userInteractionNoLongerPermitted" signature="userInteractionNoLongerPermitted(forError: Error)"/>
    </class>

    <class name="UIManagedDocument" supertypes="UIDocument">
      <method name="configurePersistentStoreCoordinator" signature="configurePersistentStoreCoordinator(for: URL, ofType: String, modelConfiguration: String?, storeOptions: [AnyHashable : Any]? = nil)">
        <return type="Bool"/>
      </method>
      <field name="managedObjectContext" type="NSManagedObjectContext"/>
      <field name="managedObjectModel" type="NSManagedObjectModel"/>
      <field name="persistentStoreOptions" type="Any]?"/>
      <field name="modelConfiguration" type="String?"/>
      <method name="persistentStoreType" signature="persistentStoreType(forFileType: String)">
        <return type="String"/>
      </method>
      <method name="readAdditionalContent" signature="readAdditionalContent(from: URL)">
        <return type="Bool"/>
      </method>
      <method name="additionalContent" signature="additionalContent(for: URL)">
        <return type="Any"/>
      </method>
      <method name="writeAdditionalContent" signature="writeAdditionalContent(Any, to: URL, originalContentsURL: URL?)">
        <return type="Bool"/>
      </method>
    </class>

    <class name="UIPasteboard" supertypes="NSObject">
      <constructor name="UIPasteboard" signature="UIPasteboard?(name: UIPasteboardName, create: Bool)"/>
      <field name="name" type="UIPasteboardName"/>
      <field name="isPersistent" type="Bool"/>
      <field name="changeCount" type="Int"/>
      <field name="types" type="[String]"/>
      <method name="contains" signature="contains(pasteboardTypes: [String])">
        <return type="Bool"/>
      </method>
      <method name="data" signature="data(forPasteboardType: String)">
        <return type="Data?"/>
      </method>
      <method name="value" signature="value(forPasteboardType: String)">
        <return type="Any?"/>
      </method>
      <method name="setData" signature="setData(Data, forPasteboardType: String)"/>
      <method name="setValue" signature="setValue(Any, forPasteboardType: String)"/>
      <field name="numberOfItems" type="Int"/>
      <method name="types" signature="types(forItemSet: IndexSet?)">
        <return type="[[String]]?"/>
      </method>
      <method name="itemSet" signature="itemSet(withPasteboardTypes: [String])">
        <return type="IndexSet?"/>
      </method>
      <method name="contains" signature="contains(pasteboardTypes: [String], inItemSet: IndexSet?)">
        <return type="Bool"/>
      </method>
      <field name="items" type="Any"/>
      <method name="data" signature="data(forPasteboardType: String, inItemSet: IndexSet?)">
        <return type="[Any]?"/>
      </method>
      <method name="values" signature="values(forPasteboardType: String, inItemSet: IndexSet?)">
        <return type="[Any]?"/>
      </method>
      <method name="addItems" signature="addItems([[String : Any]])"/>
      <method name="setItems" signature="setItems([[String : Any]], options: [UIPasteboardOption : Any] = [:])"/>
      <field name="string" type="String?"/>
      <field name="strings" type="[String]?"/>
      <field name="image" type="UIImage?"/>
      <field name="images" type="[UIImage]?"/>
      <field name="url" type="URL?"/>
      <field name="urls" type="[URL]?"/>
      <field name="color" type="UIColor?"/>
      <field name="colors" type="[UIColor]?"/>
      <field name="hasColors" type="Bool"/>
      <field name="hasImages" type="Bool"/>
      <field name="hasStrings" type="Bool"/>
      <field name="hasURLs" type="Bool"/>
      <field name="itemProviders" type="[NSItemProvider]"/>
      <method name="setItemProviders" signature="setItemProviders([NSItemProvider], localOnly: Bool, expirationDate: Date?)"/>
      <method name="setObjects" signature="setObjects([NSItemProviderWriting])"/>
      <method name="setObjects" signature="setObjects&lt;T&gt;([T])"/>
      <method name="setObjects" signature="setObjects([NSItemProviderWriting], localOnly: Bool, expirationDate: Date?)"/>
      <method name="setObjects" signature="setObjects&lt;T&gt;([T], localOnly: Bool, expirationDate: Date?)"/>
      <method name="generalPasteboard" signature="generalPasteboard()" >
        <return type="UIKit.UIPasteboard" />
      </method>
    </class>

    <class name="UIPasteConfiguration" supertypes="NSObject">
      <constructor name="UIPasteConfiguration" signature="UIPasteConfiguration()"/>
      <constructor name="UIPasteConfiguration" signature="UIPasteConfiguration(acceptableTypeIdentifiers: [String])"/>
      <constructor name="UIPasteConfiguration" signature="UIPasteConfiguration(forAccepting: NSItemProviderReading.Type)"/>
      <field name="acceptableTypeIdentifiers" type="[String]"/>
      <method name="addAcceptableTypeIdentifiers" signature="addAcceptableTypeIdentifiers([String])"/>
      <method name="addTypeIdentifiers" signature="addTypeIdentifiers(forAccepting: NSItemProviderReading.Type)"/>
      <constructor name="UIPasteConfiguration" signature="UIPasteConfiguration&lt;T&gt;(forAccepting: T.Type)"/>
      <method name="addTypeIdentifiers" signature="addTypeIdentifiers&lt;T&gt;(forAccepting: T.Type)"/>
    </class>

    <class kind="protocol" name="UIPasteConfigurationSupporting" supertypes="NSObjectProtocol">
      <field name="pasteConfiguration" type="UIPasteConfiguration?"/>
      <method name="canPaste" signature="canPaste([NSItemProvider])">
        <return type="Bool"/>
      </method>
      <method name="paste" signature="paste(itemProviders: [NSItemProvider])"/>
    </class>

    <class kind="protocol" name="UIDataSourceModelAssociation">
      <method name="modelIdentifierForElement" signature="modelIdentifierForElement(at: IndexPath, in: UIView)">
        <return type="String?"/>
      </method>
      <method name="indexPathForElement" signature="indexPathForElement(withModelIdentifier: String, in: UIView)">
        <return type="IndexPath?"/>
      </method>
    </class>

    <class kind="protocol" name="UIGuidedAccessRestrictionDelegate" supertypes="NSObjectProtocol">
      <field name="guidedAccessRestrictionIdentifiers" type="[String]?"/>
      <method name="textForGuidedAccessRestriction" signature="textForGuidedAccessRestriction(withIdentifier: String)">
        <return type="String?"/>
      </method>
      <method name="detailTextForGuidedAccessRestriction" signature="detailTextForGuidedAccessRestriction(withIdentifier: String)">
        <return type="String?"/>
      </method>
      <method name="guidedAccessRestriction" signature="guidedAccessRestriction(withIdentifier: String, didChange: UIGuidedAccessRestrictionState)"/>
    </class>

    <class name="UIStoryboard" supertypes="NSObject">
      <constructor name="UIStoryboard" signature="UIStoryboard(name: String, bundle: Bundle?)"/>
      <method name="instantiateInitialViewController" signature="instantiateInitialViewController()">
        <return type="UIViewController?"/>
      </method>
      <method name="instantiateViewController" signature="instantiateViewController(withIdentifier: String)">
        <return type="UIViewController"/>
      </method>
    </class>

    <class name="UIStoryboardSegue" supertypes="NSObject">
      <constructor name="UIStoryboardSegue" signature="UIStoryboardSegue(identifier: String?, source: UIViewController, destination: UIViewController)"/>
      <field name="source" type="UIViewController"/>
      <field name="destination" type="UIViewController"/>
      <field name="identifier" type="String?"/>
      <method name="perform" signature="perform()"/>
      <constructor name="UIStoryboardSegue" signature="UIStoryboardSegue(identifier: String?, source: UIViewController, destination: UIViewController, performHandler: () -&gt; Void)"/>
    </class>

    <class name="UIStoryboardUnwindSegueSource" supertypes="NSObject">
      <field name="source" type="UIViewController"/>
      <field name="unwindAction" type="Selector"/>
      <field name="sender" type="Any?"/>
    </class>


    <class name="UIImageAsset" supertypes="NSObject">
      <constructor name="UIImageAsset" signature="UIImageAsset()"/>
      <constructor name="UIImageAsset" signature="UIImageAsset?(coder: NSCoder)"/>
      <method name="register" signature="register(UIImage, with: UITraitCollection)"/>
      <method name="unregister" signature="unregister(imageWith: UITraitCollection)"/>
      <method name="image" signature="image(with: UITraitCollection)">
        <return type="UIImage"/>
      </method>
    </class>

    <class name="NSDataAsset" supertypes="NSObject">
      <constructor name="NSDataAsset" signature="NSDataAsset?(name: String)"/>
      <constructor name="NSDataAsset" signature="NSDataAsset?(name: String, bundle: Bundle)"/>
      <field name="data" type="Data"/>
      <field name="name" type="String"/>
      <field name="typeIdentifier" type="String"/>
    </class>

    <class name="UINib" supertypes="NSObject">
      <constructor name="UINib" signature="UINib(nibName: String, bundle: Bundle?)"/>
      <constructor name="UINib" signature="UINib(data: Data, bundle: Bundle?)"/>
      <method name="instantiate" signature="instantiate(withOwner: Any?, options: [AnyHashable : Any]? = nil)">
        <return type="[Any]"/>
      </method>
    </class>

    <class name="UIDocumentPickerExtensionViewController" supertypes="UIViewController">
      <method name="dismissGrantingAccess" signature="dismissGrantingAccess(to: URL?)"/>
      <field name="documentPickerMode" type="UIDocumentPickerMode"/>
      <field name="documentStorageURL" type="URL?"/>
      <field name="originalURL" type="URL?"/>
      <method name="prepareForPresentation" signature="prepareForPresentation(in: UIDocumentPickerMode)"/>
      <field name="providerIdentifier" type="String"/>
      <field name="validTypes" type="[String]?"/>
    </class>

    <class kind="protocol" name="UITextDocumentProxy" supertypes="UIKeyInput">
      <field name="documentInputMode" type="UITextInputMode?"/>
      <field name="documentContextAfterInput" type="String?"/>
      <field name="documentContextBeforeInput" type="String?"/>
      <method name="adjustTextPosition" signature="adjustTextPosition(byCharacterOffset: Int)"/>
      <field name="selectedText" type="String?"/>
      <field name="documentIdentifier" type="UUID"/>
    </class>

    <class kind="protocol" name="UIInputViewAudioFeedback" supertypes="NSObjectProtocol">
      <field name="enableInputClicksWhenVisible" type="Bool"/>
    </class>

    <class name="UIInputViewController" supertypes="UIViewController">
      <field name="inputView" type="UIInputView?"/>
      <method name="advanceToNextInputMode" signature="advanceToNextInputMode()"/>
      <method name="dismissKeyboard" signature="dismissKeyboard()"/>
      <method name="handleInputModeList" signature="handleInputModeList(from: UIView, with: UIEvent)"/>
      <field name="textDocumentProxy" type="UITextDocumentProxy"/>
      <method name="requestSupplementaryLexicon" signature="requestSupplementaryLexicon(completion: (UILexicon) -&gt; Void)"/>
      <field name="primaryLanguage" type="String?"/>
      <field name="needsInputModeSwitchKey" type="Bool"/>
      <field name="hasFullAccess" type="Bool"/>
      <field name="hasDictationKey" type="Bool"/>
    </class>

    <class name="UILexicon" supertypes="NSObject">
      <field name="entries" type="[UILexiconEntry]"/>
    </class>

    <class name="UILexiconEntry" supertypes="NSObject">
      <field name="documentText" type="String"/>
      <field name="userInput" type="String"/>
    </class>

    <class kind="struct" name="NSDirectionalEdgeInsets">
      <constructor name="NSDirectionalEdgeInsets" signature="NSDirectionalEdgeInsets()"/>
      <constructor name="NSDirectionalEdgeInsets" signature="NSDirectionalEdgeInsets(top: CGFloat, leading: CGFloat, bottom: CGFloat, trailing: CGFloat)"/>
      <field name="bottom" type="CGFloat"/>
      <field name="leading" type="CGFloat"/>
      <field name="top" type="CGFloat"/>
      <field name="trailing" type="CGFloat"/>
      <method name="NSStringFromDirectionalEdgeInsets" signature="NSStringFromDirectionalEdgeInsets(NSDirectionalEdgeInsets)">
        <return type="String"/>
      </method>
      <method name="NSDirectionalEdgeInsetsFromString" signature="NSDirectionalEdgeInsetsFromString(String)">
        <return type="NSDirectionalEdgeInsets"/>
      </method>
    </class>


    <class name="UIActivityIndicatorView" supertypes="UIView">
      <constructor name="UIActivityIndicatorView" signature="UIActivityIndicatorView(activityIndicatorStyle: UIActivityIndicatorViewStyle)"/>
      <constructor name="UIActivityIndicatorView" signature="UIActivityIndicatorView(frame: CGRect)"/>
      <constructor name="UIActivityIndicatorView" signature="UIActivityIndicatorView(coder: NSCoder)"/>
      <method name="startAnimating" signature="startAnimating()"/>
      <method name="stopAnimating" signature="stopAnimating()"/>
      <field name="isAnimating" type="Bool"/>
      <field name="hidesWhenStopped" type="Bool"/>
      <field name="activityIndicatorViewStyle" type="UIActivityIndicatorViewStyle"/>
      <field name="color" type="UIColor?"/>
    </class>


    <class kind="protocol" name="UIAppearance" supertypes="NSObjectProtocol">
      <method name="appearance" signature="appearance()">
        <return type="UIAppearance"/>
      </method>
      <method name="appearance" signature="appearance(for: UITraitCollection)">
        <return type="UIAppearance"/>
      </method>
      <method name="appearance" signature="appearance(whenContainedInInstancesOf: [UIAppearanceContainer.Type])">
        <return type="UIAppearance"/>
      </method>
      <method name="appearance" signature="appearance(for: UITraitCollection, whenContainedInInstancesOf: [UIAppearanceContainer.Type])">
        <return type="UIAppearance"/>
      </method>
    </class>


    <class kind="protocol" name="UIAppearanceContainer" supertypes="NSObjectProtocol"/>


    <class name="UIBarButtonItem" supertypes="UIBarItem">
      <constructor name="UIBarButtonItem" signature="UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem, target: Any?, action: Selector?)"/>
      <constructor name="UIBarButtonItem" signature="UIBarButtonItem(customView: UIView)"/>
      <constructor name="UIBarButtonItem" signature="UIBarButtonItem(image: UIImage?, style: UIBarButtonItemStyle, target: Any?, action: Selector?)"/>
      <constructor name="UIBarButtonItem" signature="UIBarButtonItem(title: String?, style: UIBarButtonItemStyle, target: Any?, action: Selector?)"/>
      <constructor name="UIBarButtonItem" signature="UIBarButtonItem(image: UIImage?, landscapeImagePhone: UIImage?, style: UIBarButtonItemStyle, target: Any?, action: Selector?)"/>
      <constructor name="UIBarButtonItem" signature="UIBarButtonItem()"/>
      <constructor name="UIBarButtonItem" signature="UIBarButtonItem?(coder: NSCoder)"/>
      <field name="target" type="AnyObject?"/>
      <field name="action" type="Selector?"/>
      <field name="style" type="UIBarButtonItemStyle"/>
      <field name="possibleTitles" type="Set&lt;String&gt;?"/>
      <field name="width" type="CGFloat"/>
      <field name="customView" type="UIView?"/>
      <field name="tintColor" type="UIColor?"/>
      <method name="backButtonBackgroundImage" signature="backButtonBackgroundImage(for: UIControlState, barMetrics: UIBarMetrics)">
        <return type="UIImage?"/>
      </method>
      <method name="setBackButtonBackgroundImage" signature="setBackButtonBackgroundImage(UIImage?, for: UIControlState, barMetrics: UIBarMetrics)"/>
      <method name="backButtonTitlePositionAdjustment" signature="backButtonTitlePositionAdjustment(for: UIBarMetrics)">
        <return type="UIOffset"/>
      </method>
      <method name="setBackButtonTitlePositionAdjustment" signature="setBackButtonTitlePositionAdjustment(UIOffset, for: UIBarMetrics)"/>
      <method name="backButtonBackgroundVerticalPositionAdjustment" signature="backButtonBackgroundVerticalPositionAdjustment(for: UIBarMetrics)">
        <return type="CGFloat"/>
      </method>
      <method name="setBackButtonBackgroundVerticalPositionAdjustment" signature="setBackButtonBackgroundVerticalPositionAdjustment(CGFloat, for: UIBarMetrics)"/>
      <method name="backgroundVerticalPositionAdjustment" signature="backgroundVerticalPositionAdjustment(for: UIBarMetrics)">
        <return type="CGFloat"/>
      </method>
      <method name="setBackgroundVerticalPositionAdjustment" signature="setBackgroundVerticalPositionAdjustment(CGFloat, for: UIBarMetrics)"/>
      <method name="backgroundImage" signature="backgroundImage(for: UIControlState, barMetrics: UIBarMetrics)">
        <return type="UIImage?"/>
      </method>
      <method name="setBackgroundImage" signature="setBackgroundImage(UIImage?, for: UIControlState, barMetrics: UIBarMetrics)"/>
      <method name="backgroundImage" signature="backgroundImage(for: UIControlState, style: UIBarButtonItemStyle, barMetrics: UIBarMetrics)">
        <return type="UIImage?"/>
      </method>
      <method name="setBackgroundImage" signature="setBackgroundImage(UIImage?, for: UIControlState, style: UIBarButtonItemStyle, barMetrics: UIBarMetrics)"/>
      <method name="titlePositionAdjustment" signature="titlePositionAdjustment(for: UIBarMetrics)">
        <return type="UIOffset"/>
      </method>
      <method name="setTitlePositionAdjustment" signature="setTitlePositionAdjustment(UIOffset, for: UIBarMetrics)"/>
      <field name="buttonGroup" type="UIBarButtonItemGroup?"/>
    </class>


    <class name="UIBarButtonItemGroup" supertypes="NSObject">
      <constructor name="UIBarButtonItemGroup" signature="UIBarButtonItemGroup(barButtonItems: [UIBarButtonItem], representativeItem: UIBarButtonItem?)"/>
      <constructor name="UIBarButtonItemGroup" signature="UIBarButtonItemGroup?(coder: NSCoder)"/>
      <field name="barButtonItems" type="[UIBarButtonItem]"/>
      <field name="representativeItem" type="UIBarButtonItem?"/>
      <field name="isDisplayingRepresentativeItem" type="Bool"/>
    </class>


    <class name="UIBarItem" supertypes="NSObject">
      <constructor name="UIBarItem" signature="UIBarItem()"/>
      <constructor name="UIBarItem" signature="UIBarItem?(coder: NSCoder)"/>
      <field name="title" type="String?"/>
      <field name="image" type="UIImage?"/>
      <field name="landscapeImagePhone" type="UIImage?"/>
      <field name="largeContentSizeImage" type="UIImage?"/>
      <field name="imageInsets" type="UIEdgeInsets"/>
      <field name="landscapeImagePhoneInsets" type="UIEdgeInsets"/>
      <field name="largeContentSizeImageInsets" type="UIEdgeInsets"/>
      <field name="isEnabled" type="Bool"/>
      <field name="tag" type="Int"/>
      <method name="setTitleTextAttributes" signature="setTitleTextAttributes([NSAttributedStringKey : Any]?, for: UIControlState)"/>
      <method name="titleTextAttributes" signature="titleTextAttributes(for: UIControlState)">
        <return type="[String : Any]?"/>
      </method>
    </class>


    <class kind="protocol" name="UIBarPositioning" supertypes="NSObjectProtocol">
      <field name="barPosition" type="UIBarPosition"/>
    </class>


    <class kind="protocol" name="UIBarPositioningDelegate" supertypes="NSObjectProtocol">
      <method name="position" signature="position(for: UIBarPositioning)">
        <return type="UIBarPosition"/>
      </method>
    </class>


    <class name="UIBlurEffect" supertypes="UIVisualEffect">
      <constructor name="UIBlurEffect" signature="UIBlurEffect(style: UIBlurEffectStyle)"/>
    </class>


    <class name="UIButton" supertypes="UIControl">
      <constructor name="UIButton" signature="UIButton(type: UIButtonType)"/>
      <field name="titleLabel" type="UILabel?"/>
      <method name="title" signature="title(for: UIControlState)">
        <return type="String?"/>
      </method>
      <method name="setTitle" signature="setTitle(String?, for: UIControlState)"/>
      <method name="attributedTitle" signature="attributedTitle(for: UIControlState)">
        <return type="NSAttributedString?"/>
      </method>
      <method name="setAttributedTitle" signature="setAttributedTitle(NSAttributedString?, for: UIControlState)"/>
      <method name="titleColor" signature="titleColor(for: UIControlState)">
        <return type="UIColor?"/>
      </method>
      <method name="setTitleColor" signature="setTitleColor(UIColor?, for: UIControlState)"/>
      <method name="titleShadowColor" signature="titleShadowColor(for: UIControlState)">
        <return type="UIColor?"/>
      </method>
      <method name="setTitleShadowColor" signature="setTitleShadowColor(UIColor?, for: UIControlState)"/>
      <field name="reversesTitleShadowWhenHighlighted" type="Bool"/>
      <field name="adjustsImageWhenHighlighted" type="Bool"/>
      <field name="adjustsImageWhenDisabled" type="Bool"/>
      <field name="showsTouchWhenHighlighted" type="Bool"/>
      <method name="backgroundImage" signature="backgroundImage(for: UIControlState)">
        <return type="UIImage?"/>
      </method>
      <method name="image" signature="image(for: UIControlState)">
        <return type="UIImage?"/>
      </method>
      <method name="setBackgroundImage" signature="setBackgroundImage(UIImage?, for: UIControlState)"/>
      <method name="setImage" signature="setImage(UIImage?, for: UIControlState)"/>
      <field name="tintColor" type="UIColor!"/>
      <field name="contentEdgeInsets" type="UIEdgeInsets"/>
      <field name="titleEdgeInsets" type="UIEdgeInsets"/>
      <field name="imageEdgeInsets" type="UIEdgeInsets"/>
      <field name="buttonType" type="UIButtonType"/>
      <field name="currentTitle" type="String?"/>
      <field name="currentAttributedTitle" type="NSAttributedString?"/>
      <field name="currentTitleColor" type="UIColor"/>
      <field name="currentTitleShadowColor" type="UIColor?"/>
      <field name="currentImage" type="UIImage?"/>
      <field name="currentBackgroundImage" type="UIImage?"/>
      <field name="imageView" type="UIImageView?"/>
      <method name="backgroundRect" signature="backgroundRect(forBounds: CGRect)">
        <return type="CGRect"/>
      </method>
      <method name="contentRect" signature="contentRect(forBounds: CGRect)">
        <return type="CGRect"/>
      </method>
      <method name="titleRect" signature="titleRect(forContentRect: CGRect)">
        <return type="CGRect"/>
      </method>
      <method name="imageRect" signature="imageRect(forContentRect: CGRect)">
        <return type="CGRect"/>
      </method>
    </class>


    <class name="UIControl" supertypes="UIView">
      <field name="state" type="UIControlState"/>
      <field name="isEnabled" type="Bool"/>
      <field name="isSelected" type="Bool"/>
      <field name="isHighlighted" type="Bool"/>
      <field name="contentVerticalAlignment" type="UIControlContentVerticalAlignment"/>
      <field name="contentHorizontalAlignment" type="UIControlContentHorizontalAlignment"/>
      <field name="effectiveContentHorizontalAlignment" type="UIControlContentHorizontalAlignment"/>
      <method name="addTarget" signature="addTarget(Any?, action: Selector, for: UIControlEvents)"/>
      <method name="removeTarget" signature="removeTarget(Any?, action: Selector?, for: UIControlEvents)"/>
      <method name="actions" signature="actions(forTarget: Any?, forControlEvent: UIControlEvents)">
        <return type="[String]?"/>
      </method>
      <field name="allControlEvents" type="UIControlEvents"/>
      <field name="allTargets" type="Set&lt;AnyHashable&gt;"/>
      <method name="sendAction" signature="sendAction(Selector, to: Any?, for: UIEvent?)"/>
      <method name="sendActions" signature="sendActions(for: UIControlEvents)"/>
      <method name="beginTracking" signature="beginTracking(UITouch, with: UIEvent?)">
        <return type="Bool"/>
      </method>
      <method name="continueTracking" signature="continueTracking(UITouch, with: UIEvent?)">
        <return type="Bool"/>
      </method>
      <method name="endTracking" signature="endTracking(UITouch?, with: UIEvent?)"/>
      <method name="cancelTracking" signature="cancelTracking(with: UIEvent?)"/>
      <field name="isTracking" type="Bool"/>
      <field name="isTouchInside" type="Bool"/>
    </class>


    <class name="UIDatePicker" supertypes="UIControl">
      <field name="calendar" type="Calendar!"/>
      <field name="date" type="Date"/>
      <field name="locale" type="Locale?"/>
      <method name="setDate" signature="setDate(Date, animated: Bool)"/>
      <field name="timeZone" type="TimeZone?"/>
      <field name="datePickerMode" type="UIDatePickerMode"/>
      <field name="maximumDate" type="Date?"/>
      <field name="minimumDate" type="Date?"/>
      <field name="minuteInterval" type="Int"/>
      <field name="countDownDuration" type="TimeInterval"/>
    </class>


    <class kind="struct" name="UIEdgeInsets">
      <method name="UIEdgeInsetsMake" signature="UIEdgeInsetsMake(CGFloat, CGFloat, CGFloat, CGFloat)">
        <return type="UIEdgeInsets"/>
      </method>
      <constructor name="UIEdgeInsets" signature="UIEdgeInsets()"/>
      <constructor name="UIEdgeInsets" signature="UIEdgeInsets(top: CGFloat, left: CGFloat, bottom: CGFloat, right: CGFloat)"/>
      <field name="bottom" type="CGFloat"/>
      <field name="left" type="CGFloat"/>
      <field name="right" type="CGFloat"/>
      <field name="top" type="CGFloat"/>
      <method name="UIEdgeInsetsEqualToEdgeInsets" signature="UIEdgeInsetsEqualToEdgeInsets(UIEdgeInsets, UIEdgeInsets)">
        <return type="Bool"/>
      </method>
      <method name="==" signature="==(UIEdgeInsets, UIEdgeInsets)">
        <return type="Bool"/>
      </method>
      <method name="UIEdgeInsetsInsetRect" signature="UIEdgeInsetsInsetRect(CGRect, UIEdgeInsets)">
        <return type="CGRect"/>
      </method>
      <method name="NSStringFromUIEdgeInsets" signature="NSStringFromUIEdgeInsets(UIEdgeInsets)">
        <return type="String"/>
      </method>
      <method name="UIEdgeInsetsFromString" signature="UIEdgeInsetsFromString(String)">
        <return type="UIEdgeInsets"/>
      </method>
      <field name="zero" type="UIEdgeInsets"/>
    </class>


    <class name="UIImageView" supertypes="UIView">
      <constructor name="UIImageView" signature="UIImageView(image: UIImage?)"/>
      <constructor name="UIImageView" signature="UIImageView(image: UIImage?, highlightedImage: UIImage?)"/>
      <field name="image" type="UIImage?"/>
      <field name="highlightedImage" type="UIImage?"/>
      <field name="animationImages" type="[UIImage]?"/>
      <field name="highlightedAnimationImages" type="[UIImage]?"/>
      <field name="animationDuration" type="TimeInterval"/>
      <field name="animationRepeatCount" type="Int"/>
      <method name="startAnimating" signature="startAnimating()"/>
      <method name="stopAnimating" signature="stopAnimating()"/>
      <field name="isAnimating" type="Bool"/>
      <field name="isUserInteractionEnabled" type="Bool"/>
      <field name="isHighlighted" type="Bool"/>
      <field name="tintColor" type="UIColor!"/>
      <field name="adjustsImageWhenAncestorFocused" type="Bool"/>
      <field name="focusedFrameGuide" type="UILayoutGuide"/>
      <field name="masksFocusEffectToContents" type="Bool"/>
      <field name="overlayContentView" type="UIView"/>
    </class>


    <class name="UILabel" supertypes="UIView">
      <field name="text" type="String?"/>
      <field name="attributedText" type="NSAttributedString?"/>
      <field name="font" type="UIFont!"/>
      <field name="textColor" type="UIColor!"/>
      <field name="textAlignment" type="NSTextAlignment"/>
      <field name="lineBreakMode" type="NSLineBreakMode"/>
      <field name="isEnabled" type="Bool"/>
      <field name="adjustsFontSizeToFitWidth" type="Bool"/>
      <field name="allowsDefaultTighteningForTruncation" type="Bool"/>
      <field name="baselineAdjustment" type="UIBaselineAdjustment"/>
      <field name="minimumScaleFactor" type="CGFloat"/>
      <field name="numberOfLines" type="Int"/>
      <field name="highlightedTextColor" type="UIColor?"/>
      <field name="isHighlighted" type="Bool"/>
      <field name="shadowColor" type="UIColor?"/>
      <field name="shadowOffset" type="CGSize"/>
      <method name="textRect" signature="textRect(forBounds: CGRect, limitedToNumberOfLines: Int)">
        <return type="CGRect"/>
      </method>
      <method name="drawText" signature="drawText(in: CGRect)"/>
      <field name="preferredMaxLayoutWidth" type="CGFloat"/>
      <field name="isUserInteractionEnabled" type="Bool"/>
    </class>


    <class name="UIMenuController" supertypes="NSObject">
      <field name="isMenuVisible" type="Bool"/>
      <method name="setMenuVisible" signature="setMenuVisible(Bool, animated: Bool)"/>
      <method name="setTargetRect" signature="setTargetRect(CGRect, in: UIView)"/>
      <field name="menuFrame" type="CGRect"/>
      <field name="arrowDirection" type="UIMenuControllerArrowDirection"/>
      <method name="update" signature="update()"/>
      <field name="menuItems" type="[UIMenuItem]?"/>
    </class>


    <class name="UIMenuItem" supertypes="NSObject">
      <constructor name="UIMenuItem" signature="UIMenuItem(title: String, action: Selector)"/>
      <field name="title" type="String"/>
      <field name="action" type="Selector"/>
    </class>


    <class name="UINavigationBar" supertypes="UIView">
      <field name="delegate" type="UINavigationBarDelegate?"/>
      <method name="pushItem" signature="pushItem(UINavigationItem, animated: Bool)"/>
      <method name="popItem" signature="popItem(animated: Bool)">
        <return type="UINavigationItem?"/>
      </method>
      <method name="setItems" signature="setItems([UINavigationItem]?, animated: Bool)"/>
      <field name="items" type="[UINavigationItem]?"/>
      <field name="topItem" type="UINavigationItem?"/>
      <field name="backItem" type="UINavigationItem?"/>
      <field name="titleTextAttributes" type="Any]?"/>
      <field name="largeTitleTextAttributes" type="Any]?"/>
      <field name="prefersLargeTitles" type="Bool"/>
      <method name="titleVerticalPositionAdjustment" signature="titleVerticalPositionAdjustment(for: UIBarMetrics)">
        <return type="CGFloat"/>
      </method>
      <method name="setTitleVerticalPositionAdjustment" signature="setTitleVerticalPositionAdjustment(CGFloat, for: UIBarMetrics)"/>
      <field name="backIndicatorImage" type="UIImage?"/>
      <field name="backIndicatorTransitionMaskImage" type="UIImage?"/>
      <field name="barStyle" type="UIBarStyle"/>
      <field name="barTintColor" type="UIColor?"/>
      <field name="shadowImage" type="UIImage?"/>
      <field name="tintColor" type="UIColor!"/>
      <field name="isTranslucent" type="Bool"/>
      <method name="backgroundImage" signature="backgroundImage(for: UIBarMetrics)">
        <return type="UIImage?"/>
      </method>
      <method name="setBackgroundImage" signature="setBackgroundImage(UIImage?, for: UIBarMetrics)"/>
      <method name="backgroundImage" signature="backgroundImage(for: UIBarPosition, barMetrics: UIBarMetrics)">
        <return type="UIImage?"/>
      </method>
      <method name="setBackgroundImage" signature="setBackgroundImage(UIImage?, for: UIBarPosition, barMetrics: UIBarMetrics)"/>
    </class>


    <class kind="struct" name="UIOffset">
      <constructor name="UIOffset" signature="UIOffset()"/>
      <constructor name="UIOffset" signature="UIOffset(horizontal: CGFloat, vertical: CGFloat)"/>
      <field name="horizontal" type="CGFloat"/>
      <field name="vertical" type="CGFloat"/>
      <method name="UIOffsetMake" signature="UIOffsetMake(CGFloat, CGFloat)">
        <return type="UIOffset"/>
      </method>
      <method name="UIOffsetEqualToOffset" signature="UIOffsetEqualToOffset(UIOffset, UIOffset)">
        <return type="Bool"/>
      </method>
      <method name="==" signature="==(UIOffset, UIOffset)"/>
      <method name="NSStringFromUIOffset" signature="NSStringFromUIOffset(UIOffset)">
        <return type="String"/>
      </method>
      <method name="UIOffsetFromString" signature="UIOffsetFromString(String)">
        <return type="UIOffset"/>
      </method>
      <field name="zero" type="UIOffset"/>
    </class>


    <class name="UIPageControl" supertypes="UIControl">
      <field name="currentPage" type="Int"/>
      <field name="numberOfPages" type="Int"/>
      <field name="hidesForSinglePage" type="Bool"/>
      <field name="pageIndicatorTintColor" type="UIColor?"/>
      <field name="currentPageIndicatorTintColor" type="UIColor?"/>
      <field name="defersCurrentPageDisplay" type="Bool"/>
      <method name="updateCurrentPageDisplay" signature="updateCurrentPageDisplay()"/>
      <method name="size" signature="size(forNumberOfPages: Int)">
        <return type="CGSize"/>
      </method>
    </class>


    <class name="UIPickerView" supertypes="UIView">
      <field name="dataSource" type="UIPickerViewDataSource?"/>
      <field name="delegate" type="UIPickerViewDelegate?"/>
      <field name="numberOfComponents" type="Int"/>
      <method name="numberOfRows" signature="numberOfRows(inComponent: Int)">
        <return type="Int"/>
      </method>
      <method name="rowSize" signature="rowSize(forComponent: Int)">
        <return type="CGSize"/>
      </method>
      <method name="reloadAllComponents" signature="reloadAllComponents()"/>
      <method name="reloadComponent" signature="reloadComponent(Int)"/>
      <method name="selectRow" signature="selectRow(Int, inComponent: Int, animated: Bool)"/>
      <method name="selectedRow" signature="selectedRow(inComponent: Int)">
        <return type="Int"/>
      </method>
      <method name="view" signature="view(forRow: Int, forComponent: Int)">
        <return type="UIView?"/>
      </method>
      <field name="showsSelectionIndicator" type="Bool"/>
    </class>


    <class name="UIProgressView" supertypes="UIView">
      <constructor name="UIProgressView" signature="UIProgressView(progressViewStyle: UIProgressViewStyle)"/>
      <constructor name="UIProgressView" signature="UIProgressView(frame: CGRect)"/>
      <constructor name="UIProgressView" signature="UIProgressView?(coder: NSCoder)"/>
      <field name="progress" type="Float"/>
      <method name="setProgress" signature="setProgress(Float, animated: Bool)"/>
      <field name="observedProgress" type="Progress?"/>
      <field name="progressViewStyle" type="UIProgressViewStyle"/>
      <field name="progressTintColor" type="UIColor?"/>
      <field name="progressImage" type="UIImage?"/>
      <field name="trackTintColor" type="UIColor?"/>
      <field name="trackImage" type="UIImage?"/>
    </class>


    <class name="UIScrollView" supertypes="UIView">
      <field name="delegate" type="UIScrollViewDelegate?"/>
      <field name="contentSize" type="CGSize"/>
      <field name="contentOffset" type="CGPoint"/>
      <method name="setContentOffset" signature="setContentOffset(CGPoint, animated: Bool)"/>
      <field name="adjustedContentInset" type="UIEdgeInsets"/>
      <field name="contentInset" type="UIEdgeInsets"/>
      <field name="contentInsetAdjustmentBehavior" type="UIScrollViewContentInsetAdjustmentBehavior"/>
      <method name="adjustedContentInsetDidChange" signature="adjustedContentInsetDidChange()"/>
      <field name="frameLayoutGuide" type="UILayoutGuide"/>
      <field name="contentLayoutGuide" type="UILayoutGuide"/>
      <field name="isScrollEnabled" type="Bool"/>
      <field name="isDirectionalLockEnabled" type="Bool"/>
      <field name="isPagingEnabled" type="Bool"/>
      <field name="scrollsToTop" type="Bool"/>
      <field name="bounces" type="Bool"/>
      <field name="alwaysBounceVertical" type="Bool"/>
      <field name="alwaysBounceHorizontal" type="Bool"/>
      <field name="isTracking" type="Bool"/>
      <field name="isDragging" type="Bool"/>
      <field name="isDecelerating" type="Bool"/>
      <field name="decelerationRate" type="CGFloat"/>
      <field name="indicatorStyle" type="UIScrollViewIndicatorStyle"/>
      <field name="scrollIndicatorInsets" type="UIEdgeInsets"/>
      <field name="showsHorizontalScrollIndicator" type="Bool"/>
      <field name="showsVerticalScrollIndicator" type="Bool"/>
      <method name="flashScrollIndicators" signature="flashScrollIndicators()"/>
      <field name="refreshControl" type="UIRefreshControl?"/>
      <method name="scrollRectToVisible" signature="scrollRectToVisible(CGRect, animated: Bool)"/>
      <method name="touchesShouldBegin" signature="touchesShouldBegin(Set&lt;UITouch&gt;, with: UIEvent?, in: UIView)">
        <return type="Bool"/>
      </method>
      <method name="touchesShouldCancel" signature="touchesShouldCancel(in: UIView)">
        <return type="Bool"/>
      </method>
      <field name="canCancelContentTouches" type="Bool"/>
      <field name="delaysContentTouches" type="Bool"/>
      <field name="directionalPressGestureRecognizer" type="UIGestureRecognizer"/>
      <field name="panGestureRecognizer" type="UIPanGestureRecognizer"/>
      <field name="pinchGestureRecognizer" type="UIPinchGestureRecognizer?"/>
      <method name="zoom" signature="zoom(to: CGRect, animated: Bool)"/>
      <field name="zoomScale" type="CGFloat"/>
      <method name="setZoomScale" signature="setZoomScale(CGFloat, animated: Bool)"/>
      <field name="maximumZoomScale" type="CGFloat"/>
      <field name="minimumZoomScale" type="CGFloat"/>
      <field name="isZoomBouncing" type="Bool"/>
      <field name="isZooming" type="Bool"/>
      <field name="bouncesZoom" type="Bool"/>
      <field name="keyboardDismissMode" type="UIScrollViewKeyboardDismissMode"/>
      <field name="indexDisplayMode" type="UIScrollViewIndexDisplayMode"/>
    </class>


    <class name="UISearchBar" supertypes="UIView">
      <constructor name="UISearchBar" signature="UISearchBar()"/>
      <constructor name="UISearchBar" signature="UISearchBar?(coder: NSCoder)"/>
      <constructor name="UISearchBar" signature="UISearchBar(frame: CGRect)"/>
      <field name="delegate" type="UISearchBarDelegate?"/>
      <field name="placeholder" type="String?"/>
      <field name="prompt" type="String?"/>
      <field name="text" type="String?"/>
      <field name="barStyle" type="UIBarStyle"/>
      <field name="barTintColor" type="UIColor?"/>
      <field name="searchBarStyle" type="UISearchBarStyle"/>
      <field name="tintColor" type="UIColor!"/>
      <field name="isTranslucent" type="Bool"/>
      <field name="inputAssistantItem" type="UITextInputAssistantItem"/>
      <field name="showsBookmarkButton" type="Bool"/>
      <field name="showsCancelButton" type="Bool"/>
      <method name="setShowsCancelButton" signature="setShowsCancelButton(Bool, animated: Bool)"/>
      <field name="showsSearchResultsButton" type="Bool"/>
      <field name="isSearchResultsButtonSelected" type="Bool"/>
      <field name="scopeButtonTitles" type="[String]?"/>
      <field name="selectedScopeButtonIndex" type="Int"/>
      <field name="showsScopeBar" type="Bool"/>
      <field name="backgroundImage" type="UIImage?"/>
      <method name="backgroundImage" signature="backgroundImage(for: UIBarPosition, barMetrics: UIBarMetrics)">
        <return type="UIImage?"/>
      </method>
      <method name="setBackgroundImage" signature="setBackgroundImage(UIImage?, for: UIBarPosition, barMetrics: UIBarMetrics)"/>
      <method name="image" signature="image(for: UISearchBarIcon, state: UIControlState)">
        <return type="UIImage?"/>
      </method>
      <method name="setImage" signature="setImage(UIImage?, for: UISearchBarIcon, state: UIControlState)"/>
      <method name="positionAdjustment" signature="positionAdjustment(for: UISearchBarIcon)">
        <return type="UIOffset"/>
      </method>
      <method name="setPositionAdjustment" signature="setPositionAdjustment(UIOffset, for: UISearchBarIcon)"/>
      <field name="inputAccessoryView" type="UIView?"/>
      <field name="scopeBarBackgroundImage" type="UIImage?"/>
      <method name="scopeBarButtonBackgroundImage" signature="scopeBarButtonBackgroundImage(for: UIControlState)">
        <return type="UIImage?"/>
      </method>
      <method name="setScopeBarButtonBackgroundImage" signature="setScopeBarButtonBackgroundImage(UIImage?, for: UIControlState)"/>
      <method name="scopeBarButtonDividerImage" signature="scopeBarButtonDividerImage(forLeftSegmentState: UIControlState, rightSegmentState: UIControlState)">
        <return type="UIImage?"/>
      </method>
      <method name="setScopeBarButtonDividerImage" signature="setScopeBarButtonDividerImage(UIImage?, forLeftSegmentState: UIControlState, rightSegmentState: UIControlState)"/>
      <method name="scopeBarButtonTitleTextAttributes" signature="scopeBarButtonTitleTextAttributes(for: UIControlState)">
        <return type="[String : Any]?"/>
      </method>
      <method name="setScopeBarButtonTitleTextAttributes" signature="setScopeBarButtonTitleTextAttributes([String : Any]?, for: UIControlState)"/>
      <method name="searchFieldBackgroundImage" signature="searchFieldBackgroundImage(for: UIControlState)">
        <return type="UIImage?"/>
      </method>
      <method name="setSearchFieldBackgroundImage" signature="setSearchFieldBackgroundImage(UIImage?, for: UIControlState)"/>
      <field name="searchFieldBackgroundPositionAdjustment" type="UIOffset"/>
      <field name="searchTextPositionAdjustment" type="UIOffset"/>
    </class>


    <class name="UISegmentedControl" supertypes="UIControl">
      <constructor name="UISegmentedControl" signature="UISegmentedControl(items: [Any]?)"/>
      <method name="setImage" signature="setImage(UIImage?, forSegmentAt: Int)"/>
      <method name="imageForSegment" signature="imageForSegment(at: Int)">
        <return type="UIImage?"/>
      </method>
      <method name="setTitle" signature="setTitle(String?, forSegmentAt: Int)"/>
      <method name="titleForSegment" signature="titleForSegment(at: Int)">
        <return type="String?"/>
      </method>
      <method name="insertSegment" signature="insertSegment(with: UIImage?, at: Int, animated: Bool)"/>
      <method name="insertSegment" signature="insertSegment(withTitle: String?, at: Int, animated: Bool)"/>
      <field name="numberOfSegments" type="Int"/>
      <method name="removeAllSegments" signature="removeAllSegments()"/>
      <method name="removeSegment" signature="removeSegment(at: Int, animated: Bool)"/>
      <field name="selectedSegmentIndex" type="Int"/>
      <field name="isMomentary" type="Bool"/>
      <method name="setEnabled" signature="setEnabled(Bool, forSegmentAt: Int)"/>
      <method name="isEnabledForSegment" signature="isEnabledForSegment(at: Int)">
        <return type="Bool"/>
      </method>
      <method name="setContentOffset" signature="setContentOffset(CGSize, forSegmentAt: Int)"/>
      <method name="contentOffsetForSegment" signature="contentOffsetForSegment(at: Int)">
        <return type="CGSize"/>
      </method>
      <method name="setWidth" signature="setWidth(CGFloat, forSegmentAt: Int)"/>
      <method name="widthForSegment" signature="widthForSegment(at: Int)">
        <return type="CGFloat"/>
      </method>
      <field name="apportionsSegmentWidthsByContent" type="Bool"/>
      <field name="tintColor" type="UIColor!"/>
      <method name="backgroundImage" signature="backgroundImage(for: UIControlState, barMetrics: UIBarMetrics)">
        <return type="UIImage?"/>
      </method>
      <method name="setBackgroundImage" signature="setBackgroundImage(UIImage?, for: UIControlState, barMetrics: UIBarMetrics)"/>
      <method name="contentPositionAdjustment" signature="contentPositionAdjustment(forSegmentType: UISegmentedControlSegment, barMetrics: UIBarMetrics)">
        <return type="UIOffset"/>
      </method>
      <method name="setContentPositionAdjustment" signature="setContentPositionAdjustment(UIOffset, forSegmentType: UISegmentedControlSegment, barMetrics: UIBarMetrics)"/>
      <method name="dividerImage" signature="dividerImage(forLeftSegmentState: UIControlState, rightSegmentState: UIControlState, barMetrics: UIBarMetrics)">
        <return type="UIImage?"/>
      </method>
      <method name="setDividerImage" signature="setDividerImage(UIImage?, forLeftSegmentState: UIControlState, rightSegmentState: UIControlState, barMetrics: UIBarMetrics)"/>
      <method name="titleTextAttributes" signature="titleTextAttributes(for: UIControlState)">
        <return type="[AnyHashable : Any]?"/>
      </method>
      <method name="setTitleTextAttributes" signature="setTitleTextAttributes([AnyHashable : Any]?, for: UIControlState)"/>
    </class>


    <class name="UISlider" supertypes="UIControl">
      <field name="value" type="Float"/>
      <method name="setValue" signature="setValue(Float, animated: Bool)"/>
      <field name="minimumValue" type="Float"/>
      <field name="maximumValue" type="Float"/>
      <field name="isContinuous" type="Bool"/>
      <field name="minimumValueImage" type="UIImage?"/>
      <field name="maximumValueImage" type="UIImage?"/>
      <field name="minimumTrackTintColor" type="UIColor?"/>
      <field name="currentMinimumTrackImage" type="UIImage?"/>
      <method name="minimumTrackImage" signature="minimumTrackImage(for: UIControlState)">
        <return type="UIImage?"/>
      </method>
      <method name="setMinimumTrackImage" signature="setMinimumTrackImage(UIImage?, for: UIControlState)"/>
      <field name="maximumTrackTintColor" type="UIColor?"/>
      <field name="currentMaximumTrackImage" type="UIImage?"/>
      <method name="maximumTrackImage" signature="maximumTrackImage(for: UIControlState)">
        <return type="UIImage?"/>
      </method>
      <method name="setMaximumTrackImage" signature="setMaximumTrackImage(UIImage?, for: UIControlState)"/>
      <field name="thumbTintColor" type="UIColor?"/>
      <field name="currentThumbImage" type="UIImage?"/>
      <method name="thumbImage" signature="thumbImage(for: UIControlState)">
        <return type="UIImage?"/>
      </method>
      <method name="setThumbImage" signature="setThumbImage(UIImage?, for: UIControlState)"/>
      <method name="maximumValueImageRect" signature="maximumValueImageRect(forBounds: CGRect)">
        <return type="CGRect"/>
      </method>
      <method name="minimumValueImageRect" signature="minimumValueImageRect(forBounds: CGRect)">
        <return type="CGRect"/>
      </method>
      <method name="trackRect" signature="trackRect(forBounds: CGRect)">
        <return type="CGRect"/>
      </method>
      <method name="thumbRect" signature="thumbRect(forBounds: CGRect, trackRect: CGRect, value: Float)">
        <return type="CGRect"/>
      </method>
    </class>


    <class name="UIStackView" supertypes="UIView">
      <constructor name="UIStackView" signature="UIStackView(arrangedSubviews: [UIView])"/>
      <constructor name="UIStackView" signature="UIStackView(frame: CGRect)"/>
      <constructor name="UIStackView" signature="UIStackView(coder: NSCoder)"/>
      <method name="addArrangedSubview" signature="addArrangedSubview(UIView)"/>
      <field name="arrangedSubviews" type="[UIView]"/>
      <method name="insertArrangedSubview" signature="insertArrangedSubview(UIView, at: Int)"/>
      <method name="removeArrangedSubview" signature="removeArrangedSubview(UIView)"/>
      <field name="alignment" type="UIStackViewAlignment"/>
      <field name="axis" type="UILayoutConstraintAxis"/>
      <field name="isBaselineRelativeArrangement" type="Bool"/>
      <field name="distribution" type="UIStackViewDistribution"/>
      <field name="isLayoutMarginsRelativeArrangement" type="Bool"/>
      <field name="spacing" type="CGFloat"/>
      <method name="customSpacing" signature="customSpacing(after: UIView)"/>
      <method name="setCustomSpacing" signature="setCustomSpacing(CGFloat, after: UIView)"/>
    </class>


    <class name="UIStepper" supertypes="UIControl">
      <field name="isContinuous" type="Bool"/>
      <field name="autorepeat" type="Bool"/>
      <field name="wraps" type="Bool"/>
      <field name="minimumValue" type="Double"/>
      <field name="maximumValue" type="Double"/>
      <field name="stepValue" type="Double"/>
      <field name="value" type="Double"/>
      <field name="tintColor" type="UIColor!"/>
      <method name="backgroundImage" signature="backgroundImage(for: UIControlState)">
        <return type="UIImage?"/>
      </method>
      <method name="setBackgroundImage" signature="setBackgroundImage(UIImage?, for: UIControlState)"/>
      <method name="decrementImage" signature="decrementImage(for: UIControlState)">
        <return type="UIImage?"/>
      </method>
      <method name="setDecrementImage" signature="setDecrementImage(UIImage?, for: UIControlState)"/>
      <method name="dividerImage" signature="dividerImage(forLeftSegmentState: UIControlState, rightSegmentState: UIControlState)">
        <return type="UIImage?"/>
      </method>
      <method name="setDividerImage" signature="setDividerImage(UIImage?, forLeftSegmentState: UIControlState, rightSegmentState: UIControlState)"/>
      <method name="incrementImage" signature="incrementImage(for: UIControlState)">
        <return type="UIImage?"/>
      </method>
      <method name="setIncrementImage" signature="setIncrementImage(UIImage?, for: UIControlState)"/>
    </class>


    <class name="UISwitch" supertypes="UIControl">
      <constructor name="UISwitch" signature="UISwitch(frame: CGRect)"/>
      <constructor name="UISwitch" signature="UISwitch?(coder: NSCoder)"/>
      <field name="isOn" type="Bool"/>
      <method name="setOn" signature="setOn(Bool, animated: Bool)"/>
      <field name="onTintColor" type="UIColor?"/>
      <field name="tintColor" type="UIColor!"/>
      <field name="thumbTintColor" type="UIColor?"/>
      <field name="onImage" type="UIImage?"/>
      <field name="offImage" type="UIImage?"/>
    </class>



    <class name="UITabBarItem" supertypes="UIBarItem">
      <constructor name="UITabBarItem" signature="UITabBarItem(tabBarSystemItem: UITabBarSystemItem, tag: Int)"/>
      <constructor name="UITabBarItem" signature="UITabBarItem(title: String?, image: UIImage?, tag: Int)"/>
      <constructor name="UITabBarItem" signature="UITabBarItem(title: String?, image: UIImage?, selectedImage: UIImage?)"/>
      <constructor name="UITabBarItem" signature="UITabBarItem()"/>
      <constructor name="UITabBarItem" signature="UITabBarItem?(coder: NSCoder)"/>
      <field name="selectedImage" type="UIImage?"/>
      <field name="titlePositionAdjustment" type="UIOffset"/>
      <field name="badgeValue" type="String?"/>
      <field name="badgeColor" type="UIColor?"/>
      <method name="setBadgeTextAttributes" signature="setBadgeTextAttributes([String : Any]?, for: UIControlState)"/>
      <method name="badgeTextAttributes" signature="badgeTextAttributes(for: UIControlState)">
        <return type="[String : Any]?"/>
      </method>
    </class>

    <class kind="protocol" name="UITextInputTraits" supertypes="NSObjectProtocol">
      <field name="autocapitalizationType" type="UITextAutocapitalizationType"/>
      <field name="autocorrectionType" type="UITextAutocorrectionType"/>
      <field name="enablesReturnKeyAutomatically" type="Bool"/>
      <field name="isSecureTextEntry" type="Bool"/>
      <field name="keyboardAppearance" type="UIKeyboardAppearance"/>
      <field name="keyboardType" type="UIKeyboardType"/>
      <field name="returnKeyType" type="UIReturnKeyType"/>
      <field name="smartDashesType" type="UITextSmartDashesType"/>
      <field name="smartInsertDeleteType" type="UITextSmartInsertDeleteType"/>
      <field name="smartQuotesType" type="UITextSmartQuotesType"/>
      <field name="spellCheckingType" type="UITextSpellCheckingType"/>
      <field name="textContentType" type="UITextContentType!"/>
    </class>

    <class name="UITextField" supertypes="UIControl, UIKit.UITextInputTraits">
      <field name="delegate" type="UITextFieldDelegate?"/>
      <field name="text" type="String">
        <source argpos="-1" kind="user_input" resource="gui"/>
      </field>
      <field name="attributedText" type="NSAttributedString?"/>
      <field name="placeholder" type="String?"/>
      <field name="attributedPlaceholder" type="NSAttributedString?"/>
      <field name="defaultTextAttributes" type="Any]"/>
      <field name="font" type="UIFont?"/>
      <field name="textColor" type="UIColor?"/>
      <field name="textAlignment" type="NSTextAlignment"/>
      <field name="typingAttributes" type="Any]?"/>
      <field name="adjustsFontSizeToFitWidth" type="Bool"/>
      <field name="minimumFontSize" type="CGFloat"/>
      <field name="isEditing" type="Bool"/>
      <field name="clearsOnBeginEditing" type="Bool"/>
      <field name="clearsOnInsertion" type="Bool"/>
      <field name="allowsEditingTextAttributes" type="Bool"/>
      <field name="borderStyle" type="UITextBorderStyle"/>
      <field name="background" type="UIImage?"/>
      <field name="disabledBackground" type="UIImage?"/>
      <field name="clearButtonMode" type="UITextFieldViewMode"/>
      <field name="leftView" type="UIView?"/>
      <field name="leftViewMode" type="UITextFieldViewMode"/>
      <field name="rightView" type="UIView?"/>
      <field name="rightViewMode" type="UITextFieldViewMode"/>
      <method name="textRect" signature="textRect(forBounds: CGRect)">
        <return type="CGRect"/>
      </method>
      <method name="drawText" signature="drawText(in: CGRect)"/>
      <method name="placeholderRect" signature="placeholderRect(forBounds: CGRect)">
        <return type="CGRect"/>
      </method>
      <method name="drawPlaceholder" signature="drawPlaceholder(in: CGRect)"/>
      <method name="borderRect" signature="borderRect(forBounds: CGRect)">
        <return type="CGRect"/>
      </method>
      <method name="editingRect" signature="editingRect(forBounds: CGRect)">
        <return type="CGRect"/>
      </method>
      <method name="clearButtonRect" signature="clearButtonRect(forBounds: CGRect)">
        <return type="CGRect"/>
      </method>
      <method name="leftViewRect" signature="leftViewRect(forBounds: CGRect)">
        <return type="CGRect"/>
      </method>
      <method name="rightViewRect" signature="rightViewRect(forBounds: CGRect)">
        <return type="CGRect"/>
      </method>
      <field name="inputView" type="UIView?"/>
      <field name="inputAccessoryView" type="UIView?"/>
    </class>


    <class name="UITextView" supertypes="UIScrollView">
      <constructor name="UITextView" signature="UITextView(frame: CGRect, textContainer: NSTextContainer?)"/>
      <constructor name="UITextView" signature="UITextView?(coder: NSCoder)"/>
      <field name="delegate" type="UITextViewDelegate?"/>
      <field name="text" type="String!"/>
      <field name="attributedText" type="NSAttributedString!"/>
      <field name="font" type="UIFont?"/>
      <field name="textColor" type="UIColor?"/>
      <field name="isEditable" type="Bool"/>
      <field name="allowsEditingTextAttributes" type="Bool"/>
      <field name="dataDetectorTypes" type="UIDataDetectorTypes"/>
      <field name="textAlignment" type="NSTextAlignment"/>
      <field name="typingAttributes" type="Any]"/>
      <field name="linkTextAttributes" type="Any]!"/>
      <field name="textContainerInset" type="UIEdgeInsets"/>
      <field name="selectedRange" type="NSRange"/>
      <method name="scrollRangeToVisible" signature="scrollRangeToVisible(NSRange)"/>
      <field name="clearsOnInsertion" type="Bool"/>
      <field name="isSelectable" type="Bool"/>
      <field name="inputView" type="UIView?"/>
      <field name="inputAccessoryView" type="UIView?"/>
      <field name="layoutManager" type="NSLayoutManager"/>
      <field name="textContainer" type="NSTextContainer"/>
      <field name="textStorage" type="NSTextStorage"/>
    </class>


    <class name="UIToolbar" supertypes="UIView">
      <field name="delegate" type="UIToolbarDelegate?"/>
      <field name="items" type="[UIBarButtonItem]?"/>
      <method name="setItems" signature="setItems([UIBarButtonItem]?, animated: Bool)"/>
      <field name="barStyle" type="UIBarStyle"/>
      <field name="barTintColor" type="UIColor?"/>
      <field name="tintColor" type="UIColor!"/>
      <field name="isTranslucent" type="Bool"/>
      <method name="backgroundImage" signature="backgroundImage(forToolbarPosition: UIBarPosition, barMetrics: UIBarMetrics)">
        <return type="UIImage?"/>
      </method>
      <method name="setBackgroundImage" signature="setBackgroundImage(UIImage?, forToolbarPosition: UIBarPosition, barMetrics: UIBarMetrics)"/>
      <method name="shadowImage" signature="shadowImage(forToolbarPosition: UIBarPosition)">
        <return type="UIImage?"/>
      </method>
      <method name="setShadowImage" signature="setShadowImage(UIImage?, forToolbarPosition: UIBarPosition)"/>
    </class>


    <class name="UIVibrancyEffect" supertypes="UIVisualEffect">
      <constructor name="UIVibrancyEffect" signature="UIVibrancyEffect(blurEffect: UIBlurEffect)"/>
    </class>


    <class name="UIView" supertypes="UIResponder">
      <constructor name="UIView" signature="UIView(frame: CGRect)"/>
      <constructor name="UIView" signature="UIView?(coder: NSCoder)"/>
      <field name="backgroundColor" type="UIColor?"/>
      <field name="isHidden" type="Bool">
        <tags>screen_caching_neutralizer:true</tags>
      </field>
      <field name="alpha" type="CGFloat"/>
      <field name="isOpaque" type="Bool"/>
      <field name="tintColor" type="UIColor!"/>
      <field name="tintAdjustmentMode" type="UIViewTintAdjustmentMode"/>
      <field name="clipsToBounds" type="Bool"/>
      <field name="clearsContextBeforeDrawing" type="Bool"/>
      <field name="mask" type="UIView?"/>
      <field name="layer" type="CALayer"/>
      <field name="isUserInteractionEnabled" type="Bool"/>
      <field name="isMultipleTouchEnabled" type="Bool"/>
      <field name="isExclusiveTouch" type="Bool"/>
      <field name="frame" type="CGRect"/>
      <field name="bounds" type="CGRect"/>
      <field name="center" type="CGPoint"/>
      <field name="transform" type="CGAffineTransform"/>
      <field name="superview" type="UIView?"/>
      <field name="subviews" type="[UIView]"/>
      <field name="window" type="UIWindow?"/>
      <method name="addSubview" signature="addSubview(UIView)">
        <tags>screen_caching_neutralizer:true</tags>
      </method>
      <method name="bringSubview" signature="bringSubview(toFront: UIView)"/>
      <method name="sendSubview" signature="sendSubview(toBack: UIView)"/>
      <method name="removeFromSuperview" signature="removeFromSuperview()"/>
      <method name="insertSubview" signature="insertSubview(UIView, at: Int)"/>
      <method name="insertSubview" signature="insertSubview(UIView, aboveSubview: UIView)"/>
      <method name="insertSubview" signature="insertSubview(UIView, belowSubview: UIView)"/>
      <method name="exchangeSubview" signature="exchangeSubview(at: Int, withSubviewAt: Int)"/>
      <method name="isDescendant" signature="isDescendant(of: UIView)">
        <return type="Bool"/>
      </method>
      <method name="didAddSubview" signature="didAddSubview(UIView)"/>
      <method name="willRemoveSubview" signature="willRemoveSubview(UIView)"/>
      <method name="willMove" signature="willMove(toSuperview: UIView?)"/>
      <method name="didMoveToSuperview" signature="didMoveToSuperview()"/>
      <method name="willMove" signature="willMove(toWindow: UIWindow?)"/>
      <method name="didMoveToWindow" signature="didMoveToWindow()"/>
      <field name="directionalLayoutMargins" type="NSDirectionalEdgeInsets"/>
      <field name="layoutMargins" type="UIEdgeInsets"/>
      <field name="preservesSuperviewLayoutMargins" type="Bool"/>
      <method name="layoutMarginsDidChange" signature="layoutMarginsDidChange()"/>
      <field name="safeAreaInsets" type="UIEdgeInsets"/>
      <field name="safeAreaLayoutGuide" type="UILayoutGuide"/>
      <method name="safeAreaInsetsDidChange" signature="safeAreaInsetsDidChange()"/>
      <field name="insetsLayoutMarginsFromSafeArea" type="Bool"/>
      <field name="constraints" type="[NSLayoutConstraint]"/>
      <method name="addConstraint" signature="addConstraint(NSLayoutConstraint)"/>
      <method name="addConstraints" signature="addConstraints([NSLayoutConstraint])"/>
      <method name="removeConstraint" signature="removeConstraint(NSLayoutConstraint)"/>
      <method name="removeConstraints" signature="removeConstraints([NSLayoutConstraint])"/>
      <field name="bottomAnchor" type="NSLayoutYAxisAnchor"/>
      <field name="centerXAnchor" type="NSLayoutXAxisAnchor"/>
      <field name="centerYAnchor" type="NSLayoutYAxisAnchor"/>
      <field name="firstBaselineAnchor" type="NSLayoutYAxisAnchor"/>
      <field name="heightAnchor" type="NSLayoutDimension"/>
      <field name="lastBaselineAnchor" type="NSLayoutYAxisAnchor"/>
      <field name="leadingAnchor" type="NSLayoutXAxisAnchor"/>
      <field name="leftAnchor" type="NSLayoutXAxisAnchor"/>
      <field name="rightAnchor" type="NSLayoutXAxisAnchor"/>
      <field name="topAnchor" type="NSLayoutYAxisAnchor"/>
      <field name="trailingAnchor" type="NSLayoutXAxisAnchor"/>
      <field name="widthAnchor" type="NSLayoutDimension"/>
      <method name="addLayoutGuide" signature="addLayoutGuide(UILayoutGuide)"/>
      <field name="layoutGuides" type="[UILayoutGuide]"/>
      <field name="layoutMarginsGuide" type="UILayoutGuide"/>
      <field name="readableContentGuide" type="UILayoutGuide"/>
      <method name="removeLayoutGuide" signature="removeLayoutGuide(UILayoutGuide)"/>
      <method name="systemLayoutSizeFitting" signature="systemLayoutSizeFitting(CGSize)">
        <return type="CGSize"/>
      </method>
      <method name="systemLayoutSizeFitting" signature="systemLayoutSizeFitting(CGSize, withHorizontalFittingPriority: UILayoutPriority, verticalFittingPriority: UILayoutPriority)">
        <return type="CGSize"/>
      </method>
      <field name="intrinsicContentSize" type="CGSize"/>
      <method name="invalidateIntrinsicContentSize" signature="invalidateIntrinsicContentSize()"/>
      <method name="contentCompressionResistancePriority" signature="contentCompressionResistancePriority(for: UILayoutConstraintAxis)">
        <return type="UILayoutPriority"/>
      </method>
      <method name="setContentCompressionResistancePriority" signature="setContentCompressionResistancePriority(UILayoutPriority, for: UILayoutConstraintAxis)"/>
      <method name="contentHuggingPriority" signature="contentHuggingPriority(for: UILayoutConstraintAxis)">
        <return type="UILayoutPriority"/>
      </method>
      <method name="setContentHuggingPriority" signature="setContentHuggingPriority(UILayoutPriority, for: UILayoutConstraintAxis)"/>
      <method name="alignmentRect" signature="alignmentRect(forFrame: CGRect)">
        <return type="CGRect"/>
      </method>
      <method name="frame" signature="frame(forAlignmentRect: CGRect)">
        <return type="CGRect"/>
      </method>
      <field name="alignmentRectInsets" type="UIEdgeInsets"/>
      <method name="forBaselineLayout" signature="forBaselineLayout()">
        <return type="UIView"/>
      </method>
      <field name="forFirstBaselineLayout" type="UIView"/>
      <field name="forLastBaselineLayout" type="UIView"/>
      <method name="needsUpdateConstraints" signature="needsUpdateConstraints()">
        <return type="Bool"/>
      </method>
      <method name="setNeedsUpdateConstraints" signature="setNeedsUpdateConstraints()"/>
      <method name="updateConstraints" signature="updateConstraints()"/>
      <method name="updateConstraintsIfNeeded" signature="updateConstraintsIfNeeded()"/>
      <method name="constraintsAffectingLayout" signature="constraintsAffectingLayout(for: UILayoutConstraintAxis)">
        <return type="[NSLayoutConstraint]"/>
      </method>
      <field name="hasAmbiguousLayout" type="Bool"/>
      <method name="exerciseAmbiguityInLayout" signature="exerciseAmbiguityInLayout()"/>
      <field name="contentMode" type="UIViewContentMode"/>
      <method name="sizeThatFits" signature="sizeThatFits(CGSize)">
        <return type="CGSize"/>
      </method>
      <method name="sizeToFit" signature="sizeToFit()"/>
      <field name="autoresizesSubviews" type="Bool"/>
      <field name="autoresizingMask" type="UIViewAutoresizing"/>
      <method name="layoutSubviews" signature="layoutSubviews()"/>
      <method name="setNeedsLayout" signature="setNeedsLayout()"/>
      <method name="layoutIfNeeded" signature="layoutIfNeeded()"/>
      <field name="translatesAutoresizingMaskIntoConstraints" type="Bool"/>
      <field name="semanticContentAttribute" type="UISemanticContentAttribute"/>
      <field name="effectiveUserInterfaceLayoutDirection" type="UIUserInterfaceLayoutDirection"/>
      <method name="addInteraction" signature="addInteraction(UIInteraction)"/>
      <method name="removeInteraction" signature="removeInteraction(UIInteraction)"/>
      <field name="interactions" type="[UIInteraction]"/>
      <method name="draw" signature="draw(CGRect)"/>
      <method name="setNeedsDisplay" signature="setNeedsDisplay()"/>
      <method name="setNeedsDisplay" signature="setNeedsDisplay(CGRect)"/>
      <field name="contentScaleFactor" type="CGFloat"/>
      <method name="tintColorDidChange" signature="tintColorDidChange()"/>
      <method name="viewPrintFormatter" signature="viewPrintFormatter()">
        <return type="UIViewPrintFormatter"/>
      </method>
      <method name="draw" signature="draw(CGRect, for: UIViewPrintFormatter)"/>
      <method name="addGestureRecognizer" signature="addGestureRecognizer(UIGestureRecognizer)"/>
      <method name="removeGestureRecognizer" signature="removeGestureRecognizer(UIGestureRecognizer)"/>
      <field name="gestureRecognizers" type="[UIGestureRecognizer]?"/>
      <method name="gestureRecognizerShouldBegin" signature="gestureRecognizerShouldBegin(UIGestureRecognizer)">
        <return type="Bool"/>
      </method>
      <field name="canBecomeFocused" type="Bool"/>
      <field name="isFocused" type="Bool"/>
      <method name="addMotionEffect" signature="addMotionEffect(UIMotionEffect)"/>
      <field name="motionEffects" type="[UIMotionEffect]"/>
      <method name="removeMotionEffect" signature="removeMotionEffect(UIMotionEffect)"/>
      <field name="restorationIdentifier" type="String?"/>
      <method name="encodeRestorableState" signature="encodeRestorableState(with: NSCoder)"/>
      <method name="decodeRestorableState" signature="decodeRestorableState(with: NSCoder)"/>
      <method name="snapshotView" signature="snapshotView(afterScreenUpdates: Bool)">
        <return type="UIView?"/>
      </method>
      <method name="resizableSnapshotView" signature="resizableSnapshotView(from: CGRect, afterScreenUpdates: Bool, withCapInsets: UIEdgeInsets)">
        <return type="UIView?"/>
      </method>
      <method name="drawHierarchy" signature="drawHierarchy(in: CGRect, afterScreenUpdates: Bool)">
        <return type="Bool"/>
      </method>
      <field name="tag" type="Int"/>
      <method name="viewWithTag" signature="viewWithTag(Int)">
        <return type="UIView?"/>
      </method>
      <method name="convert" signature="convert(CGPoint, to: UIView?)">
        <return type="CGPoint"/>
      </method>
      <method name="convert" signature="convert(CGPoint, from: UIView?)">
        <return type="CGPoint"/>
      </method>
      <method name="convert" signature="convert(CGRect, to: UIView?)">
        <return type="CGRect"/>
      </method>
      <method name="convert" signature="convert(CGRect, from: UIView?)">
        <return type="CGRect"/>
      </method>
      <method name="hitTest" signature="hitTest(CGPoint, with: UIEvent?)">
        <return type="UIView?"/>
      </method>
      <method name="point" signature="point(inside: CGPoint, with: UIEvent?)">
        <return type="Bool"/>
      </method>
      <method name="endEditing" signature="endEditing(Bool)">
        <return type="Bool"/>
      </method>
      <field name="accessibilityIgnoresInvertColors" type="Bool"/>
    </class>


    <class name="UIVisualEffect" supertypes="NSObject"/>


    <class name="UIVisualEffectView" supertypes="UIView">
      <constructor name="UIVisualEffectView" signature="UIVisualEffectView(effect: UIVisualEffect?)"/>
      <constructor name="UIVisualEffectView" signature="UIVisualEffectView?(coder: NSCoder)"/>
      <field name="contentView" type="UIView"/>
      <field name="effect" type="UIVisualEffect?"/>
    </class>


    <class name="UIWebView" supertypes="UIView">
      <field name="delegate" type="UIWebViewDelegate?"/>
      <method name="load" signature="load(Data, mimeType: String, textEncodingName: String, baseURL: URL)"/>
      <method name="loadRequest" signature="loadRequest(URLRequest)">
        <sink argpos="0" kind="xss" resource="web" />
      </method>
      <field name="request" type="URLRequest?"/>
      <field name="isLoading" type="Bool"/>
      <method name="stopLoading" signature="stopLoading()"/>
      <method name="reload" signature="reload()"/>
      <field name="canGoBack" type="Bool"/>
      <field name="canGoForward" type="Bool"/>
      <method name="goBack" signature="goBack()"/>
      <method name="goForward" signature="goForward()"/>
      <field name="allowsLinkPreview" type="Bool"/>
      <field name="scalesPageToFit" type="Bool"/>
      <field name="scrollView" type="UIScrollView"/>
      <field name="suppressesIncrementalRendering" type="Bool"/>
      <field name="keyboardDisplayRequiresUserAction" type="Bool"/>
      <field name="dataDetectorTypes" type="UIDataDetectorTypes"/>
      <field name="allowsInlineMediaPlayback" type="Bool"/>
      <field name="mediaPlaybackRequiresUserAction" type="Bool"/>
      <field name="mediaPlaybackAllowsAirPlay" type="Bool"/>
      <field name="allowsPictureInPictureMediaPlayback" type="Bool"/>
      <field name="gapBetweenPages" type="CGFloat"/>
      <field name="pageCount" type="Int"/>
      <field name="pageLength" type="CGFloat"/>
      <field name="paginationBreakingMode" type="UIWebPaginationBreakingMode"/>
      <field name="paginationMode" type="UIWebPaginationMode"/>

      <method name="stringByEvaluatingJavaScript" signature="stringByEvaluatingJavaScript(from: String)">
        <parameters>
          <param type="String" name="from"/>
        </parameters>
        <return type="String?"/>
        <sink paramNames="from" kind="code_injection" resource="gui"/>
      </method>
      <method name="loadHTMLString" signature="loadHTMLString(String, baseURL: URL?)">
        <parameters>
          <param type="String"/>
          <param type="URL" name="baseURL"/>
        </parameters>
        <return type="WebKit.WKNavigation"/>
        <sink argpos="0" kind="xss" resource="web"/>
      </method>
      <method name="loadRequest" signature="loadRequest(_ request: URLRequest)">
        <parameters>
          <param type="URLRequest"/>
        </parameters>
        <sink argpos="0" kind="xss" resource="web"/>
      </method>
    </class>


    <class kind="protocol" name="UIContentContainer" supertypes="NSObjectProtocol">
      <method name="viewWillTransition" signature="viewWillTransition(to: CGSize, with: UIViewControllerTransitionCoordinator)"/>
      <method name="willTransition" signature="willTransition(to: UITraitCollection, with: UIViewControllerTransitionCoordinator)"/>
      <method name="size" signature="size(forChildContentContainer: UIContentContainer, withParentContainerSize: CGSize)">
        <return type="CGSize"/>
      </method>
      <method name="preferredContentSizeDidChange" signature="preferredContentSizeDidChange(forChildContentContainer: UIContentContainer)"/>
      <method name="systemLayoutFittingSizeDidChange" signature="systemLayoutFittingSizeDidChange(forChildContentContainer: UIContentContainer)"/>
      <field name="preferredContentSize" type="CGSize"/>
    </class>


    <class name="UIFocusAnimationCoordinator" supertypes="NSObject">
      <method name="addCoordinatedFocusingAnimations" signature="addCoordinatedFocusingAnimations(((UIFocusAnimationContext) -&gt; Void)?, completion: (() -&gt; Void)? = nil)"/>
      <method name="addCoordinatedUnfocusingAnimations" signature="addCoordinatedUnfocusingAnimations(((UIFocusAnimationContext) -&gt; Void)?, completion: (() -&gt; Void)? = nil)"/>
      <method name="addCoordinatedAnimations" signature="addCoordinatedAnimations((() -&gt; Void)?, completion: (() -&gt; Void)? = nil)"/>
    </class>


    <class name="UIFocusDebugger" supertypes="NSObject"/>


    <class kind="protocol" name="UIFocusEnvironment" supertypes="NSObjectProtocol">
      <method name="setNeedsFocusUpdate" signature="setNeedsFocusUpdate()"/>
      <method name="updateFocusIfNeeded" signature="updateFocusIfNeeded()"/>
      <method name="shouldUpdateFocus" signature="shouldUpdateFocus(in: UIFocusUpdateContext)">
        <return type="Bool"/>
      </method>
      <method name="didUpdateFocus" signature="didUpdateFocus(in: UIFocusUpdateContext, with: UIFocusAnimationCoordinator)"/>
      <field name="preferredFocusEnvironments" type="[UIFocusEnvironment]"/>
      <field name="preferredFocusedView" type="UIView?"/>
      <method name="contains" signature="contains(UIFocusEnvironment)">
        <return type="Bool"/>
      </method>
      <method name="soundIdentifierForFocusUpdate" signature="soundIdentifierForFocusUpdate(in: UIFocusUpdateContext)">
        <return type="UIFocusSoundIdentifier?"/>
      </method>
    </class>


    <class name="UIFocusGuide" supertypes="UILayoutGuide">
      <field name="isEnabled" type="Bool"/>
      <field name="preferredFocusEnvironments" type="[UIFocusEnvironment]!"/>
      <field name="preferredFocusedView" type="UIView?"/>
    </class>


    <class kind="protocol" name="UIFocusItem" supertypes="UIFocusEnvironment">
      <field name="canBecomeFocused" type="Bool"/>
      <field name="isFocused" type="Bool"/>
    </class>


    <class name="UIFocusSystem" supertypes="NSObject"/>


    <class name="UIFocusUpdateContext" supertypes="NSObject">
      <field name="previouslyFocusedView" type="UIView?"/>
      <field name="nextFocusedView" type="UIView?"/>
      <field name="focusHeading" type="UIFocusHeading"/>
      <field name="previouslyFocusedItem" type="UIFocusItem?"/>
      <field name="nextFocusedItem" type="UIFocusItem?"/>
    </class>


    <class name="UINavigationController" supertypes="UIViewController">
      <constructor name="UINavigationController" signature="UINavigationController(rootViewController: UIViewController)"/>
      <constructor name="UINavigationController" signature="UINavigationController(navigationBarClass: AnyClass?, toolbarClass: AnyClass?)"/>
      <field name="delegate" type="UINavigationControllerDelegate?"/>
      <field name="topViewController" type="UIViewController?"/>
      <field name="visibleViewController" type="UIViewController?"/>
      <field name="viewControllers" type="[UIViewController]"/>
      <method name="setViewControllers" signature="setViewControllers([UIViewController], animated: Bool)"/>
      <method name="pushViewController" signature="pushViewController(UIViewController, animated: Bool)"/>
      <method name="popViewController" signature="popViewController(animated: Bool)">
        <return type="UIViewController?"/>
      </method>
      <method name="popToRootViewController" signature="popToRootViewController(animated: Bool)">
        <return type="[UIViewController]?"/>
      </method>
      <method name="popToViewController" signature="popToViewController(UIViewController, animated: Bool)">
        <return type="[UIViewController]?"/>
      </method>
      <field name="interactivePopGestureRecognizer" type="UIGestureRecognizer?"/>
      <field name="navigationBar" type="UINavigationBar"/>
      <method name="setNavigationBarHidden" signature="setNavigationBarHidden(Bool, animated: Bool)"/>
      <field name="toolbar" type="UIToolbar!"/>
      <method name="setToolbarHidden" signature="setToolbarHidden(Bool, animated: Bool)"/>
      <field name="isToolbarHidden" type="Bool"/>
      <field name="hidesBarsOnTap" type="Bool"/>
      <field name="hidesBarsOnSwipe" type="Bool"/>
      <field name="hidesBarsWhenVerticallyCompact" type="Bool"/>
      <field name="hidesBarsWhenKeyboardAppears" type="Bool"/>
      <field name="isNavigationBarHidden" type="Bool"/>
      <field name="barHideOnTapGestureRecognizer" type="UITapGestureRecognizer"/>
      <field name="barHideOnSwipeGestureRecognizer" type="UIPanGestureRecognizer"/>
      <method name="show" signature="show(UIViewController, sender: Any?)"/>
    </class>


    <class name="UINavigationItem" supertypes="NSObject">
      <constructor name="UINavigationItem" signature="UINavigationItem(title: String)"/>
      <constructor name="UINavigationItem" signature="UINavigationItem?(coder: NSCoder)"/>
      <field name="title" type="String?"/>
      <field name="largeTitleDisplayMode" type="UINavigationItem.LargeTitleDisplayMode"/>
      <field name="prompt" type="String?"/>
      <field name="backBarButtonItem" type="UIBarButtonItem?"/>
      <field name="hidesBackButton" type="Bool"/>
      <method name="setHidesBackButton" signature="setHidesBackButton(Bool, animated: Bool)"/>
      <field name="leftItemsSupplementBackButton" type="Bool"/>
      <field name="titleView" type="UIView?"/>
      <field name="leftBarButtonItems" type="[UIBarButtonItem]?"/>
      <field name="leftBarButtonItem" type="UIBarButtonItem?"/>
      <field name="rightBarButtonItems" type="[UIBarButtonItem]?"/>
      <field name="rightBarButtonItem" type="UIBarButtonItem?"/>
      <method name="setLeftBarButtonItems" signature="setLeftBarButtonItems([UIBarButtonItem]?, animated: Bool)"/>
      <method name="setLeftBarButton" signature="setLeftBarButton(UIBarButtonItem?, animated: Bool)"/>
      <method name="setRightBarButtonItems" signature="setRightBarButtonItems([UIBarButtonItem]?, animated: Bool)"/>
      <method name="setRightBarButton" signature="setRightBarButton(UIBarButtonItem?, animated: Bool)"/>
      <field name="searchController" type="UISearchController?"/>
      <field name="hidesSearchBarWhenScrolling" type="Bool"/>
    </class>


    <class kind="protocol" name="UIObjectRestoration">
      <method name="object" signature="object(withRestorationIdentifierPath: [String], coder: NSCoder)">
        <return type="UIStateRestoring?"/>
      </method>
    </class>


    <class name="UIPageViewController" supertypes="UIViewController">
      <constructor name="UIPageViewController" signature="UIPageViewController(transitionStyle: UIPageViewControllerTransitionStyle, navigationOrientation: UIPageViewControllerNavigationOrientation, options: [String : Any]? = nil)"/>
      <constructor name="UIPageViewController" signature="UIPageViewController?(coder: NSCoder)"/>
      <field name="dataSource" type="UIPageViewControllerDataSource?"/>
      <field name="delegate" type="UIPageViewControllerDelegate?"/>
      <method name="setViewControllers" signature="setViewControllers([UIViewController]?, direction: UIPageViewControllerNavigationDirection, animated: Bool, completion: ((Bool) -&gt; Void)? = nil)"/>
      <field name="viewControllers" type="[UIViewController]?"/>
      <field name="gestureRecognizers" type="[UIGestureRecognizer]"/>
      <field name="navigationOrientation" type="UIPageViewControllerNavigationOrientation"/>
      <field name="spineLocation" type="UIPageViewControllerSpineLocation"/>
      <field name="transitionStyle" type="UIPageViewControllerTransitionStyle"/>
      <field name="isDoubleSided" type="Bool"/>
    </class>


    <class name="UIPresentationController" supertypes="NSObject">
      <constructor name="UIPresentationController" signature="UIPresentationController(presentedViewController: UIViewController, presenting: UIViewController?)"/>
      <field name="delegate" type="UIAdaptivePresentationControllerDelegate?"/>
      <field name="presentingViewController" type="UIViewController"/>
      <field name="presentedViewController" type="UIViewController"/>
      <field name="containerView" type="UIView?"/>
      <field name="presentedView" type="UIView?"/>
      <field name="frameOfPresentedViewInContainerView" type="CGRect"/>
      <field name="overrideTraitCollection" type="UITraitCollection?"/>
      <method name="containerViewWillLayoutSubviews" signature="containerViewWillLayoutSubviews()"/>
      <method name="containerViewDidLayoutSubviews" signature="containerViewDidLayoutSubviews()"/>
      <method name="presentationTransitionWillBegin" signature="presentationTransitionWillBegin()"/>
      <method name="presentationTransitionDidEnd" signature="presentationTransitionDidEnd(Bool)"/>
      <method name="dismissalTransitionWillBegin" signature="dismissalTransitionWillBegin()"/>
      <method name="dismissalTransitionDidEnd" signature="dismissalTransitionDidEnd(Bool)"/>
      <field name="presentationStyle" type="UIModalPresentationStyle"/>
      <method name="adaptivePresentationStyle" signature="adaptivePresentationStyle(for: UITraitCollection)">
        <return type="UIModalPresentationStyle"/>
      </method>
      <field name="adaptivePresentationStyle" type="UIModalPresentationStyle"/>
      <field name="shouldPresentInFullscreen" type="Bool"/>
      <field name="shouldRemovePresentersView" type="Bool"/>
    </class>


    <class kind="protocol" name="UISearchBarDelegate" supertypes="UIBarPositioningDelegate">
      <method name="searchBar" signature="searchBar(UISearchBar, textDidChange: String)"/>
      <method name="searchBar" signature="searchBar(UISearchBar, shouldChangeTextIn: NSRange, replacementText: String)">
        <return type="Bool"/>
      </method>
      <method name="searchBarShouldBeginEditing" signature="searchBarShouldBeginEditing(UISearchBar)">
        <return type="Bool"/>
      </method>
      <method name="searchBarTextDidBeginEditing" signature="searchBarTextDidBeginEditing(UISearchBar)"/>
      <method name="searchBarShouldEndEditing" signature="searchBarShouldEndEditing(UISearchBar)">
        <return type="Bool"/>
      </method>
      <method name="searchBarTextDidEndEditing" signature="searchBarTextDidEndEditing(UISearchBar)"/>
      <method name="searchBarBookmarkButtonClicked" signature="searchBarBookmarkButtonClicked(UISearchBar)"/>
      <method name="searchBarCancelButtonClicked" signature="searchBarCancelButtonClicked(UISearchBar)"/>
      <method name="searchBarSearchButtonClicked" signature="searchBarSearchButtonClicked(UISearchBar)"/>
      <method name="searchBarResultsListButtonClicked" signature="searchBarResultsListButtonClicked(UISearchBar)"/>
      <method name="searchBar" signature="searchBar(UISearchBar, selectedScopeButtonIndexDidChange: Int)"/>
    </class>


    <class name="UISearchContainerViewController" supertypes="UIViewController">
      <constructor name="UISearchContainerViewController" signature="UISearchContainerViewController(searchController: UISearchController)"/>
      <field name="searchController" type="UISearchController"/>
    </class>


    <class name="UISearchController" supertypes="UIViewController">
      <constructor name="UISearchController" signature="UISearchController(searchResultsController: UIViewController?)"/>
      <field name="delegate" type="UISearchControllerDelegate?"/>
      <field name="searchBar" type="UISearchBar"/>
      <field name="searchResultsUpdater" type="UISearchResultsUpdating?"/>
      <field name="searchResultsController" type="UIViewController?"/>
      <field name="isActive" type="Bool"/>
      <field name="obscuresBackgroundDuringPresentation" type="Bool"/>
      <field name="dimsBackgroundDuringPresentation" type="Bool"/>
      <field name="hidesNavigationBarDuringPresentation" type="Bool"/>
    </class>


    <class kind="protocol" name="UISearchResultsUpdating" supertypes="NSObjectProtocol">
      <method name="updateSearchResults" signature="updateSearchResults(for: UISearchController)"/>
    </class>


    <class name="UISplitViewController" supertypes="UIViewController">
      <field name="delegate" type="UISplitViewControllerDelegate?"/>
      <field name="viewControllers" type="[UIViewController]"/>
      <field name="presentsWithGesture" type="Bool"/>
      <field name="preferredDisplayMode" type="UISplitViewControllerDisplayMode"/>
      <field name="displayMode" type="UISplitViewControllerDisplayMode"/>
      <field name="displayModeButtonItem" type="UIBarButtonItem"/>
      <field name="primaryEdge" type="UISplitViewControllerPrimaryEdge"/>
      <field name="isCollapsed" type="Bool"/>
      <field name="preferredPrimaryColumnWidthFraction" type="CGFloat"/>
      <field name="primaryColumnWidth" type="CGFloat"/>
      <field name="minimumPrimaryColumnWidth" type="CGFloat"/>
      <field name="maximumPrimaryColumnWidth" type="CGFloat"/>
      <method name="showDetailViewController" signature="showDetailViewController(UIViewController, sender: Any?)"/>
      <method name="show" signature="show(UIViewController, sender: Any?)"/>
    </class>


    <class kind="protocol" name="UIStateRestoring" supertypes="NSObjectProtocol">
      <field name="restorationParent" type="UIStateRestoring?"/>
      <field name="objectRestorationClass" type="UIObjectRestoration.Type?"/>
      <method name="encodeRestorableState" signature="encodeRestorableState(with: NSCoder)"/>
      <method name="decodeRestorableState" signature="decodeRestorableState(with: NSCoder)"/>
      <method name="applicationFinishedRestoringState" signature="applicationFinishedRestoringState()"/>
    </class>


    <class name="UITabBar" supertypes="UIView">
      <field name="delegate" type="UITabBarDelegate?"/>
      <field name="items" type="[UITabBarItem]?"/>
      <method name="setItems" signature="setItems([UITabBarItem]?, animated: Bool)"/>
      <field name="selectedItem" type="UITabBarItem?"/>
      <field name="barStyle" type="UIBarStyle"/>
      <field name="isTranslucent" type="Bool"/>
      <field name="barTintColor" type="UIColor?"/>
      <field name="tintColor" type="UIColor!"/>
      <field name="unselectedItemTintColor" type="UIColor?"/>
      <field name="backgroundImage" type="UIImage?"/>
      <field name="shadowImage" type="UIImage?"/>
      <field name="selectionIndicatorImage" type="UIImage?"/>
      <field name="itemPositioning" type="UITabBarItemPositioning"/>
      <field name="itemSpacing" type="CGFloat"/>
      <field name="itemWidth" type="CGFloat"/>
      <method name="beginCustomizingItems" signature="beginCustomizingItems([UITabBarItem])"/>
      <method name="endCustomizing" signature="endCustomizing(animated: Bool)">
        <return type="Bool"/>
      </method>
      <field name="isCustomizing" type="Bool"/>
      <field name="selectedImageTintColor" type="UIColor?"/>
    </class>


    <class name="UITabBarController" supertypes="UIViewController">
      <field name="delegate" type="UITabBarControllerDelegate?"/>
      <field name="tabBar" type="UITabBar"/>
      <field name="viewControllers" type="[UIViewController]?"/>
      <method name="setViewControllers" signature="setViewControllers([UIViewController]?, animated: Bool)"/>
      <field name="customizableViewControllers" type="[UIViewController]?"/>
      <field name="moreNavigationController" type="UINavigationController"/>
      <field name="selectedViewController" type="UIViewController?"/>
      <field name="selectedIndex" type="Int"/>
    </class>


    <class name="UIViewController" supertypes="UIResponder">
      <constructor name="UIViewController" signature="UIViewController(nibName: String?, bundle: Bundle?)"/>
      <constructor name="UIViewController" signature="UIViewController?(coder: NSCoder)"/>
      <field name="storyboard" type="UIStoryboard?"/>
      <method name="shouldPerformSegue" signature="shouldPerformSegue(withIdentifier: String, sender: Any?)">
        <return type="Bool"/>
      </method>
      <method name="prepare" signature="prepare(for: UIStoryboardSegue, sender: Any?)"/>
      <method name="performSegue" signature="performSegue(withIdentifier: String, sender: Any?)"/>
      <method name="allowedChildViewControllersForUnwinding" signature="allowedChildViewControllersForUnwinding(from: UIStoryboardUnwindSegueSource)">
        <return type="[UIViewController]"/>
      </method>
      <method name="childViewControllerContaining" signature="childViewControllerContaining(UIStoryboardUnwindSegueSource)">
        <return type="UIViewController?"/>
      </method>
      <method name="canPerformUnwindSegueAction" signature="canPerformUnwindSegueAction(Selector, from: UIViewController, withSender: Any)">
        <return type="Bool"/>
      </method>
      <method name="unwind" signature="unwind(for: UIStoryboardSegue, towardsViewController: UIViewController)"/>
      <field name="view" type="UIKit.UIView!"/>
      <field name="isViewLoaded" type="Bool"/>
      <method name="loadView" signature="loadView()"/>
      <method name="viewDidLoad" signature="viewDidLoad()"/>
      <method name="loadViewIfNeeded" signature="loadViewIfNeeded()"/>
      <field name="viewIfLoaded" type="UIView?"/>
      <field name="title" type="String?"/>
      <field name="preferredContentSize" type="CGSize"/>
      <field name="modalPresentationStyle" type="UIModalPresentationStyle"/>
      <field name="modalTransitionStyle" type="UIModalTransitionStyle"/>
      <field name="isModalInPopover" type="Bool"/>
      <method name="show" signature="show(UIViewController, sender: Any?)"/>
      <method name="showDetailViewController" signature="showDetailViewController(UIViewController, sender: Any?)"/>
      <method name="present" signature="present(UIViewController, animated: Bool, completion: (() -&gt; Void)? = nil)"/>
      <method name="dismiss" signature="dismiss(animated: Bool, completion: (() -&gt; Void)? = nil)"/>
      <field name="definesPresentationContext" type="Bool"/>
      <field name="providesPresentationContextTransitionStyle" type="Bool"/>
      <field name="disablesAutomaticKeyboardDismissal" type="Bool"/>
      <field name="transitioningDelegate" type="UIViewControllerTransitioningDelegate?"/>
      <field name="transitionCoordinator" type="UIViewControllerTransitionCoordinator?"/>
      <method name="targetViewController" signature="targetViewController(forAction: Selector, sender: Any?)">
        <return type="UIViewController?"/>
      </method>
      <field name="presentationController" type="UIPresentationController?"/>
      <field name="popoverPresentationController" type="UIPopoverPresentationController?"/>
      <field name="restoresFocusAfterTransition" type="Bool"/>
      <method name="viewWillAppear" signature="viewWillAppear(Bool)"/>
      <method name="viewDidAppear" signature="viewDidAppear(Bool)"/>
      <method name="viewWillDisappear" signature="viewWillDisappear(Bool)"/>
      <method name="viewDidDisappear" signature="viewDidDisappear(Bool)"/>
      <field name="isBeingDismissed" type="Bool"/>
      <field name="isBeingPresented" type="Bool"/>
      <field name="isMovingFromParentViewController" type="Bool"/>
      <field name="isMovingToParentViewController" type="Bool"/>
      <field name="additionalSafeAreaInsets" type="UIEdgeInsets"/>
      <method name="viewSafeAreaInsetsDidChange" signature="viewSafeAreaInsetsDidChange()"/>
      <field name="viewRespectsSystemMinimumLayoutMargins" type="Bool"/>
      <field name="systemMinimumLayoutMargins" type="NSDirectionalEdgeInsets"/>
      <method name="viewLayoutMarginsDidChange" signature="viewLayoutMarginsDidChange()"/>
      <field name="edgesForExtendedLayout" type="UIRectEdge"/>
      <field name="extendedLayoutIncludesOpaqueBars" type="Bool"/>
      <method name="viewWillLayoutSubviews" signature="viewWillLayoutSubviews()"/>
      <method name="viewDidLayoutSubviews" signature="viewDidLayoutSubviews()"/>
      <method name="updateViewConstraints" signature="updateViewConstraints()"/>
      <field name="shouldAutorotate" type="Bool"/>
      <field name="supportedInterfaceOrientations" type="UIInterfaceOrientationMask"/>
      <field name="preferredInterfaceOrientationForPresentation" type="UIInterfaceOrientation"/>
      <method name="collapseSecondaryViewController" signature="collapseSecondaryViewController(UIViewController, for: UISplitViewController)"/>
      <method name="separateSecondaryViewController" signature="separateSecondaryViewController(for: UISplitViewController)">
        <return type="UIViewController?"/>
      </method>
      <field name="preferredUserInterfaceStyle" type="UIUserInterfaceStyle"/>
      <field name="childViewControllerForUserInterfaceStyle" type="UIViewController?"/>
      <method name="setNeedsUserInterfaceAppearanceUpdate" signature="setNeedsUserInterfaceAppearanceUpdate()"/>
      <field name="childViewControllers" type="[UIViewController]"/>
      <method name="addChildViewController" signature="addChildViewController(UIViewController)"/>
      <method name="removeFromParentViewController" signature="removeFromParentViewController()"/>
      <method name="transition" signature="transition(from: UIViewController, to: UIViewController, duration: TimeInterval, options: UIViewAnimationOptions = [], animations: (() -&gt; Void)?, completion: ((Bool) -&gt; Void)? = nil)"/>
      <field name="shouldAutomaticallyForwardAppearanceMethods" type="Bool"/>
      <method name="beginAppearanceTransition" signature="beginAppearanceTransition(Bool, animated: Bool)"/>
      <method name="endAppearanceTransition" signature="endAppearanceTransition()"/>
      <method name="setOverrideTraitCollection" signature="setOverrideTraitCollection(UITraitCollection?, forChildViewController: UIViewController)"/>
      <method name="overrideTraitCollection" signature="overrideTraitCollection(forChildViewController: UIViewController)">
        <return type="UITraitCollection?"/>
      </method>
      <method name="willMove" signature="willMove(toParentViewController: UIViewController?)"/>
      <method name="didMove" signature="didMove(toParentViewController: UIViewController?)"/>
      <field name="presentingViewController" type="UIViewController?"/>
      <field name="presentedViewController" type="UIViewController?"/>
      <field name="parent" type="UIViewController?"/>
      <field name="navigationController" type="UINavigationController?"/>
      <field name="splitViewController" type="UISplitViewController?"/>
      <field name="tabBarController" type="UITabBarController?"/>
      <method name="didReceiveMemoryWarning" signature="didReceiveMemoryWarning()"/>
      <field name="restorationIdentifier" type="String?"/>
      <field name="restorationClass" type="UIViewControllerRestoration.Type?"/>
      <method name="encodeRestorableState" signature="encodeRestorableState(with: NSCoder)"/>
      <method name="decodeRestorableState" signature="decodeRestorableState(with: NSCoder)"/>
      <method name="applicationFinishedRestoringState" signature="applicationFinishedRestoringState()"/>
      <field name="extensionContext" type="NSExtensionContext?"/>
      <method name="registerForPreviewing" signature="registerForPreviewing(with: UIViewControllerPreviewingDelegate, sourceView: UIView)">
        <return type="UIViewControllerPreviewing"/>
      </method>
      <method name="unregisterForPreviewing" signature="unregisterForPreviewing(withContext: UIViewControllerPreviewing)"/>
      <field name="previewActionItems" type="[UIPreviewActionItem]"/>
      <method name="preferredScreenEdgesDeferringSystemGestures" signature="preferredScreenEdgesDeferringSystemGestures()"/>
      <method name="childViewControllerForScreenEdgesDeferringSystemGestures" signature="childViewControllerForScreenEdgesDeferringSystemGestures()"/>
      <method name="setNeedsUpdateOfScreenEdgesDeferringSystemGestures" signature="setNeedsUpdateOfScreenEdgesDeferringSystemGestures()"/>
      <field name="childViewControllerForStatusBarHidden" type="UIViewController?"/>
      <field name="childViewControllerForStatusBarStyle" type="UIViewController?"/>
      <field name="preferredStatusBarStyle" type="UIStatusBarStyle"/>
      <field name="prefersStatusBarHidden" type="Bool"/>
      <field name="modalPresentationCapturesStatusBarAppearance" type="Bool"/>
      <field name="preferredStatusBarUpdateAnimation" type="UIStatusBarAnimation"/>
      <method name="setNeedsStatusBarAppearanceUpdate" signature="setNeedsStatusBarAppearanceUpdate()"/>
      <method name="prefersHomeIndicatorAutoHidden" signature="prefersHomeIndicatorAutoHidden()">
        <return type="Bool"/>
      </method>
      <method name="childViewControllerForHomeIndicatorAutoHidden" signature="childViewControllerForHomeIndicatorAutoHidden()">
        <return type="UIViewController?"/>
      </method>
      <method name="setNeedsUpdateOfHomeIndicatorAutoHidden" signature="setNeedsUpdateOfHomeIndicatorAutoHidden()"/>
      <field name="navigationItem" type="UINavigationItem"/>
      <field name="hidesBottomBarWhenPushed" type="Bool"/>
      <method name="setToolbarItems" signature="setToolbarItems([UIBarButtonItem]?, animated: Bool)"/>
      <field name="toolbarItems" type="[UIBarButtonItem]?"/>
      <field name="tabBarItem" type="UITabBarItem!"/>
      <field name="isEditing" type="Bool"/>
      <method name="setEditing" signature="setEditing(Bool, animated: Bool)"/>
      <field name="editButtonItem" type="UIBarButtonItem"/>
      <method name="addKeyCommand" signature="addKeyCommand(UIKeyCommand)"/>
      <method name="removeKeyCommand" signature="removeKeyCommand(UIKeyCommand)"/>
      <field name="nibName" type="String?"/>
      <field name="nibBundle" type="Bundle?"/>
      <method name="rotatingHeaderView" signature="rotatingHeaderView()">
        <return type="UIView?"/>
      </method>
      <method name="rotatingFooterView" signature="rotatingFooterView()">
        <return type="UIView?"/>
      </method>
      <field name="interfaceOrientation" type="UIInterfaceOrientation"/>
      <method name="willRotate" signature="willRotate(to: UIInterfaceOrientation, duration: TimeInterval)"/>
      <method name="willAnimateRotation" signature="willAnimateRotation(to: UIInterfaceOrientation, duration: TimeInterval)"/>
      <method name="didRotate" signature="didRotate(from: UIInterfaceOrientation)"/>
      <field name="searchDisplayController" type="UISearchDisplayController?"/>
      <method name="shouldAutomaticallyForwardRotationMethods" signature="shouldAutomaticallyForwardRotationMethods()">
        <return type="Bool"/>
      </method>
      <method name="presentMoviePlayerViewControllerAnimated" signature="presentMoviePlayerViewControllerAnimated(MPMoviePlayerViewController!)"/>
      <method name="dismissMoviePlayerViewControllerAnimated" signature="dismissMoviePlayerViewControllerAnimated()"/>
      <method name="forUnwindSegueAction" signature="forUnwindSegueAction(Selector, from: UIViewController, withSender: Any?)">
        <return type="UIViewController?"/>
      </method>
      <method name="segueForUnwinding" signature="segueForUnwinding(to: UIViewController, from: UIViewController, identifier: String?)">
        <return type="UIStoryboardSegue?"/>
      </method>
      <field name="bottomLayoutGuide" type="UILayoutSupport"/>
      <field name="topLayoutGuide" type="UILayoutSupport"/>
      <field name="automaticallyAdjustsScrollViewInsets" type="Bool"/>
      <field name="canDisplayBannerAds" type="Bool"/>
      <field name="originalContentView" type="UIView?"/>
      <field name="isPresentingFullScreenAd" type="Bool"/>
      <field name="isDisplayingBannerAd" type="Bool"/>
      <field name="interstitialPresentationPolicy" type="ADInterstitialPresentationPolicy"/>
      <method name="requestInterstitialAdPresentation" signature="requestInterstitialAdPresentation()">
        <return type="Bool"/>
      </method>
      <field name="shouldPresentInterstitialAd" type="Bool"/>
    </class>


    <class kind="protocol" name="UIViewControllerRestoration">
      <method name="viewController" signature="viewController(withRestorationIdentifierPath: [Any], coder: NSCoder)">
        <return type="UIViewController?"/>
      </method>
    </class>




    <class name="UIActivity" supertypes="NSObject">
      <field name="activityType" type="UIActivityType?"/>
      <field name="activityTitle" type="String?"/>
      <field name="activityImage" type="UIImage?"/>
      <method name="canPerform" signature="canPerform(withActivityItems: [Any])">
        <return type="Bool"/>
      </method>
      <method name="prepare" signature="prepare(withActivityItems: [Any])"/>
      <field name="activityViewController" type="UIViewController?"/>
      <method name="perform" signature="perform()"/>
      <method name="activityDidFinish" signature="activityDidFinish(Bool)"/>
    </class>


    <class kind="protocol" name="UIActivityItemSource" supertypes="NSObjectProtocol">
      <method name="activityViewControllerPlaceholderItem" signature="activityViewControllerPlaceholderItem(UIActivityViewController)">
        <return type="Any"/>
      </method>
      <method name="activityViewController" signature="activityViewController(UIActivityViewController, itemForActivityType: UIActivityType?)">
        <return type="Any?"/>
      </method>
      <method name="activityViewController" signature="activityViewController(UIActivityViewController, subjectForActivityType: UIActivityType?)">
        <return type="String"/>
      </method>
      <method name="activityViewController" signature="activityViewController(UIActivityViewController, dataTypeIdentifierForActivityType: UIActivityType?)">
        <return type="String"/>
      </method>
      <method name="activityViewController" signature="activityViewController(UIActivityViewController, thumbnailImageForActivityType: UIActivityType?, suggestedSize: CGSize)">
        <return type="UIImage?"/>
      </method>
    </class>


    <class name="UIActivityViewController" supertypes="UIViewController">
      <constructor name="UIActivityViewController" signature="UIActivityViewController(activityItems: [Any], applicationActivities: [UIActivity]?)"/>
      <field name="completionWithItemsHandler" type="UIActivityViewControllerCompletionWithItemsHandler?"/>
      <field name="completionHandler" type="UIActivityViewControllerCompletionHandler?"/>
      <field name="excludedActivityTypes" type="[UIActivityType]?"/>
    </class>


    <class name="UICloudSharingController" supertypes="UIViewController">
      <constructor name="UICloudSharingController" signature="UICloudSharingController(preparationHandler: (UICloudSharingController, (CKShare?, CKContainer?, Error?) -&gt; Void) -&gt; Void)"/>
      <constructor name="UICloudSharingController" signature="UICloudSharingController(share: CKShare, container: CKContainer)"/>
      <field name="delegate" type="UICloudSharingControllerDelegate?"/>
      <field name="availablePermissions" type="UICloudSharingPermissionOptions"/>
      <field name="share" type="CKShare?"/>
      <method name="activityItemSource" signature="activityItemSource()"/>
    </class>


    <class name="UIDocumentBrowserViewController" supertypes="UIViewController">
      <constructor name="UIDocumentBrowserViewController" signature="UIDocumentBrowserViewController(forOpeningFilesWithContentTypes: [String]?)"/>
      <field name="delegate" type="UIDocumentBrowserViewControllerDelegate?"/>
      <method name="importDocument" signature="importDocument(at: URL, nextToDocumentAt: URL, mode: UIDocumentBrowserViewController.ImportMode, completionHandler: (URL?, Error?) -&gt; Void)"/>
      <field name="allowedContentTypes" type="[String]"/>
      <field name="allowsDocumentCreation" type="Bool"/>
      <field name="allowsPickingMultipleItems" type="Bool"/>
      <method name="revealDocument" signature="revealDocument(at: URL, importIfNeeded: Bool, completion: ((URL?, Error?) -&gt; Void)? = nil)"/>
      <field name="browserUserInterfaceStyle" type="UIDocumentBrowserViewController.BrowserUserInterfaceStyle"/>
      <field name="additionalLeadingNavigationBarButtonItems" type="[UIBarButtonItem]"/>
      <field name="additionalTrailingNavigationBarButtonItems" type="[UIBarButtonItem]"/>
      <field name="customActions" type="[UIDocumentBrowserAction]"/>
      <method name="transitionController" signature="transitionController(forDocumentURL: URL)">
        <return type="UIDocumentBrowserTransitionController"/>
      </method>
    </class>


    <class name="UIDocumentInteractionController" supertypes="NSObject">
      <constructor name="UIDocumentInteractionController" signature="UIDocumentInteractionController(url: URL)"/>
      <field name="delegate" type="UIDocumentInteractionControllerDelegate?"/>
      <method name="presentPreview" signature="presentPreview(animated: Bool)">
        <return type="Bool"/>
      </method>
      <method name="dismissPreview" signature="dismissPreview(animated: Bool)"/>
      <method name="presentOptionsMenu" signature="presentOptionsMenu(from: CGRect, in: UIView, animated: Bool)">
        <return type="Bool"/>
      </method>
      <method name="presentOptionsMenu" signature="presentOptionsMenu(from: UIBarButtonItem, animated: Bool)">
        <return type="Bool"/>
      </method>
      <method name="presentOpenInMenu" signature="presentOpenInMenu(from: CGRect, in: UIView, animated: Bool)">
        <return type="Bool"/>
      </method>
      <method name="presentOpenInMenu" signature="presentOpenInMenu(from: UIBarButtonItem, animated: Bool)">
        <return type="Bool"/>
      </method>
      <method name="dismissMenu" signature="dismissMenu(animated: Bool)"/>
      <field name="url" type="URL?"/>
      <field name="uti" type="String?"/>
      <field name="name" type="String?"/>
      <field name="icons" type="[UIImage]"/>
      <field name="annotation" type="Any?"/>
      <field name="gestureRecognizers" type="[UIGestureRecognizer]"/>
    </class>


    <class name="UIDocumentPickerViewController" supertypes="UIViewController">
      <constructor name="UIDocumentPickerViewController" signature="UIDocumentPickerViewController(documentTypes: [String], in: UIDocumentPickerMode)"/>
      <constructor name="UIDocumentPickerViewController" signature="UIDocumentPickerViewController(url: URL, in: UIDocumentPickerMode)"/>
      <constructor name="UIDocumentPickerViewController" signature="UIDocumentPickerViewController?(coder: NSCoder)"/>
      <field name="delegate" type="UIDocumentPickerDelegate?"/>
      <field name="allowsMultipleSelection" type="Bool"/>
      <field name="documentPickerMode" type="UIDocumentPickerMode"/>
      <constructor name="UIDocumentPickerViewController" signature="UIDocumentPickerViewController(urls: [URL], in: UIDocumentPickerMode)"/>
    </class>


    <class kind="protocol" name="UIDragAnimating" supertypes="NSObjectProtocol">
      <method name="addAnimations" signature="addAnimations(() -&gt; Void)"/>
      <method name="addCompletion" signature="addCompletion((UIViewAnimatingPosition) -&gt; Void)"/>
    </class>


    <class kind="protocol" name="UIDragDropSession" supertypes="NSObjectProtocol">
      <method name="canLoadObjects" signature="canLoadObjects(ofClass: NSItemProviderReading.Type)">
        <return type="Bool"/>
      </method>
      <method name="hasItemsConforming" signature="hasItemsConforming(toTypeIdentifiers: [String])">
        <return type="Bool"/>
      </method>
      <field name="items" type="[UIDragItem]"/>
      <field name="allowsMoveOperation" type="Bool"/>
      <field name="isRestrictedToDraggingApplication" type="Bool"/>
      <method name="location" signature="location(in: UIView)">
        <return type="CGPoint"/>
      </method>
    </class>


    <class name="UIDragInteraction" supertypes="NSObject">
      <constructor name="UIDragInteraction" signature="UIDragInteraction(delegate: UIDragInteractionDelegate)"/>
      <field name="allowsSimultaneousRecognitionDuringLift" type="Bool"/>
      <field name="delegate" type="UIDragInteractionDelegate?"/>
      <field name="isEnabled" type="Bool"/>
    </class>


    <class kind="protocol" name="UIDragInteractionDelegate" supertypes="NSObjectProtocol">
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, itemsForBeginning: UIDragSession)">
        <return type="[UIDragItem]"/>
      </method>
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, itemsForAddingTo: UIDragSession, withTouchAt: CGPoint)">
        <return type="[UIDragItem]"/>
      </method>
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, sessionForAddingItems: [UIDragSession], withTouchAt: CGPoint)">
        <return type="UIDragSession?"/>
      </method>
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, willAnimateLiftWith: UIDragAnimating, session: UIDragSession)"/>
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, item: UIDragItem, willAnimateCancelWith: UIDragAnimating)"/>
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, sessionWillBegin: UIDragSession)"/>
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, session: UIDragSession, willAdd: [UIDragItem], for: UIDragInteraction)"/>
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, sessionDidMove: UIDragSession)"/>
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, session: UIDragSession, willEndWith: UIDropOperation)"/>
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, session: UIDragSession, didEndWith: UIDropOperation)"/>
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, sessionDidTransferItems: UIDragSession)"/>
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, previewForLifting: UIDragItem, session: UIDragSession)">
        <return type="UITargetedDragPreview?"/>
      </method>
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, previewForCancelling: UIDragItem, withDefault: UITargetedDragPreview)">
        <return type="UITargetedDragPreview?"/>
      </method>
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, prefersFullSizePreviewsFor: UIDragSession)">
        <return type="Bool"/>
      </method>
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, sessionIsRestrictedToDraggingApplication: UIDragSession)">
        <return type="Bool"/>
      </method>
      <method name="dragInteraction" signature="dragInteraction(UIDragInteraction, sessionAllowsMoveOperation: UIDragSession)">
        <return type="Bool"/>
      </method>
    </class>


    <class name="UIDragItem" supertypes="NSObject">
      <constructor name="UIDragItem" signature="UIDragItem(itemProvider: NSItemProvider)"/>
      <field name="itemProvider" type="NSItemProvider"/>
      <field name="localObject" type="Any?"/>
      <field name="previewProvider" type="UIDragPreview?)?"/>
    </class>


    <class name="UIDragPreview" supertypes="NSObject">
      <constructor name="UIDragPreview" signature="UIDragPreview(view: UIView)"/>
      <constructor name="UIDragPreview" signature="UIDragPreview(view: UIView, parameters: UIDragPreviewParameters)"/>
      <constructor name="UIDragPreview" signature="UIDragPreview(for: URL)"/>
      <constructor name="UIDragPreview" signature="UIDragPreview(for: URL, title: String?)"/>
      <field name="parameters" type="UIDragPreviewParameters"/>
      <field name="view" type="UIView"/>
    </class>


    <class name="UIDragPreviewParameters" supertypes="NSObject">
      <constructor name="UIDragPreviewParameters" signature="UIDragPreviewParameters()"/>
      <constructor name="UIDragPreviewParameters" signature="UIDragPreviewParameters(textLineRects: [NSValue])"/>
      <field name="visiblePath" type="UIBezierPath?"/>
      <field name="backgroundColor" type="UIColor!"/>
    </class>


    <class name="UIDragPreviewTarget" supertypes="NSObject">
      <constructor name="UIDragPreviewTarget" signature="UIDragPreviewTarget(container: UIView, center: CGPoint)"/>
      <constructor name="UIDragPreviewTarget" signature="UIDragPreviewTarget(container: UIView, center: CGPoint, transform: CGAffineTransform)"/>
      <field name="center" type="CGPoint"/>
      <field name="container" type="UIView"/>
      <field name="transform" type="CGAffineTransform"/>
    </class>


    <class kind="protocol" name="UIDragSession" supertypes="UIDragDropSession">
      <field name="localContext" type="Any?"/>
    </class>


    <class name="UIDropInteraction" supertypes="NSObject">
      <constructor name="UIDropInteraction" signature="UIDropInteraction(delegate: UIDropInteractionDelegate)"/>
      <field name="delegate" type="UIDropInteractionDelegate?"/>
      <field name="allowsSimultaneousDropSessions" type="Bool"/>
    </class>


    <class kind="protocol" name="UIDropInteractionDelegate" supertypes="NSObjectProtocol">
      <method name="dropInteraction" signature="dropInteraction(UIDropInteraction, canHandle: UIDropSession)">
        <return type="Bool"/>
      </method>
      <method name="dropInteraction" signature="dropInteraction(UIDropInteraction, performDrop: UIDropSession)"/>
      <method name="dropInteraction" signature="dropInteraction(UIDropInteraction, sessionDidEnter: UIDropSession)"/>
      <method name="dropInteraction" signature="dropInteraction(UIDropInteraction, sessionDidUpdate: UIDropSession)">
        <return type="UIDropProposal"/>
      </method>
      <method name="dropInteraction" signature="dropInteraction(UIDropInteraction, sessionDidExit: UIDropSession)"/>
      <method name="dropInteraction" signature="dropInteraction(UIDropInteraction, sessionDidEnd: UIDropSession)"/>
      <method name="dropInteraction" signature="dropInteraction(UIDropInteraction, item: UIDragItem, willAnimateDropWith: UIDragAnimating)"/>
      <method name="dropInteraction" signature="dropInteraction(UIDropInteraction, previewForDropping: UIDragItem, withDefault: UITargetedDragPreview)">
        <return type="UITargetedDragPreview?"/>
      </method>
      <method name="dropInteraction" signature="dropInteraction(UIDropInteraction, concludeDrop: UIDropSession)"/>
    </class>


    <class kind="enum" name="UIDropOperation"/>


    <class name="UIDropProposal" supertypes="NSObject">
      <constructor name="UIDropProposal" signature="UIDropProposal(operation: UIDropOperation)"/>
      <field name="operation" type="UIDropOperation"/>
      <field name="isPrecise" type="Bool"/>
      <field name="prefersFullSizePreview" type="Bool"/>
    </class>


    <class kind="protocol" name="UIDropSession" supertypes="NSProgressReporting, UIDragDropSession">
      <field name="localDragSession" type="UIDragSession?"/>
      <method name="loadObjects" signature="loadObjects(ofClass: NSItemProviderReading.Type, completion: ([NSItemProviderReading]) -&gt; Void)">
        <return type="Progress"/>
      </method>
      <field name="progressIndicatorStyle" type="UIDropSessionProgressIndicatorStyle"/>
    </class>


    <class kind="enum" name="UIDropSessionProgressIndicatorStyle"/>


    <class name="UIImagePickerController" supertypes="UINavigationController">
      <field name="delegate" type="UINavigationControllerDelegate)?"/>
      <field name="sourceType" type="UIImagePickerControllerSourceType"/>
      <field name="mediaTypes" type="[String]"/>
      <field name="allowsEditing" type="Bool"/>
      <field name="videoQuality" type="UIImagePickerControllerQualityType"/>
      <field name="videoMaximumDuration" type="TimeInterval"/>
      <field name="showsCameraControls" type="Bool"/>
      <field name="cameraOverlayView" type="UIView?"/>
      <field name="cameraViewTransform" type="CGAffineTransform"/>
      <method name="takePicture" signature="takePicture()"/>
      <method name="startVideoCapture" signature="startVideoCapture()">
        <return type="Bool"/>
      </method>
      <method name="stopVideoCapture" signature="stopVideoCapture()"/>
      <field name="cameraDevice" type="UIImagePickerControllerCameraDevice"/>
      <field name="cameraCaptureMode" type="UIImagePickerControllerCameraCaptureMode"/>
      <field name="cameraFlashMode" type="UIImagePickerControllerCameraFlashMode"/>
      <field name="imageExportPreset" type="UIImagePickerControllerImageURLExportPreset"/>
      <field name="videoExportPreset" type="String"/>
    </class>


    <class kind="protocol" name="UIInteraction" supertypes="NSObjectProtocol">
      <field name="view" type="UIView?"/>
      <method name="didMove" signature="didMove(to: UIView?)"/>
      <method name="willMove" signature="willMove(to: UIView?)"/>
    </class>


    <class name="UIPrinterPickerController" supertypes="NSObject">
      <constructor name="UIPrinterPickerController" signature="UIPrinterPickerController(initiallySelectedPrinter: UIPrinter?)"/>
      <field name="delegate" type="UIPrinterPickerControllerDelegate?"/>
      <method name="present" signature="present(animated: Bool, completionHandler: UIPrinterPickerCompletionHandler? = nil)">
        <return type="Bool"/>
      </method>
      <method name="present" signature="present(from: UIBarButtonItem, animated: Bool, completionHandler: UIPrinterPickerCompletionHandler? = nil)">
        <return type="Bool"/>
      </method>
      <method name="present" signature="present(from: CGRect, in: UIView, animated: Bool, completionHandler: UIPrinterPickerCompletionHandler? = nil)">
        <return type="Bool"/>
      </method>
      <method name="dismiss" signature="dismiss(animated: Bool)"/>
      <field name="selectedPrinter" type="UIPrinter?"/>
    </class>


    <class kind="protocol" name="UIPrinterPickerControllerDelegate" supertypes="NSObjectProtocol">
      <method name="printerPickerController" signature="printerPickerController(UIPrinterPickerController, shouldShow: UIPrinter)">
        <return type="Bool"/>
      </method>
      <method name="printerPickerControllerDidSelectPrinter" signature="printerPickerControllerDidSelectPrinter(UIPrinterPickerController)"/>
      <method name="printerPickerControllerParentViewController" signature="printerPickerControllerParentViewController(UIPrinterPickerController)">
        <return type="UIViewController?"/>
      </method>
      <method name="printerPickerControllerWillPresent" signature="printerPickerControllerWillPresent(UIPrinterPickerController)"/>
      <method name="printerPickerControllerDidPresent" signature="printerPickerControllerDidPresent(UIPrinterPickerController)"/>
      <method name="printerPickerControllerWillDismiss" signature="printerPickerControllerWillDismiss(UIPrinterPickerController)"/>
      <method name="printerPickerControllerDidDismiss" signature="printerPickerControllerDidDismiss(UIPrinterPickerController)"/>
    </class>


    <class name="UIReferenceLibraryViewController" supertypes="UIViewController">
      <constructor name="UIReferenceLibraryViewController" signature="UIReferenceLibraryViewController(term: String)"/>
      <constructor name="UIReferenceLibraryViewController" signature="UIReferenceLibraryViewController(coder: NSCoder)"/>
    </class>


    <class name="UISpringLoadedInteraction" supertypes="NSObject">
      <constructor name="UISpringLoadedInteraction" signature="UISpringLoadedInteraction(interactionBehavior: UISpringLoadedInteractionBehavior?, interactionEffect: UISpringLoadedInteractionEffect?, activationHandler: (UISpringLoadedInteraction, UISpringLoadedInteractionContext) -&gt; Void)"/>
      <constructor name="UISpringLoadedInteraction" signature="UISpringLoadedInteraction(activationHandler: (UISpringLoadedInteraction, UISpringLoadedInteractionContext) -&gt; Void)"/>
      <field name="interactionBehavior" type="UISpringLoadedInteractionBehavior"/>
      <field name="interactionEffect" type="UISpringLoadedInteractionEffect"/>
    </class>


    <class kind="protocol" name="UISpringLoadedInteractionBehavior" supertypes="NSObjectProtocol">
      <method name="shouldAllow" signature="shouldAllow(UISpringLoadedInteraction, with: UISpringLoadedInteractionContext)">
        <return type="Bool"/>
      </method>
      <method name="interactionDidFinish" signature="interactionDidFinish(UISpringLoadedInteraction)"/>
    </class>


    <class kind="protocol" name="UISpringLoadedInteractionContext" supertypes="NSObjectProtocol">
      <field name="state" type="UISpringLoadedInteractionEffectState"/>
      <field name="targetItem" type="Any?"/>
      <field name="targetView" type="UIView?"/>
      <method name="location" signature="location(in: UIView?)">
        <return type="CGPoint"/>
      </method>
    </class>


    <class kind="protocol" name="UISpringLoadedInteractionEffect" supertypes="NSObjectProtocol">
      <method name="interaction" signature="interaction(UISpringLoadedInteraction, didChangeWith: UISpringLoadedInteractionContext)"/>
    </class>


    <class kind="protocol" name="UISpringLoadedInteractionSupporting" supertypes="NSObjectProtocol">
      <field name="isSpringLoaded" type="Bool"/>
    </class>


    <class name="UITargetedDragPreview" supertypes="NSObject">
      <constructor name="UITargetedDragPreview" signature="UITargetedDragPreview(view: UIView)"/>
      <constructor name="UITargetedDragPreview" signature="UITargetedDragPreview(view: UIView, parameters: UIDragPreviewParameters)"/>
      <constructor name="UITargetedDragPreview" signature="UITargetedDragPreview(view: UIView, parameters: UIDragPreviewParameters, target: UIDragPreviewTarget)"/>
      <constructor name="UITargetedDragPreview" signature="UITargetedDragPreview(for: URL, target: UIDragPreviewTarget)"/>
      <constructor name="UITargetedDragPreview" signature="UITargetedDragPreview(for: URL, title: String?, target: UIDragPreviewTarget)"/>
      <field name="parameters" type="UIDragPreviewParameters"/>
      <field name="size" type="CGSize"/>
      <field name="target" type="UIDragPreviewTarget"/>
      <field name="view" type="UIView"/>
      <method name="retargetedPreview" signature="retargetedPreview(with: UIDragPreviewTarget)">
        <return type="UITargetedDragPreview"/>
      </method>
    </class>


    <class name="UIVideoEditorController" supertypes="UINavigationController">
      <field name="delegate" type="UIVideoEditorControllerDelegate)?"/>
      <field name="videoMaximumDuration" type="TimeInterval"/>
      <field name="videoPath" type="String"/>
      <field name="videoQuality" type="UIImagePickerControllerQualityType"/>
    </class>


    <class kind="protocol" name="UIVideoEditorControllerDelegate" supertypes="NSObjectProtocol">
      <method name="videoEditorController" signature="videoEditorController(UIVideoEditorController, didSaveEditedVideoToPath: String)"/>
      <method name="videoEditorControllerDidCancel" signature="videoEditorControllerDidCancel(UIVideoEditorController)"/>
      <method name="videoEditorController" signature="videoEditorController(UIVideoEditorController, didFailWithError: Error)"/>
    </class>

    <class name="UIWindow" supertypes="UIView">
      <field name="UIKeyboardDidChangeFrame" type="NSNotification.Name"/>
      <field name="UIKeyboardDidHide" type="NSNotification.Name"/>
      <field name="UIKeyboardDidShow" type="NSNotification.Name"/>
      <field name="UIKeyboardWillChangeFrame" type="NSNotification.Name"/>
      <field name="UIKeyboardWillHide" type="NSNotification.Name"/>
      <field name="UIKeyboardWillShow" type="NSNotification.Name"/>
      <field name="UIWindowDidBecomeHidden" type="NSNotification.Name"/>
      <field name="UIWindowDidBecomeKey" type="NSNotification.Name"/>
      <field name="UIWindowDidBecomeVisible" type="NSNotification.Name"/>
      <field name="UIWindowDidResignKey" type="NSNotification.Name"/>
      <field name="avDisplayManager" type="AVDisplayManager"/>
      <method name="becomeKey" signature="becomeKey()"/>
      <method name="convert" signature="convert(CGPoint, to: UIWindow?)">
        <parameters>
          <param name="" type="CGPoint"/>
          <param name="to" type="UIWindow?"/>
        </parameters>
        <return type="CGPoint"/>
      </method>
      <method name="convert" signature="convert(CGPoint, from: UIWindow?)">
        <parameters>
          <param name="" type="CGPoint"/>
          <param name="from" type="UIWindow?"/>
        </parameters>
        <return type="CGPoint"/>
      </method>
      <method name="convert" signature="convert(CGRect, to: UIWindow?)">
        <parameters>
          <param name="" type="CGRect"/>
          <param name="to" type="UIWindow?"/>
        </parameters>
        <return type="CGRect"/>
      </method>
      <method name="convert" signature="convert(CGRect, from: UIWindow?)">
        <parameters>
          <param name="" type="CGRect"/>
          <param name="from" type="UIWindow?"/>
        </parameters>
        <return type="CGRect"/>
      </method>
      <field name="isKeyWindow" type="Bool"/>
      <method name="makeKey" signature="makeKey()"/>
      <method name="makeKeyAndVisible" signature="makeKeyAndVisible()"/>
      <method name="resignKey" signature="resignKey()"/>
      <field name="rootViewController" type="UIKit.UIViewController?"/>
      <field name="screen" type="UIScreen"/>
      <method name="sendEvent" signature="sendEvent(UIEvent)">
        <parameters>
          <param name="" type="UIEvent"/>
        </parameters>
      </method>
      <field name="windowLevel" type="UIWindowLevel"/>
    </class>

  </module>
</library>