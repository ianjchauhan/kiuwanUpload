<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.optimyth.com/schema/definitions/library_metadata"
         technology="swift" name="crypto" standard="swift">

  <module name="CommonCrypto" >
    <description url="https://github.com/soffes/CommonCrypto">CommonCrypto wrapper for Swift</description>

    <class name="Digest"/>

    <function name="CC_MD2_Init" signature="CC_MD2_Init(CC_MD2_CTX *c)">
      <tags>algo:md2</tags>
      <parameters>
        <param type="CC_MD2_CTX"/>
      </parameters>
    </function>

    <function name="CC_MD2_Update" signature="CC_MD2_Update(CC_MD2_CTX *c, const void *data, CC_LONG len)">
      <tags>algo:md2</tags>
      <parameters>
        <param type="CC_MD2_CTX"/>
        <param type="void"/>
        <param type="CC_LONG"/>
      </parameters>
    </function>

    <function name="CC_MD2_Final" signature="CC_MD2_Final(unsigned char *md, CC_MD2_CTX *c)">
      <tags>algo:md2</tags>
      <parameters>
        <param type="char"/>
        <param type="CC_MD2_CTX"/>
      </parameters>
    </function>

    <function name="CC_MD2" signature="CC_MD2(const void *data, CC_LONG len, unsigned char *md)">
      <tags>algo:md2</tags>
      <parameters>
        <param type="void"/>
        <param type="CC_LONG"/>
        <param type="char"/>
      </parameters>
    </function>

    <function name="CC_MD4_Init" signature="CC_MD4_Init(CC_MD4_CTX *c)">
      <tags>algo:md4</tags>
      <parameters>
        <param type="CC_MD4_CTX"/>
      </parameters>
    </function>

    <function name="CC_MD4_Update" signature="CC_MD4_Update(CC_MD4_CTX *c, const void *data, CC_LONG len)">
      <tags>algo:md4</tags>
      <parameters>
        <param type="CC_MD4_CTX"/>
        <param type="void"/>
        <param type="CC_LONG"/>
      </parameters>
    </function>

    <function name="CC_MD4_Final" signature="CC_MD4_Final(unsigned char *md, CC_MD4_CTX *c)">
      <tags>algo:md4</tags>
      <parameters>
        <param type="char"/>
        <param type="CC_MD4_CTX"/>
      </parameters>
    </function>

    <function name="CC_MD4" signature="CC_MD4(const void *data, CC_LONG len, unsigned char *md)">
      <tags>algo:md4</tags>
      <parameters>
        <param type="void"/>
        <param type="CC_LONG"/>
        <param type="char"/>
      </parameters>
    </function>

    <function name="CC_MD5_Init" signature="CC_MD5_Init(CC_MD5_CTX *c)">
      <tags>algo:md5</tags>
      <parameters>
        <param type="CC_MD5_CTX"/>
      </parameters>
    </function>

    <function name="CC_MD5_Update" signature="CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)">
      <tags>algo:md5</tags>
      <parameters>
        <param type="CC_MD5_CTX"/>
        <param type="void"/>
        <param type="CC_LONG"/>
      </parameters>
    </function>

    <function name="CC_MD5_Final" signature="CC_MD5_Final(unsigned char *md, CC_MD5_CTX *c)">
      <tags>algo:md5</tags>
      <parameters>
        <param type="char"/>
        <param type="CC_MD5_CTX"/>
      </parameters>
    </function>

    <function name="CC_MD5" signature="CC_MD5(const void *data, CC_LONG len, unsigned char *md)">
      <tags>algo:md5</tags>
      <parameters>
        <param type="void"/>
        <param type="CC_LONG"/>
        <param type="char"/>
      </parameters>
    </function>

    <function name="CC_SHA1_Init" signature="CCC_SHA1_Init(CC_SHA1_CTX *c)">
      <tags>algo:sha1</tags>
      <parameters>
        <param type="CC_SHA1_CTX"/>
      </parameters>
    </function>

    <function name="CC_SHA1_Update" signature="CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)">
      <tags>algo:sha1</tags>
      <parameters>
        <param type="CC_SHA1_CTX"/>
        <param type="void"/>
        <param type="CC_LONG"/>
      </parameters>
    </function>

    <function name="CC_SHA1_Final" signature="CC_SHA1_Final(unsigned char *md, CC_SHA1_CTX *c)">
      <tags>algo:sha1</tags>
      <parameters>
        <param type="char"/>
        <param type="CC_SHA1_CTX"/>
      </parameters>
    </function>

    <function name="CC_SHA1" signature="CC_SHA1(const void *data, CC_LONG len, unsigned char *md)">
      <tags>algo:sha1</tags>
      <parameters>
        <param type="void"/>
        <param type="CC_LONG"/>
        <param type="char"/>
      </parameters>
    </function>

    <function name="CC_SHA224" signature="CC_SHA224(const void *data, CC_LONG len, unsigned char *md)">
      <tags>algo:sha224</tags>
      <parameters>
        <param type="void"/>
        <param type="CC_LONG"/>
        <param type="char"/>
      </parameters>
    </function>

    <function name="CC_SHA384" signature="CC_SHA384(const void *data, CC_LONG len, unsigned char *md)">
      <tags>algo:sha1</tags>
      <parameters>
        <param type="void"/>
        <param type="CC_LONG"/>
        <param type="char"/>
      </parameters>
    </function>

    <function name="CC_SHA512" signature="CC_SHA512(const void *data, CC_LONG len, unsigned char *md)">
      <tags>algo:sha512</tags>
      <parameters>
        <param type="void"/>
        <param type="CC_LONG"/>
        <param type="char"/>
      </parameters>
    </function>

    <function name="CCCryptorCreate" signature="CCCryptorCreate(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef)">
      <tags>algo:1,kCCAlgorithmDES:des,kCCAlgorithmCAST:cast,kCCAlgorithmRC4:rc4,kCCAlgorithmRC2:rc2,weak_initialization_vector:5,weak_key:3,weak_key_size:4</tags>
      <parameters>
        <param type="CCOperation"/>
        <param type="CCAlgorithm"/>
        <param type="CCOptions"/>
        <param type="void"/>
        <param type="size_t"/>
        <param type="void"/>
        <param type="CCCryptorRef"/>
      </parameters>
      <sink argpos="2" kind="weak_mode" resource="crypto" />
      <sink argpos="3" kind="weak_key" resource="crypto" />
      <sink argpos="4" kind="weak_key_size" resource="crypto" />
      <sink argpos="5" kind="weak_initialization_vector" resource="crypto" />
    </function>

    <function name="CCCryptorCreateFromData" signature="CCCryptorCreateFromData(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef, size_t *dataUsed)">
      <tags>algo:1,kCCAlgorithmDES:des,kCCAlgorithmCAST:cast,kCCAlgorithmRC4:rc4,kCCAlgorithm3DES:TripleDES,kCCAlgorithmRC2:rc2,kCCAlgorithmAES128:aes,weak_initialization_vector:5,weak_key:3,weak_key_size:4</tags>
      <parameters>
        <param type="CCOperation"/>
        <param type="CCAlgorithm"/>
        <param type="CCOptions"/>
        <param type="void"/>
        <param type="size_t"/>
        <param type="void"/>
        <param type="CCCryptorRef"/>
        <param type="size_t"/>
      </parameters>
      <sink argpos="2" kind="weak_mode" resource="crypto" />
      <sink argpos="3" kind="weak_key" resource="crypto" />
      <sink argpos="4" kind="weak_key_size" resource="crypto" />
      <sink argpos="5" kind="weak_initialization_vector" resource="crypto" />
    </function>

    <function name="CCCrypt" signature="CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)">
      <tags>algo:1,kCCAlgorithmDES:des,kCCAlgorithmCAST:cast,kCCAlgorithmRC4:rc4,kCCAlgorithmRC2:rc2,kCCAlgorithm3DES:TripleDES,kCCAlgorithmAES128:aes,weak_initialization_vector:5,weak_key:3,weak_key_size:4</tags>
      <parameters>
        <param type="CCOperation"/>
        <param type="CCAlgorithm"/>
        <param type="CCOptions"/>
        <param type="void"/>
        <param type="size_t"/>
        <param type="void"/>
        <param type="void"/>
        <param type="size_t"/>
        <param type="void"/>
        <param type="size_t"/>
        <param type="size_t"/>
      </parameters>
      <sink argpos="2" kind="weak_mode" resource="crypto" />
      <sink argpos="3" kind="weak_key" resource="crypto" />
      <sink argpos="4" kind="weak_key_size" resource="crypto" />
      <sink argpos="5" kind="weak_initialization_vector" resource="crypto" />
    </function>

    <function name="CCHmacInit" signature="CCHmacInit(CCHmacContext *ctx, CCHmacAlgorithm algorithm, const void *key, size_t keyLength)">
      <tags>algo:1,kCCHmacAlgSHA1:sha1,kCCHmacAlgMD5:md5,kCCHmacAlgSHA224:sha224,kCCHmacAlgSHA256:sha256,kCCHmacAlgSHA384:sha384,kCCHmacAlgSHA512:sha512</tags>
      <parameters>
        <param type="CCHmacContext"/>
        <param type="CCHmacAlgorithm"/>
        <param type="void"/>
        <param type="size_t"/>
      </parameters>
    </function>

    <function name="CCHmac" signature="CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)">
      <tags>algo:0,kCCHmacAlgSHA1:sha1,kCCHmacAlgMD5:md5,kCCHmacAlgSHA224:sha224,kCCHmacAlgSHA256:sha256,kCCHmacAlgSHA384:sha384,kCCHmacAlgSHA512:sha512,weak_key:1,weak_key_size:2</tags>
      <parameters>
        <param type="CCHmacAlgorithm"/>
        <param type="void"/>
        <param type="size_t"/>
        <param type="void"/>
        <param type="size_t"/>
        <param type="void"/>
      </parameters>
      <sink argpos="1" kind="weak_key" resource="crypto" />
    </function>

    <function name="CCKeyDerivationPBKDF" signature="CCKeyDerivationPBKDF(CCPBKDFAlgorithm algorithm, const char *password, size_t passwordLen, const uint8_t *salt, size_t saltLen, CCPseudoRandomAlgorithm prf, uint rounds, uint8_t *derivedKey, size_t derivedKeyLen) SX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_NA);">
      <tags>algo:0,iteration:6,weak_key_derivation:1;2,weak_hash_salt:3,weak_hash_salt_size:4</tags>
      <parameters>
        <param type="CCPBKDFAlgorithm"/>
        <param type="char"/>
        <param type="size_t"/>
        <param type="uint8_t"/>
        <param type="size_t"/>
        <param type="CCPseudoRandomAlgorithm"/>
        <param type="uint"/>
        <param type="uint8_t"/>
        <param type="size_t"/>
      </parameters>
      <sink argpos="3" kind="weak_salt" resource="crypto" />
      <sink argpos="6" kind="weak_key_derivation_iteration" resource="crypto" />
    </function>

  </module>

  <module name="Certificate_Key_and_Trust Services">
    <description url="https://developer.apple.com/documentation/security/certificate_key_and_trust_services">Establish trust using certificates and cryptographic keys</description>

    <function name="SecKeyGeneratePair" signature="SecKeyGeneratePair ( CFDictionaryRef parameters, SecKeyRef _Nullable *publicKey, SecKeyRef _Nullable *privateKey )">
      <tags>algo:0,weak_key_size:0</tags>
      <parameters>
        <param type="CFDictionaryRef"/>
        <param type="SecKeyRef"/>
        <param type="SecKeyRef"/>
      </parameters>
      <sink argpos="0" kind="weak_key_size" resource="crypto" />
    </function>
  </module>

  <module name="Crypto" >
    <description url="https://github.com/alexaubry/Crypto" >Wrapper for CommonCrypto</description>

    <class name="Digest">
      <method name="md2" signature="md2(bytes: data.bytes, length: data.length) " >
        <tags>algo:md2,key:0,key_size:1</tags>
        <parameters>
          <param type="String" name="bytes"/>
          <param type="int" name="length"/>
        </parameters>
        <sink argpos="0" kind="weak_key" resource="crypto" />
        <sink argpos="1" kind="weak_key_size" resource="crypto" />
      </method>
      <method name="md4" signature="md4(bytes: data.bytes, length: data.length) " >
        <tags>algo:md4,key:0,key_size:1</tags>
        <parameters>
          <param type="String" name="bytes"/>
          <param type="int" name="length"/>
        </parameters>
        <sink argpos="0" kind="weak_key" resource="crypto" />
        <sink argpos="1" kind="weak_key_size" resource="crypto" />
      </method>
      <method name="md5" signature="md5(bytes: data.bytes, length: data.length) " >
        <tags>algo:md5,key:0,key_size:1</tags>
        <parameters>
          <param type="String" name="bytes"/>
          <param type="int" name="length"/>
        </parameters>
        <sink argpos="0" kind="weak_key" resource="crypto" />
        <sink argpos="1" kind="weak_key_size" resource="crypto" />
      </method>
      <method name="sha1" signature="sha1(bytes: data.bytes, length: data.length) " >
        <tags>algo:sha1,key:0,key_size:1</tags>
        <parameters>
          <param type="String" name="bytes"/>
          <param type="int" name="length"/>
        </parameters>
        <sink argpos="0" kind="weak_key" resource="crypto" />
        <sink argpos="1" kind="weak_key_size" resource="crypto" />
      </method>
      <method name="sha224" signature="sha224(bytes: data.bytes, length: data.length) " >
        <tags>algo:sha224,key:0,key_size:1</tags>
        <parameters>
          <param type="String" name="bytes"/>
          <param type="int" name="length"/>
        </parameters>
        <sink argpos="0" kind="weak_key" resource="crypto" />
        <sink argpos="1" kind="weak_key_size" resource="crypto" />
      </method>
      <method name="sha256" signature="sha256(bytes: data.bytes, length: data.length) " >
        <tags>algo:sha256,key:0,key_size:1</tags>
        <parameters>
          <param type="String" name="bytes"/>
          <param type="int" name="length"/>
        </parameters>
        <sink argpos="0" kind="weak_key" resource="crypto" />
        <sink argpos="1" kind="weak_key_size" resource="crypto" />
      </method>
      <method name="sha384" signature="sha384(bytes: data.bytes, length: data.length) " >
        <tags>algo:sha384,key:0,key_size:1</tags>
        <parameters>
          <param type="String" name="bytes"/>
          <param type="int" name="length"/>
        </parameters>
        <sink argpos="0" kind="weak_key" resource="crypto" />
        <sink argpos="1" kind="weak_key_size" resource="crypto" />
      </method>
      <method name="sha512" signature="sha512(bytes: data.bytes, length: data.length) " >
        <tags>algo:sha512,key:0,key_size:1</tags>
        <parameters>
          <param type="String" name="bytes"/>
          <param type="int" name="length"/>
        </parameters>
        <sink argpos="0" kind="weak_key" resource="crypto" />
        <sink argpos="1" kind="weak_key_size" resource="crypto" />
      </method>

      <field name="md2" type="String" >
        <tags>algo:md2</tags>
      </field>
      <field name="md4" type="String" >
        <tags>algo:md4</tags>
      </field>
      <field name="md5" type="String" >
        <tags>algo:md5</tags>
      </field>
      <field name="sha1" type="String" >
        <tags>algo:sha1</tags>
      </field>
      <field name="sha224" type="String" >
        <tags>algo:sha224</tags>
      </field>
      <field name="sha256" type="String" >
        <tags>algo:sha256</tags>
      </field>
      <field name="sha384" type="String" >
        <tags>algo:sha384</tags>
      </field>
      <field name="sha512" type="String" >
        <tags>algo:sha512</tags>
      </field>

    </class>
    
    <class name="String" supertypes="Crypto.Digest" />
    <class name="Data" supertypes="Crypto.Digest" />
    <class name="NSString" supertypes="Crypto.Digest" />
    <class name="NSData" supertypes="Crypto.Digest" />
    
    <class name="HMAC">
      <method name="sign" signature="sign(message:String, algorithm: Object, key: String)" >
        <tags>algo:1,key:2</tags>
        <parameters>
          <param type="String" name="message" />
          <param type="String" name="algorithm" />
          <param type="String" name="key" />
        </parameters>
      </method>
      <method name="sign" signature="sign(data:Data, algorithm: Object, key: String)" >
        <tags>algo:1,key:2</tags>
        <parameters>
          <param type="Data" name="data" />
          <param type="String" name="algorithm" />
          <param type="String" name="key" />
        </parameters>
        <sink paramNames="key" kind="weak_key" resource="crypto" />
      </method>
    </class>
  </module>
  
  <module name="AES256CBC" >
    <description url="https://cocoapods.org/pods/AES256CBC">AES256 Encryption Framework</description>

    <function name="encryptString" signature="encryptString(str, password: password)" >
      <tags>algo:sha256</tags>
      <sink paramNames="password" kind="weak_key" resource="crypto" />
    </function>
    <function name="decryptString" signature="encryptString(str, password: password)" />
  </module>

  <module name="SwiftMD5" >
    <description url="https://github.com/mpurland/SwiftMD5" >Swift implementation of MD5</description>

    <function name="md5" signature="md5(bytes)" >
      <tags>algo:md5</tags>
    </function>

    <class name="String">
      <field name="md5" type="String" >
        <tags>algo:md5</tags>
      </field>
    </class>
  </module>

  <module name="AESAdditions">
    <class name="NSData" >
      <function name="AES256EncryptWithKey" signature="AES256EncryptWithKey:key(String)">
        <tags>weak_key:0</tags>
        <parameters>
          <param type="String" />
        </parameters>
        <sink argpos="0" kind="weak_key" resource="crypto" />
      </function>
      <function name="AES256DecryptWithKey" signature="AES256DecryptWithKey:key(String)">
        <parameters>
          <param type="String" />
        </parameters>
      </function>
    </class>
  </module>
</library>