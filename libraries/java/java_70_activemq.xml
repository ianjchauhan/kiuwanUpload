<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.optimyth.com/schema/definitions/library_metadata"
         name="apache.activemq" standard="Apache_ActiveMQ" technology="java">

  <description url="https://activemq.apache.org/">Multi-protocol Messaging (JMS API)</description>
  <!-- https://activemq.apache.org/maven/apidocs/ -->

  <module name="org.apache.activemq" >
    <class name="org.apache.activemq.BlobMessage" supertypes="org.apache.activemq.Message" >
      <method name="getInputStream" signature="getInputStream()" >
        <return type="java.io.InputStream" />
      </method>
      <method name="getURL" signature="getURL()" >
        <return type="java.net.URL" />
      </method>
      <method name="getMimeType" signature="getMimeType()" >
        <return type="java.lang.String" />
      </method>
      <method name="setMimeType" signature="setMimeType(java.lang.String)" >
      </method>
      <method name="getName" signature="getName()" >
        <return type="java.lang.String" />
      </method>
      <method name="setName" signature="setName(java.lang.String)" />
    </class>
    <class name="org.apache.activemq.Message" supertypes="javax.jms.Message" >
      <method name="getJMSXMimeType" signature="getJMSXMimeType()" >
        <return type="java.lang.String" />
      </method>
    </class>
    <class name="org.apache.activemq.EnhancedConnection" supertypes="javax.jms.QueueConnection,javax.jms.TopicConnection,org.apache.activemq.Closeable" >
      <method name="getDestinationSource" signature="getDestinationSource()" >
        <return type="org.apache.activemq.advisory.DestinationSource" />
      </method>
    </class>
    <class name="org.apache.activemq.ActiveMQConnection" supertypes="java.lang.Object,javax.jms.Connection,javax.jms.QueueConnection,javax.jms.TopicConnection,org.apache.activemq.Closeable,org.apache.activemq.EnhancedConnection,org.apache.activemq.management.StatsCapable,org.apache.activemq.transport.TransportListener" >
      <constructor name="ActiveMQConnection" signature="ActiveMQConnection(org.apache.activemq.transport.Transport,org.apache.activemq.util.IdGenerator,org.apache.activemq.util.IdGenerator,org.apache.activemq.management.JMSStatsImpl)" />
      <method name="setUserName" signature="setUserName(java.lang.String)" >
        <tags>username:0</tags>
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="setPassword" signature="setPassword(java.lang.String)" >
        <tags>password:0</tags>
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="makeConnection" signature="makeConnection()" >
        <return type="org.apache.activemq.ActiveMQConnection" />
      </method>
      <method name="makeConnection" signature="makeConnection(java.lang.String)" >
        <return type="org.apache.activemq.ActiveMQConnection" />
      </method>
      <method name="makeConnection" signature="makeConnection(java.lang.String,java.lang.String,java.lang.String)" >
        <return type="org.apache.activemq.ActiveMQConnection" />
      </method>
      <method name="getConnectionStats" signature="getConnectionStats()" >
        <return type="org.apache.activemq.management.JMSConnectionStatsImpl" />
      </method>
      <method name="createSession" signature="createSession(boolean,int)" >
        <return type="javax.jms.Session" />
      </method>
      <method name="getNextSessionId" signature="getNextSessionId()" >
        <return type="org.apache.activemq.command.SessionId" />
      </method>
      <method name="getClientID" signature="getClientID()" >
        <return type="java.lang.String" />
      </method>
      <method name="setClientID" signature="setClientID(java.lang.String)" />
      <method name="setDefaultClientID" signature="setDefaultClientID(java.lang.String)" />
      <method name="getMetaData" signature="getMetaData()" >
        <return type="javax.jms.ConnectionMetaData" />
      </method>
      <method name="getExceptionListener" signature="getExceptionListener()" >
        <return type="javax.jms.ExceptionListener" />
      </method>
      <method name="setExceptionListener" signature="setExceptionListener(javax.jms.ExceptionListener)" />
      <method name="getClientInternalExceptionListener" signature="getClientInternalExceptionListener()" >
        <return type="org.apache.activemq.ClientInternalExceptionListener" />
      </method>
      <method name="setClientInternalExceptionListener" signature="setClientInternalExceptionListener(org.apache.activemq.ClientInternalExceptionListener)" />
      <method name="start" signature="start()" />
      <method name="stop" signature="stop()" />
      <method name="doStop" signature="doStop(boolean)" />
      <method name="close" signature="close()" />
      <method name="createDurableConnectionConsumer" signature="createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int)" >
        <return type="javax.jms.ConnectionConsumer" />
      </method>
      <method name="createDurableConnectionConsumer" signature="createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int,boolean)" >
        <return type="javax.jms.ConnectionConsumer" />
      </method>
      <method name="isStarted" signature="isStarted()" >
        <return type="boolean" />
      </method>
      <method name="isClosed" signature="isClosed()" >
        <return type="boolean" />
      </method>
      <method name="isClosing" signature="isClosing()" >
        <return type="boolean" />
      </method>
      <method name="isTransportFailed" signature="isTransportFailed()" >
        <return type="boolean" />
      </method>
      <method name="getPrefetchPolicy" signature="getPrefetchPolicy()" >
        <return type="org.apache.activemq.ActiveMQPrefetchPolicy" />
      </method>
      <method name="setPrefetchPolicy" signature="setPrefetchPolicy(org.apache.activemq.ActiveMQPrefetchPolicy)" >
      </method>
      <method name="getTransportChannel" signature="getTransportChannel()" >
        <return type="org.apache.activemq.transport.Transport" />
      </method>
      <method name="getInitializedClientID" signature="getInitializedClientID()" >
        <return type="java.lang.String" />
      </method>
      <method name="isDisableTimeStampsByDefault" signature="isDisableTimeStampsByDefault()" >
        <return type="boolean" />
      </method>
      <method name="setDisableTimeStampsByDefault" signature="setDisableTimeStampsByDefault(boolean)" >
      </method>
      <method name="isOptimizedMessageDispatch" signature="isOptimizedMessageDispatch()" >
        <return type="boolean" />
      </method>
      <method name="setOptimizedMessageDispatch" signature="setOptimizedMessageDispatch(boolean)" />
      <method name="getCloseTimeout" signature="getCloseTimeout()" >
        <return type="int" />
      </method>
      <method name="setCloseTimeout" signature="setCloseTimeout(int)" />
      <method name="getConnectionInfo" signature="getConnectionInfo()" >
        <return type="org.apache.activemq.command.ConnectionInfo" />
      </method>
      <method name="isUseRetroactiveConsumer" signature="isUseRetroactiveConsumer()" >
        <return type="boolean" />
      </method>
      <method name="setUseRetroactiveConsumer" signature="setUseRetroactiveConsumer(boolean)" />
      <method name="isNestedMapAndListEnabled" signature="isNestedMapAndListEnabled()" >
        <return type="boolean" />
      </method>
      <method name="setNestedMapAndListEnabled" signature="setNestedMapAndListEnabled(boolean)" />
      <method name="isExclusiveConsumer" signature="isExclusiveConsumer()" >
        <return type="boolean" />
      </method>
      <method name="setExclusiveConsumer" signature="setExclusiveConsumer(boolean)" />
      <method name="addTransportListener" signature="addTransportListener(org.apache.activemq.transport.TransportListener)" />
      <method name="removeTransportListener" signature="removeTransportListener(org.apache.activemq.transport.TransportListener)" />
      <method name="isUseDedicatedTaskRunner" signature="isUseDedicatedTaskRunner()" >
        <return type="boolean" />
      </method>
      <method name="setUseDedicatedTaskRunner" signature="setUseDedicatedTaskRunner(boolean)" />
      <method name="getSessionTaskRunner" signature="getSessionTaskRunner()" >
        <return type="org.apache.activemq.thread.TaskRunnerFactory" />
      </method>
      <method name="setSessionTaskRunner" signature="setSessionTaskRunner(org.apache.activemq.thread.TaskRunnerFactory)" />
      <method name="getTransformer" signature="getTransformer()" >
        <return type="org.apache.activemq.MessageTransformer" />
      </method>
      <method name="setTransformer" signature="setTransformer(org.apache.activemq.MessageTransformer)" />
      <method name="isStatsEnabled" signature="isStatsEnabled()" >
        <return type="boolean" />
      </method>
      <method name="setStatsEnabled" signature="setStatsEnabled(boolean)" />
      <method name="getDestinationSource" signature="getDestinationSource()" >
        <return type="org.apache.activemq.advisory.DestinationSource" />
      </method>
      <method name="addSession" signature="addSession(org.apache.activemq.ActiveMQSession)" />
      <method name="removeSession" signature="removeSession(org.apache.activemq.ActiveMQSession)" />
      <method name="addConnectionConsumer" signature="addConnectionConsumer(org.apache.activemq.ActiveMQConnectionConsumer)" />
      <method name="removeConnectionConsumer" signature="removeConnectionConsumer(org.apache.activemq.ActiveMQConnectionConsumer)" />
      <method name="createTopicSession" signature="createTopicSession(boolean,int)" >
        <return type="javax.jms.TopicSession" />
      </method>
      <method name="createConnectionConsumer" signature="createConnectionConsumer(javax.jms.Topic,java.lang.String,javax.jms.ServerSessionPool,int)" >
        <return type="javax.jms.ConnectionConsumer" />
      </method>
      <method name="createConnectionConsumer" signature="createConnectionConsumer(javax.jms.Queue,java.lang.String,javax.jms.ServerSessionPool,int)" >
        <return type="javax.jms.ConnectionConsumer" />
      </method>
      <method name="createConnectionConsumer" signature="createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int)" >
        <return type="javax.jms.ConnectionConsumer" />
      </method>
      <method name="createConnectionConsumer" signature="createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int,boolean)" >
        <return type="javax.jms.ConnectionConsumer" />
      </method>
      <method name="createQueueSession" signature="createQueueSession(boolean,int)" >
        <return type="javax.jms.QueueSession" />
      </method>
      <method name="checkClientIDWasManuallySpecified" signature="checkClientIDWasManuallySpecified()" />
      <method name="asyncSendPacket" signature="asyncSendPacket(org.apache.activemq.command.Command)" />
      <method name="syncSendPacket" signature="syncSendPacket(org.apache.activemq.command.Command,org.apache.activemq.AsyncCallback)" />
      <method name="syncSendPacket" signature="syncSendPacket(org.apache.activemq.command.Command,int)" >
        <return type="org.apache.activemq.command.Response" />
      </method>
      <method name="syncSendPacket" signature="syncSendPacket(org.apache.activemq.command.Command)" >
        <return type="org.apache.activemq.command.Response" />
      </method>
      <method name="getStats" signature="getStats()" >
        <return type="org.apache.activemq.management.StatsImpl" />
      </method>
      <method name="checkClosedOrFailed" signature="checkClosedOrFailed()" />
      <method name="checkClosed" signature="checkClosed()" />
      <method name="ensureConnectionInfoSent" signature="ensureConnectionInfoSent()" />
      <method name="isWatchTopicAdvisories" signature="isWatchTopicAdvisories()" >
        <return type="boolean" />
      </method>
      <method name="setWatchTopicAdvisories" signature="setWatchTopicAdvisories(boolean)" />
      <method name="isUseAsyncSend" signature="isUseAsyncSend()" >
        <return type="boolean" />
      </method>
      <method name="setUseAsyncSend" signature="setUseAsyncSend(boolean)" />
      <method name="isAlwaysSyncSend" signature="isAlwaysSyncSend()" >
        <return type="boolean" />
      </method>
      <method name="setAlwaysSyncSend" signature="setAlwaysSyncSend(boolean)" />
      <method name="isMessagePrioritySupported" signature="isMessagePrioritySupported()" >
        <return type="boolean" />
      </method>
      <method name="setMessagePrioritySupported" signature="setMessagePrioritySupported(boolean)" />
      <method name="cleanup" signature="cleanup()" />
      <method name="isUserSpecifiedClientID" signature="isUserSpecifiedClientID()" >
        <return type="boolean" />
      </method>
      <method name="doCleanup" signature="doCleanup(boolean)" />
      <method name="changeUserInfo" signature="changeUserInfo(java.lang.String,java.lang.String)" >
        <tags>username:0,password:1</tags>
        <sink argpos="0,1" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="getResourceManagerId" signature="getResourceManagerId()" >
        <return type="java.lang.String" />
      </method>
      <method name="getBrokerName" signature="getBrokerName()" >
        <return type="java.lang.String" />
      </method>
      <method name="getBrokerInfo" signature="getBrokerInfo()" >
        <return type="org.apache.activemq.command.BrokerInfo" />
      </method>
      <method name="getRedeliveryPolicy" signature="getRedeliveryPolicy()" >
        <return type="org.apache.activemq.RedeliveryPolicy" />
      </method>
      <method name="getBlobTransferPolicy" signature="getBlobTransferPolicy()" >
        <return type="org.apache.activemq.blob.BlobTransferPolicy" />
      </method>
      <method name="isAlwaysSessionAsync" signature="isAlwaysSessionAsync()" >
        <return type="boolean" />
      </method>
      <method name="setAlwaysSessionAsync" signature="setAlwaysSessionAsync(boolean)" />
      <method name="isOptimizeAcknowledge" signature="isOptimizeAcknowledge()" >
        <return type="boolean" />
      </method>
      <method name="getOptimizeAcknowledgeTimeOut" signature="getOptimizeAcknowledgeTimeOut()" >
        <return type="long" />
      </method>
      <method name="getWarnAboutUnstartedConnectionTimeout" signature="getWarnAboutUnstartedConnectionTimeout()" >
        <return type="long" />
      </method>
      <method name="getSendTimeout" signature="getSendTimeout()" >
        <return type="int" />
      </method>
      <method name="setSendTimeout" signature="setSendTimeout(int)" />
      <method name="isSendAcksAsync" signature="isSendAcksAsync()" >
        <return type="boolean" />
      </method>
      <method name="setSendAcksAsync" signature="setSendAcksAsync(boolean)" />
      <method name="getTimeCreated" signature="getTimeCreated()" >
        <return type="long" />
      </method>
      <method name="getTransport" signature="getTransport()" >
        <return type="org.apache.activemq.transport.Transport" />
      </method>
      <method name="hasDispatcher" signature="hasDispatcher(org.apache.activemq.command.ConsumerId)" >
        <return type="boolean" />
      </method>
      <method name="createTempDestination" signature="createTempDestination(boolean)" >
        <return type="org.apache.activemq.command.ActiveMQTempDestination" />
      </method>
      <method name="deleteTempDestination" signature="deleteTempDestination(org.apache.activemq.command.ActiveMQTempDestination)" />
      <method name="isDeleted" signature="isDeleted(org.apache.activemq.command.ActiveMQDestination)" >
        <return type="boolean" />
      </method>
      <method name="isCopyMessageOnSend" signature="isCopyMessageOnSend()" >
        <return type="boolean" />
      </method>
      <method name="getLocalTransactionIdGenerator" signature="getLocalTransactionIdGenerator()" >
        <return type="org.apache.activemq.util.LongSequenceGenerator" />
      </method>
      <method name="isUseCompression" signature="isUseCompression()" >
        <return type="boolean" />
      </method>
      <method name="isDispatchAsync" signature="isDispatchAsync()" >
        <return type="boolean" />
      </method>
      <method name="isObjectMessageSerializationDefered" signature="isObjectMessageSerializationDefered()" >
        <return type="boolean" />
      </method>
      <method name="createBlobTransferPolicy" signature="createBlobTransferPolicy()" >
        <return type="org.apache.activemq.blob.BlobTransferPolicy" />
      </method>
      <method name="getProtocolVersion" signature="getProtocolVersion()" >
        <return type="int" />
      </method>
      <method name="getProducerWindowSize" signature="getProducerWindowSize()" >
        <return type="int" />
      </method>
      <method name="isDuplicate" signature="isDuplicate(org.apache.activemq.ActiveMQDispatcher,org.apache.activemq.command.Message)" >
        <return type="boolean" />
      </method>
      <method name="getFirstFailureError" signature="getFirstFailureError()" >
        <return type="java.io.IOException" />
      </method>
      <method name="getConsumerFailoverRedeliveryWaitPeriod" signature="getConsumerFailoverRedeliveryWaitPeriod()" >
        <return type="long" />
      </method>
      <method name="getScheduler" signature="getScheduler()" >
        <return type="org.apache.activemq.thread.Scheduler" />
      </method>
      <method name="getExecutor" signature="getExecutor()" >
        <return type="java.util.concurrent.ThreadPoolExecutor" />
      </method>
      <method name="getSessions" signature="getSessions()" >
        <return type="java.util.concurrent.CopyOnWriteArrayList" />
      </method>
      <method name="isCheckForDuplicates" signature="isCheckForDuplicates()" >
        <return type="boolean" />
      </method>
      <method name="isTransactedIndividualAck" signature="isTransactedIndividualAck()" >
        <return type="boolean" />
      </method>
      <method name="isNonBlockingRedelivery" signature="isNonBlockingRedelivery()" >
        <return type="boolean" />
      </method>
      <method name="isRmIdFromConnectionId" signature="isRmIdFromConnectionId()" >
        <return type="boolean" />
      </method>
      <method name="getRedeliveryPolicyMap" signature="getRedeliveryPolicyMap()" >
        <return type="org.apache.activemq.broker.region.policy.RedeliveryPolicyMap" />
      </method>
      <method name="getMaxThreadPoolSize" signature="getMaxThreadPoolSize()" >
        <return type="int" />
      </method>
      <method name="enforceQueueOnlyConnection" signature="enforceQueueOnlyConnection()" >
        <return type="org.apache.activemq.ActiveMQConnection" />
      </method>
      <method name="getRejectedTaskHandler" signature="getRejectedTaskHandler()" >
        <return type="java.util.concurrent.RejectedExecutionHandler" />
      </method>
      <method name="getOptimizedAckScheduledAckInterval" signature="getOptimizedAckScheduledAckInterval()" >
        <return type="long" />
      </method>
      <method name="isConsumerExpiryCheckEnabled" signature="isConsumerExpiryCheckEnabled()" >
        <return type="boolean" />
      </method>
      <method name="getTrustedPackages" signature="getTrustedPackages()" >
        <return type="java.util.List" />
      </method>
    </class>
    <class name="org.apache.activemq.ActiveMQConnectionFactory" supertypes="org.apache.activemq.jndi.JNDIBaseStorable" >
      <constructor name="ActiveMQConnectionFactory" signature="ActiveMQConnectionFactory()" />
      <constructor name="ActiveMQConnectionFactory" signature="ActiveMQConnectionFactory(java.lang.String)" match="fullsignature" >
        <sink kind="connection_string_injection" argpos="0" resource="database" />
      </constructor>
      <constructor name="ActiveMQConnectionFactory" signature="ActiveMQConnectionFactory(java.net.URI)" match="fullsignature" >
        <sink kind="connection_string_injection" argpos="0" resource="database" />
      </constructor>
      <constructor name="ActiveMQConnectionFactory" signature="ActiveMQConnectionFactory(java.lang.String,java.lang.String,java.lang.String)" match="fullsignature" >
        <tags>username:0,password:1</tags>
        <sink argpos="0,1" kind="hardcoded_credentials" resource="network"/>
        <sink kind="connection_string_injection" argpos="2" resource="database" />
      </constructor>
      <constructor name="ActiveMQConnectionFactory" signature="ActiveMQConnectionFactory(java.lang.String,java.lang.String,java.net.URI)" match="fullsignature" >
        <tags>username:0,password:1</tags>
        <sink argpos="0,1" kind="hardcoded_credentials" resource="network"/>
        <sink kind="connection_string_injection" argpos="2" resource="database" />
      </constructor>

      <method name="createActiveMQConnection" signature="createActiveMQConnection()" >
        <return type="org.apache.activemq.ActiveMQConnection" />
      </method>
      <method name="createActiveMQConnection" signature="createActiveMQConnection(java.lang.String,java.lang.String)" match="fullsignature" >
        <tags>username:0,password:1</tags>
        <return type="org.apache.activemq.ActiveMQConnection" />
        <sink argpos="0,1" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="createActiveMQConnection" signature="createActiveMQConnection(org.apache.activemq.transport.Transport,org.apache.activemq.management.JMSStatsImpl)" match="fullsignature" >
        <tags>username:0,password:1</tags>
        <return type="org.apache.activemq.ActiveMQConnection" />
        <sink argpos="0,1" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="createConnection" signature="createConnection()" >
        <return type="javax.jms.Connection" />
      </method>
      <method name="createConnection" signature="createConnection(java.lang.String,java.lang.String)" >
        <tags>username:0,password:1</tags>
        <return type="javax.jms.Connection" />
        <sink argpos="0,1" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="createQueueConnection" signature="createQueueConnection()" >
        <return type="javax.jms.QueueConnection" />
      </method>
      <method name="createQueueConnection" signature="createQueueConnection(java.lang.String,java.lang.String)" >
        <tags>username:0,password:1</tags>
        <return type="javax.jms.QueueConnection" />
        <sink argpos="0,1" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="createTopicConnection" signature="createTopicConnection()" >
        <return type="javax.jms.TopicConnection" />
      </method>
      <method name="createTopicConnection" signature="createTopicConnection(java.lang.String,java.lang.String)" >
        <tags>username:0,password:1</tags>
        <return type="javax.jms.TopicConnection" />
        <sink argpos="0,1" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="setBrokerURL" signature="setBrokerURL(java.lang.String)" >
        <sink kind="connection_string_injection" argpos="0" resource="database" />
      </method>
      <method name="setPassword" signature="setPassword(java.lang.String)" >
        <tags>password:0</tags>
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
        <sink kind="resource_injection" argpos="0" resource="database" />
      </method>
      <method name="setUserName" signature="setUserName(java.lang.String)" >
        <tags>username:0</tags>
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
        <sink kind="resource_injection" argpos="0" resource="database" />
      </method>
    </class>
    <class name="org.apache.activemq.ActiveMQXAConnectionFactory" supertypes="org.apache.activemq.ActiveMQConnectionFactory" >
      <constructor name="ActiveMQXAConnectionFactory" signature="ActiveMQXAConnectionFactory()" />
      <constructor name="ActiveMQXAConnectionFactory" signature="ActiveMQXAConnectionFactory(java.lang.String)" match="fullsignature" >
        <sink kind="connection_string_injection" argpos="0" resource="database" />
      </constructor>
      <constructor name="ActiveMQXAConnectionFactory" signature="ActiveMQXAConnectionFactory(java.net.URI)" match="fullsignature" >
        <sink kind="connection_string_injection" argpos="0" resource="database" />
      </constructor>
    </class>
    <class name="org.apache.activemq.ActiveMQXASslConnectionFactory" supertypes="org.apache.activemq.ActiveMQXAConnectionFactory" >
      <constructor name="ActiveMQXASslConnectionFactory" signature="ActiveMQXASslConnectionFactory()" />
      <constructor name="ActiveMQXASslConnectionFactory" signature="ActiveMQXASslConnectionFactory(java.lang.String)" match="fullsignature" >
        <sink kind="connection_string_injection" argpos="0" resource="database" />
      </constructor>
      <constructor name="ActiveMQXASslConnectionFactory" signature="ActiveMQXASslConnectionFactory(java.net.URI)" match="fullsignature" >
        <sink kind="connection_string_injection" argpos="0" resource="database" />
      </constructor>

      <method name="createXAConnection" signature="createXAConnection()" >
        <return type="javax.jms.XAConnection" />
      </method>
      <method name="createXAConnection" signature="createXAConnection(java.lang.String,java.lang.String)" >
        <tags>username:0,password:1</tags>
        <return type="javax.jms.XAConnection" />
        <sink argpos="0,1" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="createXAQueueConnection" signature="createXAQueueConnection()" >
        <return type="javax.jms.XAQueueConnection" />
      </method>
      <method name="createXAQueueConnection" signature="createXAQueueConnection(java.lang.String,java.lang.String)" >
        <tags>username:0,password:1</tags>
        <return type="javax.jms.XAQueueConnection" />
        <sink argpos="0,1" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="createXATopicConnection" signature="createXATopicConnection()" >
        <return type="jjavax.jms.XATopicConnection" />
      </method>
      <method name="createXATopicConnection" signature="createXATopicConnection(java.lang.String,java.lang.String)" >
        <tags>username:0,password:1</tags>
        <return type="javax.jms.XATopicConnection" />
        <sink argpos="0,1" kind="hardcoded_credentials" resource="network"/>
      </method>
    </class>
    <class name="org.apache.activemq.Service" >
      <method name="start" signature="start()" >
      </method>
      <method name="stop" signature="stop()" >
      </method>
    </class>
  </module>

  <module name="org.apache.activemq.broker" >
    <class name="org.apache.activemq.broker.ConnectionContext" >
      <constructor name="ConnectionContext" signature="ConnectionContext()" />
      <constructor name="ConnectionContext" signature="ConnectionContext(org.apache.activemq.filter.MessageEvaluationContext)" />
      <constructor name="ConnectionContext" signature="ConnectionContext(org.apache.activemq.command.ConnectionInfo)" />

      <method name="copy" signature="copy()" >
        <return type="org.apache.activemq.broker.ConnectionContext" />
      </method>
      <method name="getSecurityContext" signature="getSecurityContext()" >
        <return type="org.apache.activemq.security.SecurityContext" />
      </method>
      <method name="setSecurityContext" signature="setSecurityContext(org.apache.activemq.security.SecurityContext)" />
      <method name="getBroker" signature="getBroker()" >
        <return type="org.apache.activemq.broker.Broker" />
      </method>
      <method name="setBroker" signature="setBroker(org.apache.activemq.broker.Broker)" />
      <method name="getConnection" signature="getConnection()" >
        <return type="org.apache.activemq.broker.Connection" />
      </method>
      <method name="setConnection" signature="setConnection(org.apache.activemq.broker.Connection)" />
      <method name="getTransaction" signature="getTransaction()" >
        <return type="org.apache.activemq.transaction.Transaction" />
      </method>
      <method name="setTransaction" signature="setTransaction(org.apache.activemq.transaction.Transaction)" />
      <method name="getConnector" signature="getConnector()" >
        <return type="org.apache.activemq.broker.Connector" />
      </method>
      <method name="setConnector" signature="setConnector(org.apache.activemq.broker.Connector)" />
      <method name="getMessageAuthorizationPolicy" signature="getMessageAuthorizationPolicy()" >
        <return type="org.apache.activemq.security.MessageAuthorizationPolicy" />
      </method>
      <method name="setMessageAuthorizationPolicy" signature="setMessageAuthorizationPolicy(org.apache.activemq.security.MessageAuthorizationPolicy)" />
      <method name="isInRecoveryMode" signature="isInRecoveryMode()" >
        <return type="boolean" />
      </method>
      <method name="setInRecoveryMode" signature="setInRecoveryMode(boolean)" />
      <method name="getTransactions" signature="getTransactions()" >
        <return type="java.util.concurrent.ConcurrentMap" />
      </method>
      <method name="setTransactions" signature="setTransactions(java.util.concurrent.ConcurrentMap)" />
      <method name="isInTransaction" signature="isInTransaction()" >
        <return type="boolean" />
      </method>
      <method name="getClientId" signature="getClientId()" >
        <return type="java.lang.String" />
      </method>
      <method name="setClientId" signature="setClientId(java.lang.String)" />
      <method name="isReconnect" signature="isReconnect()" >
        <return type="boolean" />
      </method>
      <method name="setReconnect" signature="setReconnect(boolean)" />
      <method name="getWireFormatInfo" signature="getWireFormatInfo()" >
        <return type="org.apache.activemq.command.WireFormatInfo" />
      </method>
      <method name="setWireFormatInfo" signature="setWireFormatInfo(org.apache.activemq.command.WireFormatInfo)" />
      <method name="getConnectionId" signature="getConnectionId()" >
        <return type="org.apache.activemq.command.ConnectionId" />
      </method>
      <method name="setConnectionId" signature="setConnectionId(org.apache.activemq.command.ConnectionId)" />
      <method name="getUserName" signature="getUserName()" >
        <tags>sensitive_info,credential,username</tags>
        <return type="java.lang.String"/>
        <source argpos="-1" kind="sensitive_info" resource="web"/>
      </method>
      <method name="setUserName" signature="setUserName(java.lang.String)" >
        <tags>username:0</tags>
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="getMessageEvaluationContext" signature="getMessageEvaluationContext()" >
        <return type="org.apache.activemq.filter.MessageEvaluationContext" />
      </method>
      <method name="getLongTermStoreContext" signature="getLongTermStoreContext()" >
        <return type="java.lang.Object" />
      </method>
      <method name="setLongTermStoreContext" signature="setLongTermStoreContext(java.lang.Object)" />
      <method name="isProducerFlowControl" signature="isProducerFlowControl()" >
        <return type="boolean" />
      </method>
      <method name="setProducerFlowControl" signature="setProducerFlowControl(boolean)" />
      <method name="isAllowedToConsume" signature="isAllowedToConsume(org.apache.activemq.broker.region.MessageReference)" >
        <return type="boolean" />
      </method>
      <method name="isNetworkConnection" signature="isNetworkConnection()" >
        <return type="boolean" />
      </method>
      <method name="setNetworkConnection" signature="setNetworkConnection(boolean)" />
      <method name="getStopping" signature="getStopping()" >
        <return type="java.util.concurrent.atomic.AtomicBoolean" />
      </method>
      <method name="setDontSendReponse" signature="setDontSendReponse(boolean)" />
      <method name="isDontSendReponse" signature="isDontSendReponse()" >
        <return type="boolean" />
      </method>
      <method name="isClientMaster" signature="isClientMaster()" >
        <return type="boolean" />
      </method>
      <method name="setClientMaster" signature="setClientMaster(boolean)" />
      <method name="isFaultTolerant" signature="isFaultTolerant()" >
        <return type="boolean" />
      </method>
      <method name="setFaultTolerant" signature="setFaultTolerant(boolean)" />
      <method name="setConnectionState" signature="setConnectionState(org.apache.activemq.state.ConnectionState)" />
      <method name="getConnectionState" signature="getConnectionState()" >
        <return type="org.apache.activemq.state.ConnectionState" />
      </method>
      <method name="setXid" signature="setXid(org.apache.activemq.command.XATransactionId)" />
      <method name="getXid" signature="getXid()" >
        <return type="org.apache.activemq.command.XATransactionId" />
      </method>
      <method name="isAllowLinkStealing" signature="isAllowLinkStealing()" >
        <return type="boolean" />
      </method>
    </class>
  </module>

  <module name="org.apache.activemq.network" >
    <class name="org.apache.activemq.network.NetworkBridgeConfiguration" >
      <method name="isConduitSubscriptions" signature="isConduitSubscriptions()" >
        <return type="boolean" />
      </method>
      <method name="setConduitSubscriptions" signature="setConduitSubscriptions(boolean)" />
      <method name="isConduitNetworkQueueSubscriptions" signature="isConduitNetworkQueueSubscriptions()" >
        <return type="boolean" />
      </method>
      <method name="setConduitNetworkQueueSubscriptions" signature="setConduitNetworkQueueSubscriptions(boolean)" />
      <method name="isDynamicOnly" signature="isDynamicOnly()" >
        <return type="boolean" />
      </method>
      <method name="setDynamicOnly" signature="setDynamicOnly(boolean)" />
      <method name="isSyncDurableSubs" signature="isSyncDurableSubs()" >
        <return type="boolean" />
      </method>
      <method name="setSyncDurableSubs" signature="setSyncDurableSubs(boolean)" />
      <method name="isBridgeTempDestinations" signature="isBridgeTempDestinations()" >
        <return type="boolean" />
      </method>
      <method name="setBridgeTempDestinations" signature="setBridgeTempDestinations(boolean)" />
      <method name="isDecreaseNetworkConsumerPriority" signature="isDecreaseNetworkConsumerPriority()" >
        <return type="boolean" />
      </method>
      <method name="setDecreaseNetworkConsumerPriority" signature="setDecreaseNetworkConsumerPriority(boolean)" />
      <method name="isDispatchAsync" signature="isDispatchAsync()" >
        <return type="boolean" />
      </method>
      <method name="setDispatchAsync" signature="setDispatchAsync(boolean)" />
      <method name="isDuplex" signature="isDuplex()" >
        <return type="boolean" />
      </method>
      <method name="setDuplex" signature="setDuplex(boolean)" />
      <method name="getBrokerName" signature="getBrokerName()" >
        <return type="java.lang.String" />
      </method>
      <method name="setBrokerName" signature="setBrokerName(java.lang.String)" />
      <method name="getClientIdToken" signature="getClientIdToken()" >
        <return type="java.lang.String" />
      </method>
      <method name="setClientIdToken" signature="setClientIdToken(java.lang.String)" />
      <method name="getNetworkTTL" signature="getNetworkTTL()" >
        <return type="int" />
      </method>
      <method name="setNetworkTTL" signature="setNetworkTTL(int)" />
      <method name="getPassword" signature="getPassword()" >
        <tags>sensitive_info,credential,password</tags>
        <return type="java.lang.String"/>
        <source argpos="-1" kind="sensitive_info" resource="web"/>
      </method>
      <method name="setPassword" signature="setPassword(java.lang.String)" >
        <tags>password:0</tags>
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="getPrefetchSize" signature="getPrefetchSize()" >
        <return type="int" />
      </method>
      <method name="setPrefetchSize" signature="setPrefetchSize(int)" />
      <method name="getAdvisoryPrefetchSize" signature="getAdvisoryPrefetchSize()" >
        <return type="int" />
      </method>
      <method name="setAdvisoryPrefetchSize" signature="setAdvisoryPrefetchSize(int)" />
      <method name="getAdvisoryAckPercentage" signature="getAdvisoryAckPercentage()" >
        <return type="int" />
      </method>
      <method name="setAdvisoryAckPercentage" signature="setAdvisoryAckPercentage(int)" />
      <method name="getUserName" signature="getUserName()" >
        <tags>sensitive_info,credential,username</tags>
        <return type="java.lang.String"/>
        <source argpos="-1" kind="sensitive_info" resource="web"/>
      </method>
      <method name="setUserName" signature="setUserName(java.lang.String)" >
        <tags>username:0</tags>
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="getDestinationFilter" signature="getDestinationFilter()" >
        <return type="java.lang.String" />
      </method>
      <method name="setDestinationFilter" signature="setDestinationFilter(java.lang.String)" />
      <method name="getName" signature="getName()" >
        <return type="java.lang.String" />
      </method>
      <method name="setName" signature="setName(java.lang.String)" />
      <method name="getExcludedDestinations" signature="getExcludedDestinations()" >
        <return type="java.util.List" />
      </method>
      <method name="setExcludedDestinations" signature="setExcludedDestinations(java.util.List)" />
      <method name="getDynamicallyIncludedDestinations" signature="getDynamicallyIncludedDestinations()" >
        <return type="java.util.List" />
      </method>
      <method name="setDynamicallyIncludedDestinations" signature="setDynamicallyIncludedDestinations(java.util.List)" />
      <method name="getStaticallyIncludedDestinations" signature="getStaticallyIncludedDestinations()" >
        <return type="java.util.List" />
      </method>
      <method name="setStaticallyIncludedDestinations" signature="setStaticallyIncludedDestinations(java.util.List)" />
      <method name="isSuppressDuplicateQueueSubscriptions" signature="isSuppressDuplicateQueueSubscriptions()" >
        <return type="boolean" />
      </method>
      <method name="setSuppressDuplicateQueueSubscriptions" signature="setSuppressDuplicateQueueSubscriptions(boolean)" />
      <method name="isSuppressDuplicateTopicSubscriptions" signature="isSuppressDuplicateTopicSubscriptions()" >
        <return type="boolean" />
      </method>
      <method name="setSuppressDuplicateTopicSubscriptions" signature="setSuppressDuplicateTopicSubscriptions(boolean)" />
      <method name="getBrokerURL" signature="getBrokerURL()" >
        <return type="java.lang.String" />
      </method>
      <method name="setBrokerURL" signature="setBrokerURL(java.lang.String)" />
      <method name="isAlwaysSyncSend" signature="isAlwaysSyncSend()" >
        <return type="boolean" />
      </method>
      <method name="setAlwaysSyncSend" signature="setAlwaysSyncSend(boolean)" />
      <method name="getConsumerPriorityBase" signature="getConsumerPriorityBase()" >
        <return type="int" />
      </method>
      <method name="setConsumerPriorityBase" signature="setConsumerPriorityBase(int)" />
      <method name="isStaticBridge" signature="isStaticBridge()" >
        <return type="boolean" />
      </method>
      <method name="setStaticBridge" signature="setStaticBridge(boolean)" />
      <method name="setUseCompression" signature="setUseCompression(boolean)" />
      <method name="isUseCompression" signature="isUseCompression()" >
        <return type="boolean" />
      </method>
      <method name="isAdvisoryForFailedForward" signature="isAdvisoryForFailedForward()" >
        <return type="boolean" />
      </method>
      <method name="setAdvisoryForFailedForward" signature="setAdvisoryForFailedForward(boolean)" />
      <method name="setConsumerTTL" signature="setConsumerTTL(int)" />
      <method name="getConsumerTTL" signature="getConsumerTTL()" >
        <return type="int" />
      </method>
      <method name="setMessageTTL" signature="setMessageTTL(int)" />
      <method name="getMessageTTL" signature="getMessageTTL()" >
        <return type="int" />
      </method>
      <method name="isUseBrokerNamesAsIdSeed" signature="isUseBrokerNamesAsIdSeed()" >
        <return type="boolean" />
      </method>
      <method name="setUseBrokerNameAsIdSees" signature="setUseBrokerNameAsIdSees(boolean)" />
      <method name="isGcDestinationViews" signature="isGcDestinationViews()" >
        <return type="boolean" />
      </method>
      <method name="setGcDestinationViews" signature="setGcDestinationViews(boolean)" />
      <method name="getGcSweepTime" signature="getGcSweepTime()" >
        <return type="long" />
      </method>
      <method name="setGcSweepTime" signature="setGcSweepTime(long)" />
      <method name="isCheckDuplicateMessagesOnDuplex" signature="isCheckDuplicateMessagesOnDuplex()" >
        <return type="boolean" />
      </method>
      <method name="setCheckDuplicateMessagesOnDuplex" signature="setCheckDuplicateMessagesOnDuplex(boolean)" />
      <method name="isUseVirtualDestSubs" signature="isUseVirtualDestSubs()" >
        <return type="boolean" />
      </method>
      <method name="getBridgeFactory" signature="getBridgeFactory()" >
        <return type="org.apache.activemq.network.BridgeFactory" />
      </method>
      <method name="setBridgeFactory" signature="setBridgeFactory(org.apache.activemq.network.BridgeFactory)" />
      <method name="isUseVirtualDestSus" signature="isUseVirtualDestSus()" >
        <return type="boolean" />
      </method>
      <method name="setUseVirtualDestSubs" signature="setUseVirtualDestSubs(boolean)" />
    </class>
    <class name="org.apache.activemq.network.NetworkConnector" supertypes="org.apache.activemq.Service,org.apache.activemq.network.NetworkBridgeConfiguration" />
    <class name="org.apache.activemq.network.LdapNetworkConnector" supertypes="javax.naming.event.NamespaceChangeListener,javax.naming.event.ObjectChangeListener,org.apache.activemq.network.NetworkConnector" >
      <method name="setAnonymousAuthentication" signature="setAnonymousAuthentication(boolean)" >
      </method>
      <method name="setSearchScope" signature="setSearchScope(java.lang.String)" >
        <sink argpos="0" kind="ldap_injection" resource="other"/>
      </method>
      <method name="setSearchFilter" signature="setSearchFilter(java.lang.String)" >
        <sink argpos="0" kind="ldap_injection" resource="other"/>
      </method>
      <method name="setSearchEventListener" signature="setSearchEventListener(boolean)" />
      <method name="setUserName" signature="setUserName(java.lang.String)" >
        <tags>username:0</tags>
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="setPassword" signature="setPassword(java.lang.String)" >
        <tags>password:0</tags>
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="setAnonymousAuthentication" signature="setAnonymousAuthentication(boolean)" >
        <sink argpos="0" kind="anonymous_ldap_bind" resource="other"/>
      </method>
    </class>
  </module>

  <module name="org.apache.activemq.spring" >
    <class name="org.apache.activemq.ActiveMQConnectionFactory" supertypes="java.lang.Cloneable,javax.jms.ConnectionFactory,javax.jms.QueueConnectionFactory,javax.jms.TopicConnectionFactory,org.apache.activemq.jndi.JNDIBaseStorable,org.apache.activemq.management.StatsCapable" />
    <class name="org.apache.activemq.spring.ActiveMQXAConnectionFactory" supertypes="org.apache.activemq.ActiveMQXAConnectionFactory,org.springframework.beans.factory.BeanNameAware" />
    <class name="org.apache.activemq.spring.SpringBrokerContext" supertypes="java.lang.Object,org.apache.activemq.broker.BrokerContext,org.springframework.context.ApplicationContextAware" >
      <method name="setApplicationContext" signature="setApplicationContext(org.springframework.context.ApplicationContext)" />
      <method name="setConfigurationUrl" signature="setConfigurationUrl(java.lang.String)" />
    </class>
    <class name="org.apache.activemq.spring.SpringSslContext" supertypes="org.apache.activemq.broker.SslContext" />
    <class name="org.apache.activemq.spring.Utils" >
      <method name="resourceFromString" signature="resourceFromString(java.lang.String)" >
        <return type="org.springframework.core.io.Resource" />
      </method>
    </class>
  </module>

  <module name="org.apache.activemq.transport" >
    <class name="org.apache.activemq.transport.SocketConnectorFactory" >
      <method name="createConnector" signature="createConnector(org.eclipse.jetty.server.Server)" >
        <return type="org.eclipse.jetty.server.Connector" />
      </method>
    </class>
    <class name="org.apache.activemq.transport.SecureSocketConnectorFactory" supertypes="org.apache.activemq.transport.SocketConnectorFactory" />
    <class name="org.apache.activemq.transport.TransportSupport" supertypes="org.apache.activemq.transport.Transport,org.apache.activemq.util.ServiceSupport" />
    <class name="org.apache.activemq.transport.TransportThreadSupport" supertypes="java.lang.Runnable,org.apache.activemq.transport.TransportSupport" >
      <method name="isDaemon" signature="isDaemon()" >
        <return type="boolean" />
      </method>
      <method name="setDaemon" signature="setDaemon(boolean)" />
      <method name="getStackSize" signature="getStackSize()" >
        <return type="long" />
      </method>
      <method name="setStackSize" signature="setStackSize(long)" />
    </class>
    <class name="org.apache.activemq.transport.TransportFactory" >
      <method name="doBind" signature="doBind(java.net.URI)" >
        <return type="org.apache.activemq.transport.TransportServer" />
      </method>
      <method name="doConnect" signature="doConnect(java.net.URI,java.util.concurrent.Executor)" >
        <return type="org.apache.activemq.transport.Transport" />
      </method>
      <method name="doCompositeConnect" signature="doCompositeConnect(java.net.URI,java.util.concurrent.Executor)" >
        <return type="org.apache.activemq.transport.Transport" />
      </method>
      <method name="connect" signature="connect(java.net.URI)" >
        <return type="org.apache.activemq.transport.Transport" />
      </method>
      <method name="connect" signature="connect(java.net.URI,java.util.concurrent.Executor)" >
        <return type="org.apache.activemq.transport.Transport" />
      </method>
      <method name="compositeConnect" signature="compositeConnect(java.net.URI)" >
        <return type="org.apache.activemq.transport.Transport" />
      </method>
      <method name="compositeConnect" signature="compositeConnect(java.net.URI,java.util.concurrent.Executor)" >
        <return type="org.apache.activemq.transport.Transport" />
      </method>
      <method name="bind" signature="bind(java.net.URI)" >
        <return type="org.apache.activemq.transport.TransportServer" />
      </method>
      <method name="doConnect" signature="doConnect(java.net.URI)" >
        <return type="org.apache.activemq.transport.Transport" />
      </method>
      <method name="doCompositeConnect" signature="doCompositeConnect(java.net.URI)" >
        <return type="org.apache.activemq.transport.Transport" />
      </method>
      <method name="registerTransportFactory" signature="registerTransportFactory(java.lang.String,org.apache.activemq.transport.TransportFactory)" />
      <method name="createTransport" signature="createTransport(java.net.URI,org.apache.activemq.wireformat.WireFormat)" >
        <return type="org.apache.activemq.transport.Transport" />
      </method>
      <method name="findTransportFactory" signature="findTransportFactory(java.net.URI)" >
        <return type="org.apache.activemq.transport.TransportFactory" />
      </method>
      <method name="createWireFormat" signature="createWireFormat(java.util.Map)" >
        <return type="org.apache.activemq.wireformat.WireFormat" />
      </method>
      <method name="createWireFormatFactory" signature="createWireFormatFactory(java.util.Map)" >
        <return type="org.apache.activemq.wireformat.WireFormatFactory" />
      </method>
      <method name="getDefaultWireFormatType" signature="getDefaultWireFormatType()" >
        <return type="java.lang.String" />
      </method>
      <method name="configure" signature="configure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)" >
        <return type="org.apache.activemq.transport.Transport" />
      </method>
      <method name="serverConfigure" signature="serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)" >
        <return type="org.apache.activemq.transport.Transport" />
      </method>
      <method name="compositeConfigure" signature="compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)" >
        <return type="org.apache.activemq.transport.Transport" />
      </method>
      <method name="getOption" signature="getOption(java.util.Map,java.lang.String,java.lang.String)" >
        <return type="java.lang.String" />
      </method>
    </class>
    <class name="org.apache.activemq.transport.TransportServerSupport" supertypes="org.apache.activemq.transport.TransportServer,org.apache.activemq.util.ServiceSupport" >
      <constructor name="TransportServerSupport" signature="TransportServerSupport()" />
      <constructor name="TransportServerSupport" signature="TransportServerSupport(java.net.URI)" />

      <method name="getAcceptListener" signature="getAcceptListener()" >
        <return type="org.apache.activemq.transport.TransportAcceptListener" />
      </method>
      <method name="setConnectURI" signature="setConnectURI(java.net.URI)"/>
      <method name="onAcceptError" signature="onAcceptError(java.lang.Exception)" />
      <method name="getBindLocation" signature="getBindLocation()" >
        <return type="java.net.URI" />
      </method>
      <method name="setBindLocation" signature="setBindLocation(java.net.URI)" />
      <method name="setTransportOption" signature="setTransportOption(java.util.Map)" />
      <method name="setAllowLinkStealing" signature="setAllowLinkStealing(boolean)" />
    </class>
    <class name="org.apache.activemq.transport.WebTransportServerSupport" supertypes="org.apache.activemq.transport.TransportServerSupport" />
    <class name="org.apache.activemq.transport.udp.UdpTransport" supertypes="java.lang.Runnable,org.apache.activemq.Service,org.apache.activemq.transport.Transport,org.apache.activemq.transport.TransportThreadSupport" >
      <method name="createReplayer" signature="createReplayer()" >
        <return type="org.apache.activemq.transport.reliable.Replayer" />
      </method>
      <method name="setTargetEndpoint" signature="setTargetEndpoint(org.apache.activemq.command.Endpoint)" />
      <method name="isTrace" signature="isTrace()" >
        <return type="boolean" />
      </method>
      <method name="setTrace" signature="setTrace(boolean)" />
      <method name="getDatagramSize" signature="getDatagramSize()" >
        <return type="int" />
      </method>
      <method name="setDatagramSize" signature="setDatagramSize(int)" />
      <method name="isUseLocalHost" signature="isUseLocalHost()" >
        <return type="boolean" />
      </method>
      <method name="setUseLocalHost" signature="setUseLocalHost(boolean)" />
      <method name="getCommandChannel" signature="getCommandChannel()" >
        <return type="org.apache.activemq.transport.udp.CommandChannel" />
      </method>
      <method name="setCommandChannel" signature="setCommandChannel(org.apache.activemq.transport.udp.CommandDatagramChannel)" />
      <method name="getReplayStrategy" signature="getReplayStrategy()" >
        <return type="org.apache.activemq.transport.reliable.ReplayStrategy" />
      </method>
      <method name="setReplayStrategy" signature="setReplayStrategy(org.apache.activemq.transport.reliable.ReplayStrategy)" />
      <method name="getPort" signature="getPort()" >
        <return type="int" />
      </method>
      <method name="setPort" signature="setPort(int)" >
        <sink kind="resource_injection" argpos="0" resource="network" />
      </method>
      <method name="getMinmumWireFormatVersion" signature="getMinmumWireFormatVersion()" >
        <return type="int" />
      </method>
      <method name="setMinmumWireFormatVersion" signature="setMinmumWireFormatVersion(int)" />
      <method name="getSequenceGenerator" signature="getSequenceGenerator()" >
        <return type="org.apache.activemq.util.IntSequenceGenerator" />
      </method>
      <method name="setSequenceGenerator" signature="setSequenceGenerator(org.apache.activemq.util.IntSequenceGenerator)" />
      <method name="isReplayEnabled" signature="isReplayEnabled()" >
        <return type="boolean" />
      </method>
      <method name="setReplayEnabled" signature="setReplayEnabled(boolean)" />
      <method name="getBufferPool" signature="getBufferPool()" >
        <return type="org.apache.activemq.transport.udp.ByteBufferPool" />
      </method>
      <method name="setBufferPool" signature="setBufferPool(org.apache.activemq.transport.udp.ByteBufferPool)" />
      <method name="getReplayBuffer" signature="getReplayBuffer()" >
        <return type="org.apache.activemq.transport.reliable.ReplayBuffer" />
      </method>
      <method name="setReplayBuffer" signature="setReplayBuffer(org.apache.activemq.transport.reliable.ReplayBuffer)" />
      <method name="createAddress" signature="createAddress(java.net.URI)" >
        <return type="java.net.InetSocketAddress" />
      </method>
      <method name="resolveHostName" signature="resolveHostName(java.lang.String)" >
        <return type="java.lang.String" />
      </method>
      <method name="createCommandChannel" signature="createCommandChannel()" >
        <return type="org.apache.activemq.transport.udp.CommandChannel" />
      </method>
      <method name="createCommandDatagramChannel" signature="createCommandDatagramChannel()" >
        <return type="org.apache.activemq.transport.udp.CommandChannel" />
      </method>
      <method name="bind" signature="bind(java.net.DatagramSocket,java.net.SocketAddress)" />
      <method name="connect" signature="connect(java.nio.channels.DatagramChannel,java.net.SocketAddress)" >
        <return type="java.nio.channels.DatagramChannel" />
      </method>
      <method name="createLocalAddress" signature="createLocalAddress()" >
        <return type="java.net.SocketAddress" />
      </method>
      <method name="doStop" signature="doStop(org.apache.activemq.util.ServiceStopper)" />
      <method name="createDatagramHeaderMarshaller" signature="createDatagramHeaderMarshaller()" >
        <return type="org.apache.activemq.transport.udp.DatagramHeaderMarshaller" />
      </method>
      <method name="getProtocolName" signature="getProtocolName()" >
        <return type="java.lang.String" />
      </method>
      <method name="getProtocolUriScheme" signature="getProtocolUriScheme()" >
        <return type="java.lang.String" />
      </method>
      <method name="getTargetAddress" signature="getTargetAddress()" >
        <return type="java.net.SocketAddress" />
      </method>
      <method name="getChannel" signature="getChannel()" >
        <return type="java.nio.channels.DatagramChannel" />
      </method>
      <method name="setChannel" signature="setChannel(java.nio.channels.DatagramChannel)" />
      <method name="getLocalSocketAddress" signature="getLocalSocketAddress()" >
        <return type="java.net.InetSocketAddress" />
      </method>
    </class>
    <class name="org.apache.activemq.transport.udp.UdpTransportFactory" supertypes="org.apache.activemq.transport.TransportFactory" />
    <class name="org.apache.activemq.transport.udp.UdpTransportServer" supertypes="org.apache.activemq.transport.TransportServerSupport" />
  </module>

  <module name="org.apache.activemq.transport.http" >
    <class name="org.apache.activemq.transport.http.HttpTunnelServlet" supertypes="javax.servlet.http.HttpServlet" >
      <method name="readRequestBody" signature="readRequestBody(javax.servlet.http.HttpServletRequest)" >
        <return type="java.lang.String" />
      </method>
      <method name="getTransportChannel" signature="getTransportChannel(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" >
        <return type="java.io.BlockingQueueTransport" />
      </method>
      <method name="createTransportChannel" signature="createTransportChannel(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" >
        <return type="java.io.BlockingQueueTransport" />
      </method>
      <method name="createTransportChannel" signature="createTransportChannel()" >
        <return type="java.io.BlockingQueueTransport" />
      </method>
      <method name="createWireFormat" signature="createWireFormat()" >
        <return type="org.apache.activemq.transport.util.TextWireFormat" />
      </method>
    </class>
    <class name="org.apache.activemq.transport.http.HttpTransportFactory" supertypes="org.apache.activemq.transport.TransportFactory" >
      <method name="asTextWireFormat" signature="asTextWireFormat(org.apache.activemq.wireformat.WireFormat)" >
        <return type="org.apache.activemq.transport.util.TextWireFormat" />
      </method>
    </class>
    <class name="org.apache.activemq.transport.http.HttpEmbeddedTunnelServlet" supertypes="org.apache.activemq.transport.http.HttpTunnelServlet" >
      <method name="createBroker" signature="createBroker()" >
        <return type="org.apache.activemq.broker.BrokerService" />
      </method>
      <method name="getConnectorURL" signature="getConnectorURL()" >
        <return type="java.lang.String" />
      </method>
    </class>
    <class name="org.apache.activemq.transport.http.HttpSpringEmbeddedTunnelServlet" supertypes="org.apache.activemq.transport.http.HttpEmbeddedTunnelServlet" />
    <class name="org.apache.activemq.transport.http.HttpTransportSupport" supertypes="org.apache.activemq.transport.TransportThreadSupport" >
      <constructor name="HttpTransportSupport" signature="HttpTransportSupport(org.apache.activemq.transport.util.TextWireFormat,java.net.URI)" />

      <method name="getRemoteUrl" signature="getRemoteUrl()" >
        <return type="java.net.URI" />
      </method>
      <method name="getTextWireFormat" signature="getTextWireFormat()" >
        <return type="org.apache.activemq.transport.util.TextWireFormat" />
      </method>
      <method name="setTextWireFormat" signature="setTextWireFormat(org.apache.activemq.transport.util.TextWireFormat)" />
      <method name="getProxyHost" signature="getProxyHost()" >
        <return type="java.lang.String" />
      </method>
      <method name="setProxyHost" signature="setProxyHost(java.lang.String)" />
      <method name="getProxyPort" signature="getProxyPort()" >
        <return type="int" />
      </method>
      <method name="setProxyPort" signature="setProxyPort(int)" />
      <method name="getProxyUser" signature="getProxyUser()" >
        <return type="java.lang.String" />
      </method>
      <method name="setProxyUser" signature="setProxyUser(java.lang.String)" >
        <tags>username:0</tags>
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="getProxyPassword" signature="getProxyPassword()" >
        <return type="java.lang.String" />
      </method>
      <method name="setProxyPassword" signature="setProxyPassword(java.lang.String)" >
        <tags>password:0</tags>
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="getSystemPropertyPrefix" signature="getSystemPropertyPrefix()" >
        <return type="java.lang.String" />
      </method>
    </class>
    <class name="org.apache.activemq.transport.http.HttpClientTransport" supertypes="org.apache.activemq.transport.http.HttpTransportSupport" >
      <constructor name="HttpClientTransport" signature="HttpClientTransport(org.apache.activemq.transport.util.TextWireFormat,java.net.URI)" >
      </constructor>
      <method name="asyncRequest" signature="asyncRequest(java.lang.Object)" >
        <return type="org.apache.activemq.transport.FutureResponse" />
      </method>
      <method name="oneway" signature="oneway(java.lang.Object)" />
      <method name="request" signature="request(java.lang.Object)" >
        <return type="java.lang.Object" />
      </method>
      <method name="run" signature="run()" />
      <method name="getSendHttpClient" signature="getSendHttpClient()" >
        <return type="org.apache.http.client.HttpClient" />
      </method>
      <method name="setSendHttpClient" signature="setSendHttpClient(org.apache.http.client.HttpClient)" />
      <method name="getReceiveHttpClient" signature="getReceiveHttpClient()" >
        <return type="org.apache.http.client.HttpClient" />
      </method>
      <method name="setReceiveHttpClient" signature="setReceiveHttpClient(org.apache.http.client.HttpClient)" />
      <method name="doStart" signature="doStart()" />
      <method name="doStop" signature="doStop(org.apache.activemq.util.ServiceStopper)" />
      <method name="createHttpClient" signature="createHttpClient()" >
        <return type="org.apache.http.client.HttpClient" />
      </method>
      <method name="createClientConnectionManager" signature="createClientConnectionManager()" >
        <return type="org.apache.http.conn.HttpClientConnectionManager" />
      </method>
      <method name="configureMethod" signature="configureMethod(org.apache.http.message.AbstractHttpMessage)" />
      <method name="isTrace" signature="isTrace()" >
        <return type="boolean" />
      </method>
      <method name="setTrace" signature="setTrace(boolean)" />
      <method name="getReceiveCounter" signature="getReceiveCounter()" >
        <return type="int" />
      </method>
      <method name="getSoTimeout" signature="getSoTimeout()" >
        <return type="int" />
      </method>
      <method name="setSoTimeout" signature="setSoTimeout(int)" />
      <method name="setUseCompression" signature="setUseCompression(boolean)" />
      <method name="isUseCompression" signature="isUseCompression()" >
        <return type="boolean" />
      </method>
      <method name="getMinSendAsCompressedSize" signature="getMinSendAsCompressedSize()" >
        <return type="int" />
      </method>
      <method name="setMinSendAsCompressedSize" signature="setMinSendAsCompressedSize(int)" />
      <method name="getPeerCertificates" signature="getPeerCertificates()" >
        <return type="java.security.cert.X509Certificate[]" />
      </method>
      <method name="setPeerCertificates" signature="setPeerCertificates(java.security.cert.X509Certificate[])" />
      <method name="getWireFormat" signature="getWireFormat()" >
        <return type="org.apache.activemq.wireformat.WireFormat" />
      </method>
      <method name="getSystemPropertyPrefix" signature="getSystemPropertyPrefix()" >
        <return type="java.lang.String" />
      </method>
    </class>
    <class name="org.apache.activemq.transport.http.HttpTransportServer" supertypes="org.apache.activemq.transport.WebTransportServerSupport" >
      <constructor name="HttpTransportServer" signature="HttpTransportServer(java.net.URI,org.apache.activemq.transport.http.HttpTransportFactory)" />

      <method name="getSocketAddress" signature="getSocketAddress()" >
        <return type="java.net.InetSocketAddress" />
      </method>
    </class>
  </module>

  <module name="org.apache.activemq.transport.https" >
    <class name="org.apache.activemq.transport.https.HttpsClientTransport" supertypes="org.apache.activemq.transport.http.HttpClientTransport" >
      <constructor name="HttpsClientTransport" signature="HttpsClientTransport(org.apache.activemq.transport.util.TextWireFormat,java.net.URI)" />
      <method name="createSocketFactory" signature="createSocketFactory()" >
        <return type="javax.net.ssl.SSLSocketFactory" />
      </method>
    </class>
  </module>

  <module name="org.apache.activemq.transport.ws" >
    <class name="org.apache.activemq.transport.ws.jetty9.WSServlet" supertypes="org.apache.activemq.broker.BrokerServiceAware,org.eclipse.jetty.websocket.servlet.WebSocketServlet" />
    <class name="org.apache.activemq.transport.ws.AbstractStompSocket" supertypes="org.apache.activemq.transport.TransportSupport,org.apache.activemq.transport.stomp.StompTransport" />
    <class name="org.apache.activemq.transport.ws.jetty9.StompSocket" supertypes="org.apache.activemq.transport.ws.AbstractStompSocket,org.eclipse.jetty.websocket.api.WebSocketListener" />
    <class name="org.apache.activemq.transport.ws.WSTransportServer" supertypes="org.apache.activemq.broker.BrokerServiceAware,org.apache.activemq.transport.WebTransportServerSupport" />
    <class name="org.apache.activemq.transport.ws.StompWSConnection" supertypes="org.eclipse.jetty.websocket.api.WebSocketAdapter,org.eclipse.jetty.websocket.api.WebSocketListener" >
      <method name="isConnected" signature="isConnected()" >
        <return type="boolean" />
      </method>
      <method name="getConnection" signature="getConnection()" >
        <return type="org.eclipse.jetty.websocket.api.Session" />
      </method>
      <method name="receive" signature="receive()" >
        <return type="java.lang.String" />
      </method>
      <method name="receive" signature="receive(long,java.util.concurrent.TimeUnit)" >
        <return type="java.lang.String" />
      </method>
      <method name="receiveNoWait" signature="receiveNoWait()" >
        <return type="java.lang.String" />
      </method>
      <method name="awaitConnection" signature="awaitConnection(long,java.util.concurrent.TimeUnit)" >
        <return type="boolean" />
      </method>
      <method name="getCloseCode" signature="getCloseCode()" >
        <return type="int" />
      </method>
      <method name="getCloseMessage" signature="getCloseMessage()" >
        <return type="java.lang.String" />
      </method>
    </class>
  </module>

  <module name="org.apache.activemq.transport.wss" >
    <class name="org.apache.activemq.transport.wss.WSSTransportFactory" supertypes="org.apache.activemq.broker.BrokerServiceAware,org.apache.activemq.transport.TransportFactory" />
    <class name="org.apache.activemq.transport.wss.WSSTransportServer" supertypes="org.apache.activemq.transport.ws.WSTransportServer" />
  </module>

  <module name="org.apache.activemq.tool" >
    <class name="org.apache.activemq.tool.AbstractJmsClient" >
      <method name="getClient" signature="getClient()" >
        <return type="org.apache.activemq.tool.properties.JmsClientProperties" />
      </method>
      <method name="getConnection" signature="getConnection()" >
        <return type="javax.jms.Connection" />
      </method>
      <method name="getFactory" signature="getFactory()" >
        <return type="javax.jms.ConnectionFactory" />
      </method>
      <method name="getSession" signature="getSession()" >
        <return type="javax.jms.Session" />
      </method>
    </class>
    <class name="org.apache.activemq.tool.properties.AbstractObjectProperties" />
    <class name="org.apache.activemq.tool.properties.JmsClientProperties" supertypes="org.apache.activemq.tool.properties.AbstractObjectProperties" />
  </module>

  <module name="org.apache.activemq.util" >
    <class name="org.apache.activemq.util.ServiceSupport" supertypes="java.lang.Object,org.apache.activemq.Service" >
      <method name="isStarted" signature="isStarted()" >
        <return type="boolean" />
      </method>
      <method name="isStopping" signature="isStopping()" >
        <return type="boolean" />
      </method>
      <method name="isStopped" signature="isStopped()" >
        <return type="boolean" />
      </method>
    </class>
  </module>

  <module name="org.apache.activemq.web" >
    <class name="org.apache.activemq.web.MessageServletSupport" supertypes="javax.servlet.http.HttpServlet" />
    <class name="org.apache.activemq.web.MessageListenerServlet" supertypes="org.apache.activemq.web.MessageServletSupport" />
    <class name="org.apache.activemq.web.AjaxServlet" supertypes="org.apache.activemq.web.MessageListenerServlet" />
    <class name="org.apache.activemq.web.MessageServlet" supertypes="org.apache.activemq.web.MessageServletSupport" />
    <class name="org.apache.activemq.web.QueueBrowseServlet" supertypes="javax.servlet.http.HttpServlet" >
      <method name="getMessageRenderer" signature="getMessageRenderer(javax.servlet.http.HttpServletRequest)" >
        <return type="org.apache.activemq.web.view.MessageRenderer" />
      </method>
      <method name="getSelector" signature="getSelector(javax.servlet.http.HttpServletRequest)" >
        <return type="java.lang.String" />
      </method>
      <method name="getQueue" signature="getQueue(javax.servlet.http.HttpServletRequest,javax.jms.Session)" >
        <return type="javax.jms.Queue" />
      </method>
    </class>
    <class name="org.apache.activemq.web.WebClient" supertypes="java.io.Externalizable,java.lang.Object,javax.servlet.http.HttpSessionActivationListener,javax.servlet.http.HttpSessionBindingListener" >
      <method name="getWebClient" signature="getWebClient(javax.servlet.http.HttpServletRequest)" >
        <return type="org.apache.activemq.web.WebClient" />
      </method>
      <method name="getWebClient" signature="getWebClient(javax.servlet.http.HttpSession)" >
        <return type="org.apache.activemq.web.WebClient" />
      </method>
      <method name="getDeliveryMode" signature="getDeliveryMode()" >
        <return type="int" />
      </method>
      <method name="setDeliveryMode" signature="setDeliveryMode(int)" >
      </method>
      <method name="getUsername" signature="getUsername()" >
        <tags>sensitive_info,credential,username</tags>
        <return type="java.lang.String"/>
        <source argpos="-1" kind="sensitive_info" resource="web"/>
      </method>
      <method name="setUsername" signature="setUsername(java.lang.String)" >
        <tags>username:0</tags>
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="getPassword" signature="getPassword()" >
        <tags>sensitive_info,credential,password</tags>
        <return type="java.lang.String"/>
        <source argpos="-1" kind="sensitive_info" resource="web"/>
      </method>
      <method name="setPassword" signature="setPassword(java.lang.String)" >
        <tags>password:1</tags>
        <sink argpos="1" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="closeConsumers" signature="closeConsumers()" />
      <method name="close" signature="close()" />
      <method name="isClosed" signature="isClosed()" >
        <return type="boolean" />
      </method>
      <method name="writeExternal" signature="writeExternal(java.io.ObjectOutput)" />
      <method name="readExternal" signature="readExternal(java.io.ObjectInput)" />
      <method name="send" signature="send(javax.jms.Destination,javax.jms.Message)" />
      <method name="send" signature="send(javax.jms.Destination,javax.jms.Message,boolean,int,long)" />
      <method name="getSession" signature="getSession()" >
        <return type="javax.jms.Session" />
      </method>
      <method name="getConnection" signature="getConnection()" >
        <return type="javax.jms.Connection" />
      </method>
      <method name="initConnectionFactory" signature="initConnectionFactory(javax.servlet.ServletContext)" />
      <method name="getProducer" signature="getProducer()" >
        <return type="javax.jms.MessageProducer" />
      </method>
      <method name="setProducer" signature="setProducer(javax.jms.MessageProducer)" />
      <method name="getConsumer" signature="getConsumer(javax.jms.Destination,java.lang.String)" >
        <return type="javax.jms.MessageConsumer" />
      </method>
      <method name="getConsumer" signature="getConsumer(javax.jms.Destination,java.lang.String,boolean)" >
        <return type="javax.jms.MessageConsumer" />
      </method>
      <method name="closeConsumer" signature="closeConsumer(javax.jms.Destination)" />
      <method name="getConsumers" signature="getConsumers()" >
        <return type="java.util.List" />
      </method>
      <method name="createSession" signature="createSession()" >
        <return type="javax.jms.Session" />
      </method>
      <method name="getSemaphore" signature="getSemaphore()" >
        <return type="java.util.concurrent.Semaphore" />
      </method>
      <method name="sessionWillPassivate" signature="sessionWillPassivate(javax.servlet.http.HttpSessionEvent)" />
      <method name="sessionDidActivate" signature="sessionDidActivate(javax.servlet.http.HttpSessionEvent)" />
      <method name="valueBound" signature="valueBound(javax.servlet.http.HttpSessionBindingEvent)" />
      <method name="valueUnbound" signature="valueUnbound(javax.servlet.http.HttpSessionBindingEvent)" />
      <method name="createWebClient" signature="createWebClient(javax.servlet.http.HttpServletRequest)" >
        <return type="org.apache.activemq.web.WebClient" />
      </method>
    </class>
    <class name="org.apache.activemq.web.AjaxWebClient" supertypes="org.apache.activemq.web.WebClient" >
      <method name="getIdMap" signature="getIdMap()" >
        <return type="java.util.Map" />
      </method>
      <method name="getDestinationNameMap" signature="getDestinationNameMap()" >
        <return type="java.util.Map" />
      </method>
      <method name="getListener" signature="getListener()" >
        <return type="org.apache.activemq.web.AjaxListener" />
      </method>
      <method name="getMillisSinceLastAccessed" signature="getMillisSinceLastAccessed()" >
        <return type="long" />
      </method>
      <method name="updateLastAccessed" signature="updateLastAccessed()" />
      <method name="closeIfExpired" signature="closeIfExpired()" >
        <return type="boolean" />
      </method>
      <method name="getNow" signature="getNow()" >
        <return type="long" />
      </method>
    </class>
    <class name="org.apache.activemq.web.WebConsolePort" >
      <method name="getPort" signature="getPort()" >
        <return type="int" />
      </method>
      <method name="setPort" signature="setPort(int)" >
        <sink kind="resource_injection" argpos="0" resource="network" />
      </method>
      <method name="getHost" signature="getHost()" >
        <return type="java.lang.String" />
      </method>
      <method name="setHost" signature="setHost(java.lang.String)" >
        <sink kind="ssrf" argpos="0" resource="network" />
        <sink kind="insecure_transport" argpos="0" resource="web" />
      </method>
    </class>
    <class name="org.apache.activemq.web.config.AbstractConfiguration" supertypes="java.lang.Object,org.apache.activemq.web.config.WebConsoleConfiguration" >
      <method name="getConnectionFactory" signature="getConnectionFactory()" >
        <return type="javax.jms.ConnectionFactory" />
      </method>
      <method name="getJmxPassword" signature="getJmxPassword()" >
        <return type="java.lang.String" />
      </method>
      <method name="getJmxUrls" signature="getJmxUrls()" >
        <return type="java.util.Collection" />
      </method>
      <method name="getJmxUser" signature="getJmxUser()" >
        <return type="java.lang.String" />
      </method>
      <method name="makeConnectionFactory" signature="makeConnectionFactory(java.lang.String,java.lang.String,java.lang.String)" >
        <tags>username:1,password:2</tags>
        <return type="javax.jms.ConnectionFactory" />
        <sink kind="ssrf" argpos="0" resource="network" />
        <sink kind="insecure_transport" argpos="0" resource="web" />
        <sink argpos="1,2" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="makeJmxUrls" signature="makeJmxUrls(java.lang.String)" >
        <return type="java.util.Collection" />
        <sink kind="ssrf" argpos="0" resource="network" />
        <sink kind="insecure_transport" argpos="0" resource="web" />
      </method>
    </class>
    <class name="org.apache.activemq.web.config.JNDIConfiguration" supertypes="org.apache.activemq.web.config.AbstractConfiguration" >
      <method name="getJndiString" signature="getJndiString(java.lang.String)" >
        <return type="java.lang.String" />
      </method>
    </class>
    <class name="org.apache.activemq.web.config.JspConfigurer" >
      <method name="configureJetty" signature="configureJetty(org.eclipse.jetty.server.Server,org.eclipse.jetty.server.handler.HandlerCollection)" />
    </class>
    <class name="org.apache.activemq.web.config.OsgiConfiguration" supertypes="org.apache.activemq.web.config.AbstractConfiguration" />
    <class name="org.apache.activemq.web.view.MessageRenderer" >
      <method name="renderMessages" signature="renderMessages(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.jms.QueueBrowser)" />
      <method name="renderMessage" signature="renderMessage(java.io.PrintWriter,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.jms.QueueBrowser,javax.jms.Message)" />
    </class>
    <class name="org.apache.activemq.web.view.RssMessageRenderer" supertypes="org.apache.activemq.web.view.SimpleMessageRenderer" >
      <method name="renderMessage" signature="renderMessage(java.io.PrintWriter,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.jms.QueueBrowser,javax.jms.Message)" />
      <method name="getDescription" signature="getDescription()" >
        <return type="java.lang.String" />
      </method>
      <method name="setDescription" signature="setDescription(java.lang.String)" />
      <method name="getFeedType" signature="getFeedType()" >
        <return type="java.lang.String" />
      </method>
      <method name="setFeedType" signature="setFeedType(java.lang.String)" />
      <method name="getEntryContentType" signature="getEntryContentType()" >
        <return type="java.lang.String" />
      </method>
      <method name="setEntryContentType" signature="setEntryContentType(java.lang.String)" />
      <method name="printFooter" signature="printFooter(java.io.PrintWriter,javax.jms.QueueBrowser,javax.servlet.http.HttpServletRequest)" />
      <method name="printHeader" signature="printHeader(java.io.PrintWriter,javax.jms.QueueBrowser,javax.servlet.http.HttpServletRequest)" />
      <method name="getFeed" signature="getFeed(javax.jms.QueueBrowser,javax.servlet.http.HttpServletRequest)" >
        <return type="com.rometools.rome.feed.synd.SyndFeed" />
      </method>
      <method name="createEntry" signature="createEntry(javax.jms.QueueBrowser,javax.jms.Message,javax.servlet.http.HttpServletRequest)" >
        <return type="com.rometools.rome.feed.synd.SyndEntry" />
      </method>
      <method name="createEntryContent" signature="createEntryContent(javax.jms.QueueBrowser,javax.jms.Message,javax.servlet.http.HttpServletRequest)" >
        <return type="com.rometools.rome.feed.synd.SyndContent" />
      </method>
      <method name="createFeed" signature="createFeed(javax.jms.QueueBrowser,javax.servlet.http.HttpServletRequest)" >
        <return type="com.rometools.rome.feed.synd.SyndFeed" />
      </method>
    </class>
    <class name="org.apache.activemq.web.view.SimpleMessageRenderer" supertypes="java.lang.Object,org.apache.activemq.web.view.MessageRenderer" >
      <method name="getMaxMessages" signature="getMaxMessages()" >
        <return type="int" />
      </method>
      <method name="setMaxMessages" signature="setMaxMessages(int)" />
      <method name="getContentType" signature="getContentType()" >
        <return type="java.lang.String" />
      </method>
      <method name="setContentType" signature="setContentType(java.lang.String)" />
      <method name="printHeader" signature="printHeader(java.io.PrintWriter,javax.jms.QueueBrowser,javax.servlet.http.HttpServletRequest)" />
      <method name="printFooter" signature="printFooter(java.io.PrintWriter,javax.jms.QueueBrowser,javax.servlet.http.HttpServletRequest)" />
    </class>
    <class name="org.apache.activemq.web.view.XmlMessageRenderer" supertypes="org.apache.activemq.web.view.SimpleMessageRenderer" >
      <method name="getXstream" signature="getXstream()" >
        <return type="com.thoughtworks.xstream.XStream" />
      </method>
      <method name="setXstream" signature="setXstream(com.thoughtworks.xstream.XStream)" />
    </class>
    <class name="org.apache.activemq.wireformat.ObjectStreamWireFormat" supertypes="java.lang.Object,org.apache.activemq.wireformat.WireFormat" >
      <method name="marshal" signature="marshal(java.lang.Object)" >
        <return type="org.apache.activemq.util.ByteSequence" />
      </method>
      <method name="unmarshal" signature="unmarshal(org.apache.activemq.util.ByteSequence)" >
        <return type="java.lang.Object" />
      </method>
      <method name="marshal" signature="marshal(java.lang.Object,java.io.DataOutput)" />
      <method name="unmarshal" signature="unmarshal(java.io.DataInput)" >
        <return type="java.lang.Object" />
      </method>
      <method name="setVersion" signature="setVersion(int)" />
      <method name="getVersion" signature="getVersion()" >
        <return type="int" />
      </method>
    </class>
    <class name="org.apache.activemq.web.DestinationFacade" >
      <method name="removeDestination" signature="removeDestination()" />
      <method name="addDestination" signature="addDestination()" />
      <method name="getBrokerAdmin" signature="getBrokerAdmin()" >
        <return type="org.apache.activemq.broker.jmx.BrokerViewMBean" />
      </method>
      <method name="getBrokerFacade" signature="getBrokerFacade()" >
        <return type="org.apache.activemq.web.BrokerFacade" />
      </method>
      <method name="isQueue" signature="isQueue()" >
        <return type="boolean" />
      </method>
      <method name="getJMSDestination" signature="getJMSDestination()" >
        <return type="java.lang.String" />
      </method>
      <method name="setJMSDestination" signature="setJMSDestination(java.lang.String)" />
      <method name="getJMSDestinationType" signature="getJMSDestinationType()" >
        <return type="java.lang.String" />
      </method>
      <method name="setJMSDestinationType" signature="setJMSDestinationType(java.lang.String)" />
      <method name="createDestination" signature="createDestination()" >
        <return type="org.apache.activemq.command.ActiveMQDestination" />
      </method>
      <method name="getValidDestination" signature="getValidDestination()" >
        <return type="java.lang.String" />
      </method>
      <method name="getQueueView" signature="getQueueView()" >
        <return type="org.apache.activemq.broker.jmx.QueueViewMBean" />
      </method>
      <method name="redirectToRequest" signature="redirectToRequest(javax.servlet.http.HttpServletRequest)" >
        <return type="org.springframework.web.servlet.ModelAndView" />
      </method>
      <method name="redirectToBrowseView" signature="redirectToBrowseView()" >
        <return type="org.springframework.web.servlet.ModelAndView" />
      </method>
      <method name="redirectToDestinationView" signature="redirectToDestinationView()" >
        <return type="org.springframework.web.servlet.ModelAndView" />
      </method>
      <method name="getPhysicalDestinationName" signature="getPhysicalDestinationName()" >
        <return type="java.lang.String" />
      </method>
      <method name="getSupportedHttpMethods" signature="getSupportedHttpMethods()" >
        <return type="java.lang.String[]" />
      </method>
    </class>
    <class name="org.apache.activemq.web.controller.CopyMessage" supertypes="org.springframework.web.servlet.mvc.Controller,org.apache.activemq.web.DestinationFacade" />
    <class name="org.apache.activemq.web.controller.CreateDestination" supertypes="org.springframework.web.servlet.mvc.Controller,org.apache.activemq.web.DestinationFacade" />
    <class name="org.apache.activemq.web.controller.DeleteDestination" supertypes="org.springframework.web.servlet.mvc.Controller,org.apache.activemq.web.DestinationFacade" />
    <class name="org.apache.activemq.web.controller.DeleteJob" supertypes="org.springframework.web.servlet.mvc.Controller,org.apache.activemq.web.DestinationFacade" />
    <class name="org.apache.activemq.web.controller.DeleteMessage" supertypes="org.springframework.web.servlet.mvc.Controller,org.apache.activemq.web.DestinationFacade" />
    <class name="org.apache.activemq.web.controller.MoveMessage" supertypes="org.springframework.web.servlet.mvc.Controller,org.apache.activemq.web.DestinationFacade" />
    <class name="org.apache.activemq.web.controller.PurgeDestination" supertypes="org.springframework.web.servlet.mvc.Controller,org.apache.activemq.web.DestinationFacade" />
    <class name="org.apache.activemq.web.controller.RetryMessage" supertypes="org.springframework.web.servlet.mvc.Controller,org.apache.activemq.web.DestinationFacade" />
    <class name="org.apache.activemq.web.controller.SendMessage" supertypes="org.springframework.web.servlet.mvc.Controller,org.apache.activemq.web.DestinationFacade" />
  </module>
</library>