<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.optimyth.com/schema/definitions/library_metadata"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="java.http" standard="http" technology="java">

  <description>HTTP client libraries for Java</description>

  <module name="retrofit.1" standard="retrofit.1">
    <description url="https://square.github.io/retrofit/">Retrofit 1.x - Type-safe HTTP client</description>

    <!-- Retrofit 1.x: https://square.github.io/retrofit/1.x/retrofit/ -->
    <class name="retrofit.RestAdapter">
      <method name="create" signature="create(java.lang.Class)" >
        <return type="*" />
      </method>
    </class>

    <class name="retrofit.RestAdapter.Builder">
      <constructor name="Builder" signature="Builder()" match="name" />
      <method name="setClient" signature="setClient()" match="name" >
        <return type="retrofit.RestAdapter.Builder" />
      </method>
      <method name="setConverter" signature="setConverter()" match="name" >
        <return type="retrofit.RestAdapter.Builder" />
      </method>
      <method name="setEndpoint" signature="setEndpoint()" match="name" >
        <return type="retrofit.RestAdapter.Builder" />
      </method>
      <method name="setConverter" signature="setConverter(retrofit.converter.Converter)" >
        <return type="retrofit.RestAdapter.Builder" />
      </method>
      <method name="setErrorHandler" signature="setErrorHandler(retrofit.ErrorHandler)"  >
        <return type="retrofit.RestAdapter.Builder" />
      </method>
      <method name="setExecutors" signature="setExecutors(java.util.concurrent.Executor, java.util.concurrent.Executor)" >
        <return type="retrofit.RestAdapter.Builder" />
      </method>
      <method name="setLog" signature="setLog(retrofit.RestAdapter.Log)" >
        <return type="retrofit.RestAdapter.Builder" />
      </method>
      <method name="setLogLevel" signature="setLogLevel(retrofit.RestAdapter.LogLevel)" >
        <return type="retrofit.RestAdapter.Builder" />
      </method>
      <method name="setProfiler" signature="setProfiler(retrofit.Profiler)" >
        <return type="retrofit.RestAdapter.Builder" />
      </method>
      <method name="setRequestInterceptor" signature="setRequestInterceptor(retrofit.RequestInterceptor)" >
        <return type="retrofit.RestAdapter.Builder" />
      </method>
      <method name="build" signature="build()" >
        <return type="retrofit.RestAdapter" />
      </method>
    </class>

  </module>

  <module name="retrofit.2" standard="retrofit.2">
    <description url="https://square.github.io/retrofit/">Retrofit 2.x - Type-safe HTTP client</description>

    <!-- Retrofit 2.x: https://square.github.io/retrofit/2.x/retrofit/ -->
    <class name="retrofit2.Retrofit">
      <method name="create" signature="create(java.lang.Class)" >
        <return type="*" />
      </method>
    </class>

    <class name="retrofit2.Retrofit.Builder">
      <constructor name="Builder" signature="Builder()" match="name" />
      <method name="client" signature="client(OkHttpClient client)" match="name" >
        <return type="retrofit2.Retrofit.Builder" />
      </method>
      <method name="callFactory" signature="callFactory(okhttp3.Call.Factory)" match="name" >
        <return type="retrofit2.Retrofit.Builder" />
      </method>
      <method name="baseUrl" signature="baseUrl(String baseUrl)" match="name" >
        <return type="retrofit2.Retrofit.Builder" />
        <sink argpos="0" kind="ssrf"/>
        <sink argpos="0" kind="insecure_transport" resource="web" />
        <sink argpos="0" kind="http_parameter_pollution" resource="filesystem" />
      </method>
      <method name="addConverterFactory" signature="addConverterFactory(Converter.Factory)" match="name" >
        <return type="retrofit2.Retrofit.Builder" />
      </method>
      <method name="addCallAdapterFactory" signature="addCallAdapterFactory(CallAdapter.Factory)" match="name" >
        <return type="retrofit2.Retrofit.Builder" />
      </method>
      <method name="validateEagerly" signature="validateEagerly(java.lang.Boolean)" >
        <return type="retrofit2.Retrofit.Builder" />
      </method>
      <method name="build" signature="build()" >
        <return type="retrofit2.Retrofit" />
      </method>
    </class>

  </module>

  <module name="OkHttp.2" standard="OkHttp.2">
    <description url="https://square.github.io/okhttp/">OkHttp 2.x - HTTP client</description>

    <!-- OkHttp: https://square.github.io/okhttp/2.x/okhttp/ -->
    <class name="com.squareup.okhttp.OkHttpClient" >
      <method name="authenticator" signature="authenticator()" >
        <return type="com.squareup.okhttp.Authenticator" />
      </method>
      <method name="cache" signature="cache()" >
        <return type="com.squareup.okhttp.Cache" />
      </method>
      <method name="callTimeoutMillis" signature="callTimeoutMillis()" >
        <return type="int" />
      </method>
      <method name="certificatePinner " signature="certificatePinner()" >
        <return type="com.squareup.okhttp.CertificatePinner" />
      </method>
      <method name="connectionPool" signature="connectionPool()" >
        <return type="com.squareup.okhttp.ConnectionPool" />
      </method>
      <method name="connectionSpecs" signature="connectionSpecs()" >
        <return type="java.util.List" />
      </method>
      <method name="connectTimeoutMillis" signature="connectTimeoutMillis(()" >
        <return type="int" />
      </method>
      <method name="cookieJar" signature="cookieJar()" >
        <return type="com.squareup.okhttp.CookieJar" />
      </method>
      <method name="dispatcher" signature="dispatcher()" >
        <return type="com.squareup.okhttp.Dispatcher" />
      </method>
      <method name="dns" signature="dns()" >
        <return type="com.squareup.okhttp.Dns" />
      </method>
      <method name="eventListenerFactory" signature="eventListenerFactory()" >
        <return type="com.squareup.okhttp.EventListener.Factory" />
      </method>
      <method name="followRedirects" signature="followRedirects()" >
        <return type="java.lang.Boolean" />
      </method>
      <method name="followSslRedirects" signature="followSslRedirects()" >
        <return type="java.lang.Boolean" />
      </method>
      <method name="hostnameVerifier" signature="hostnameVerifier()" >
        <return type="javax.net.ssl.HostnameVerifier" />
      </method>
      <method name="interceptors" signature="interceptors()" >
        <return type="java.util.List" />
      </method>
      <method name="networkInterceptors" signature="networkInterceptors()" >
        <return type="java.util.List" />
      </method>
      <method name="newBuilder" signature="newBuilder()" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="newCall" signature="newCall(com.squareup.okhttp.Request)" >
        <return type="" />
      </method>
      <method name="newWebSocket" signature="newWebSocket(com.squareup.okhttp.Request, com.squareup.okhttp.WebSocketListene)" >
        <return type="com.squareup.okhttp.WebSocket" />
      </method>
      <method name="pingIntervalMillis" signature="pingIntervalMillis()" >
        <return type="int" />
      </method>
      <method name="protocols" signature="protocols()" >
        <return type="java.util.List" />
      </method>
      <method name="proxy" signature="proxy()" >
        <return type="java.net.Proxy" />
      </method>
      <method name="proxyAuthenticator" signature="proxyAuthenticator()" >
        <return type="com.squareup.okhttp.Authenticator" />
      </method>
      <method name="proxySelector" signature="proxySelector()" >
        <return type="java.net.ProxySelector" />
      </method>
      <method name="readTimeoutMillis" signature="readTimeoutMillis()" >
        <return type="int" />
      </method>
      <method name="retryOnConnectionFailure" signature="retryOnConnectionFailure()" >
        <return type="java.lang.Boolean" />
      </method>
      <method name="socketFactory" signature="socketFactory()" >
        <return type="javax.net.SocketFactory" />
      </method>
      <method name="sslSocketFactory" signature="sslSocketFactory()" >
        <return type="javax.net.SocketFactor" />
      </method>
      <method name="writeTimeoutMillis" signature="writeTimeoutMillis()" >
        <return type="int" />
      </method>
    </class>

    <class name="com.squareup.okhttp.OkHttpClient.Builder">
      <method name="addInterceptor" signature="addInterceptor(com.squareup.okhttp.Interceptor)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="addNetworkInterceptor" signature="addNetworkInterceptor(com.squareup.okhttp.Interceptor)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="authenticator(" signature="authenticator(com.squareup.okhttp.Authenticator)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="build" signature="build()" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient" />
      </method>
      <method name="cache" signature="cache(com.squareup.okhttp.Cache)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="callTimeout" signature="callTimeout()" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="certificatePinner" signature="addInterceptor(com.squareup.okhttp.CertificatePinner)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="connectionSpecs" signature="connectionSpecs(java.util.List)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="connectTimeout" signature="connectTimeout()" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="cookieJar" signature="cookieJar(com.squareup.okhttp.CookieJar)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="dispatcher" signature="dispatcher(com.squareup.okhttp.Dispatcher)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="dns" signature="dns(com.squareup.okhttp.Dns)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="eventListener" signature="eventListener(com.squareup.okhttp.EventListener)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="eventListenerFactory" signature="eventListenerFactory(com.squareup.okhttp.EventListener.Factory)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="followRedirects" signature="followRedirects(java.lang.Boolean" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="followSslRedirects" signature="followSslRedirects(java.lang.Boolean)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="hostnameVerifier" signature="hostnameVerifier(javax.net.ssl.HostnameVerifier)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="pingInterval" signature="pingInterval()" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="protocols" signature="protocols(java.util.List)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="proxy" signature="    proxy(java.net.Proxy)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="proxyAuthenticator" signature="proxyAuthenticator(com.squareup.okhttp.Authenticator)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="proxySelector" signature="proxySelector(java.net.ProxySelector)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="readTimeout" signature="readTimeout()" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="retryOnConnectionFailure" signature="retryOnConnectionFailure(java.lang.Boolean" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="socketFactory(" signature="socketFactory(javax.net.SocketFactory)" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="sslSocketFactory" signature="sslSocketFactory()" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
      <method name="writeTimeout" signature="writeTimeout()" match="name" >
        <return type="com.squareup.okhttp.OkHttpClient.Builder" />
      </method>
    </class>

    <class name="com.squareup.okhttp.Request">
      <method name="body" signature="body()" >
        <return type="com.squareup.okhttp.RequestBody" />
      </method>
      <method name="header" signature="header(java.lang.String)" >
        <return type="java.lang.String" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
      <method name="headers" signature="headers()" match="name" >
        <return type="java.util.List" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
    </class>

    <class name="com.squareup.okhttp.Request.Builder">
      <method name="addHeader" signature="addHeader(java.lang.String, java.lang.String)" >
        <tags>header.name:0,header.value:1</tags>
        <return type="com.squareup.okhttp.Request.Builder" />
        <sink argpos="0,1" kind="header_manipulation" resource="web"/>
        <sink argpos="0" kind="cookie_plaintext_storage" resource="web" />
      </method>
      <method name="build" signature="build()" >
        <return type="com.squareup.okhttp.Request" />
      </method>
      <method name="cacheControl" signature="cacheControl()" match="name" >
        <return type="com.squareup.okhttp.Request.Builder" />
      </method>
      <method name="delete" signature="delete()" >
        <return type="com.squareup.okhttp.Request.Builder" />
      </method>
      <method name="get" signature="get()" >
        <return type="com.squareup.okhttp.Request.Builder" />
      </method>
      <method name="head" signature="head()" >
        <return type="com.squareup.okhttp.Request.Builder" />
      </method>
      <method name="header" signature="header(java.lang.Stting, java.lang.String)" >
        <return type="com.squareup.okhttp.Request.Builder" />
        <sink argpos="0,1" kind="header_manipulation" resource="web"/>
        <sink argpos="0" kind="cookie_plaintext_storage" resource="web" />
      </method>
      <method name="headers" signature="headers(com.squareup.okhttp.Headers)" >
        <return type="com.squareup.okhttp.Request.Builder" />
      </method>
      <method name="method" signature="method()" match="name" >
        <return type="com.squareup.okhttp.Request.Builder" />
      </method>
      <method name="patch" signature="patch()" >
        <return type="com.squareup.okhttp.Request.Builder" />
      </method>
      <method name="post" signature="post()" >
        <return type="com.squareup.okhttp.Request.Builder" />
      </method>
      <method name="put" signature="put()" >
        <return type="com.squareup.okhttp.Request.Builder" />
      </method>
      <method name="removeHeader" signature="removeHeader(java.lang.String)" >
        <return type="com.squareup.okhttp.Request.Builder" />
      </method>
      <method name="tag" signature="tag(java.lang.String)" >
        <return type="com.squareup.okhttp.Request.Builder" />
      </method>
      <method name="url" signature="url(java.lang.String)" >
        <return type="com.squareup.okhttp.Request.Builder" />
        <sink argpos="0" kind="ssrf" resource="web"/>
        <sink argpos="0" kind="http_parameter_pollution" resource="filesystem" />
      </method>
    </class>

    <class name="com.squareup.okhttp.RequestBody"/>

    <class name="com.squareup.okhttp.WebSocket">
      <method name="send" signature="send()" match="name" >
        <sink argpos="0,1" kind="ssrf" resource="web"/>
      </method>
    </class>

    <class name="com.squareup.okhttp.HttpUrl"/>

    <class name="com.squareup.okhttp.HttpUrl.Builder">
      <method name="addEncodedPathSegment" signature="addEncodedPathSegment(java.lang.String)" match="name" alias="addEncodedPathSegments">
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="addEncodedQueryParameter" signature="addEncodedQueryParameter(java.lang.String, java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="addPathSegment" signature="addPathSegment(java.lang.String)" match="name" alias="addPathSegments">
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="addQueryParameter" signature="addQueryParameter(java.lang.String, java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="build" signature="build()" match="name" >
        <return type="com.squareup.okhttp.HttpUrl" />
      </method>
      <method name="encodedFragment" signature="encodedFragment(java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="encodedPassword" signature="encodedPassword(java.lang.String)" match="name" >
        <tags>password:0</tags>
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="encodedPath" signature="encodedPath(java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="encodedQuery" signature="encodedQuery(java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="encodedUsername" signature="encodedUsername(java.lang.String)" match="name" >
        <tags>username:0</tags>
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
        <sink argpos="0" kind="hardcoded_credentials" resource="web"/>
      </method>
      <method name="fragment" signature="fragment(java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="host" signature="host(java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
        <sink argpos="0" kind="resource_injection" resource="other" />
      </method>
      <method name="port" signature="port(int)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
        <sink argpos="0" kind="resource_injection" resource="other" />
      </method>
      <method name="password" signature="password(java.lang.String)" match="name" >
        <tags>password:0</tags>
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="username" signature="username(java.lang.String)" match="name" >
        <tags>username:0</tags>
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
        <sink argpos="0" kind="hardcoded_credentials" resource="web"/>
      </method>
      <method name="query" signature="query(java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="removeAllEncodedQueryParameters" signature="removeAllEncodedQueryParameters(java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="removeAllQueryParameters" signature="removeAllQueryParameters(java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="removePathSegment" signature="removePathSegment(java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="scheme" signature="scheme(java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="setEncodedPathSegment" signature="setEncodedPathSegment(java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="setEncodedQueryParameter" signature="setEncodedQueryParameter(java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="setPathSegment" signature="setPathSegment(java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
      <method name="setQueryParameter" signature="setQueryParameter(java.lang.String)" match="name" >
        <return type="com.squareup.okhttp.HttpUrl.Builder" />
      </method>
    </class>

    <class name="com.squareup.okhttp.Credentials">
      <method name="basic" signature="basic(java.lang.String, java.lang.String)" >
        <tags>username:0, password:1</tags>
        <return type="java.lang.String" />
        <sink argpos="0,1" kind="hardcoded_credentials" resource="web"/>
      </method>
    </class>
  </module>

  <module name="OkHttp.3" standard="OkHttp.3">
    <description url="https://square.github.io/okhttp/">OkHttp 3.x+ - HTTP client</description>

    <!-- OkHttp3: https://square.github.io/okhttp/3.x/okhttp -->
    <class name="okhttp3.OkHttpClient" >
      <method name="authenticator" signature="authenticator()" >
        <return type="okhttp3.Authenticator" />
      </method>
      <method name="cache" signature="cache()" >
        <return type="okhttp3.Cache" />
      </method>
      <method name="callTimeoutMillis" signature="callTimeoutMillis()" >
        <return type="int" />
      </method>
      <method name="certificatePinner " signature="certificatePinner()" >
        <return type="okhttp3.CertificatePinner" />
      </method>
      <method name="connectionPool" signature="connectionPool()" >
        <return type="okhttp3.ConnectionPool" />
      </method>
      <method name="connectionSpecs" signature="connectionSpecs()" >
        <return type="java.util.List" />
      </method>
      <method name="connectTimeoutMillis" signature="connectTimeoutMillis(()" >
        <return type="int" />
      </method>
      <method name="cookieJar" signature="cookieJar()" >
        <return type="okhttp3.CookieJar" />
      </method>
      <method name="dispatcher" signature="dispatcher()" >
        <return type="okhttp3.Dispatcher" />
      </method>
      <method name="dns" signature="dns()" >
        <return type="okhttp3.Dns" />
      </method>
      <method name="eventListenerFactory" signature="eventListenerFactory()" >
        <return type="okhttp3.EventListener.Factory" />
      </method>
      <method name="followRedirects" signature="followRedirects()" >
        <return type="java.lang.Boolean" />
      </method>
      <method name="followSslRedirects" signature="followSslRedirects()" >
        <return type="java.lang.Boolean" />
      </method>
      <method name="hostnameVerifier" signature="hostnameVerifier()" >
        <return type="javax.net.ssl.HostnameVerifier" />
      </method>
      <method name="interceptors" signature="interceptors()" >
        <return type="java.util.List" />
      </method>
      <method name="networkInterceptors" signature="networkInterceptors()" >
        <return type="java.util.List" />
      </method>
      <method name="newBuilder" signature="newBuilder()" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="newCall" signature="newCall(okhttp3.Request)" >
        <return type="" />
      </method>
      <method name="newWebSocket" signature="newWebSocket(okhttp3.Request, okhttp3.WebSocketListene)" >
        <return type="okhttp3.WebSocket" />
      </method>
      <method name="pingIntervalMillis" signature="pingIntervalMillis()" >
        <return type="int" />
      </method>
      <method name="protocols" signature="protocols()" >
        <return type="java.util.List" />
      </method>
      <method name="proxy" signature="proxy()" >
        <return type="java.net.Proxy" />
      </method>
      <method name="proxyAuthenticator" signature="proxyAuthenticator()" >
        <return type="okhttp3.Authenticator" />
      </method>
      <method name="proxySelector" signature="proxySelector()" >
        <return type="java.net.ProxySelector" />
      </method>
      <method name="readTimeoutMillis" signature="readTimeoutMillis()" >
        <return type="int" />
      </method>
      <method name="retryOnConnectionFailure" signature="retryOnConnectionFailure()" >
        <return type="java.lang.Boolean" />
      </method>
      <method name="socketFactory" signature="socketFactory()" >
        <return type="javax.net.SocketFactory" />
      </method>
      <method name="sslSocketFactory" signature="sslSocketFactory()" >
        <return type="javax.net.SocketFactor" />
      </method>
      <method name="writeTimeoutMillis" signature="writeTimeoutMillis()" >
        <return type="int" />
      </method>
    </class>

    <class name="okhttp3.OkHttpClient.Builder">
      <method name="addInterceptor" signature="addInterceptor(okhttp3.Interceptor)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="addNetworkInterceptor" signature="addNetworkInterceptor(okhttp3.Interceptor)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="authenticator(" signature="authenticator(okhttp3.Authenticator)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="build" signature="build()" match="name" >
        <return type="okhttp3.OkHttpClient" />
      </method>
      <method name="cache" signature="cache(okhttp3.Cache)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="callTimeout" signature="callTimeout()" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="certificatePinner" signature="addInterceptor(okhttp3.CertificatePinner)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="connectionSpecs" signature="connectionSpecs(java.util.List)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="connectTimeout" signature="connectTimeout()" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="cookieJar" signature="cookieJar(okhttp3.CookieJar)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="dispatcher" signature="dispatcher(okhttp3.Dispatcher)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="dns" signature="dns(okhttp3.Dns)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="eventListener" signature="eventListener(okhttp3.EventListener)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="eventListenerFactory" signature="eventListenerFactory(okhttp3.EventListener.Factory)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="followRedirects" signature="followRedirects(java.lang.Boolean" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="followSslRedirects" signature="followSslRedirects(java.lang.Boolean)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="hostnameVerifier" signature="hostnameVerifier(javax.net.ssl.HostnameVerifier)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="pingInterval" signature="pingInterval()" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="protocols" signature="protocols(java.util.List)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="proxy" signature="	proxy(java.net.Proxy)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="proxyAuthenticator" signature="proxyAuthenticator(okhttp3.Authenticator)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="proxySelector" signature="proxySelector(java.net.ProxySelector)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="readTimeout" signature="readTimeout()" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="retryOnConnectionFailure" signature="retryOnConnectionFailure(java.lang.Boolean" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="socketFactory(" signature="socketFactory(javax.net.SocketFactory)" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="sslSocketFactory" signature="sslSocketFactory()" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
      <method name="writeTimeout" signature="writeTimeout()" match="name" >
        <return type="okhttp3.OkHttpClient.Builder" />
      </method>
    </class>

    <class name="okhttp3.Request">
      <method name="body" signature="body()" >
        <return type="okhttp3.RequestBody" />
      </method>
      <method name="header" signature="header(java.lang.String)" >
        <return type="java.lang.String" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
      <method name="headers" signature="headers()" match="name" >
        <return type="java.util.List" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
    </class>

    <class name="okhttp3.Request.Builder">
      <method name="addHeader" signature="addHeader(java.lang.String, java.lang.String)" >
        <tags>header.name:0,header.value:1</tags>
        <return type="okhttp3.Request.Builder" />
        <sink argpos="0,1" kind="header_manipulation" resource="web"/>
        <sink argpos="0" kind="cookie_plaintext_storage" resource="web" />
      </method>
      <method name="build" signature="build()" >
        <return type="okhttp3.Request" />
      </method>
      <method name="cacheControl" signature="cacheControl()" match="name" >
        <return type="okhttp3.Request.Builder" />
      </method>
      <method name="delete" signature="delete()" >
        <return type="okhttp3.Request.Builder" />
      </method>
      <method name="get" signature="get()" >
        <return type="okhttp3.Request.Builder" />
      </method>
      <method name="head" signature="head()" >
        <return type="okhttp3.Request.Builder" />
      </method>
      <method name="header" signature="header(java.lang.Stting, java.lang.String)" >
        <return type="okhttp3.Request.Builder" />
        <sink argpos="0,1" kind="header_manipulation" resource="web"/>
        <sink argpos="0" kind="cookie_plaintext_storage" resource="web" />
      </method>
      <method name="headers" signature="headers(okhttp3.Headers)" >
        <return type="okhttp3.Request.Builder" />
      </method>
      <method name="method" signature="method()" match="name" >
        <return type="okhttp3.Request.Builder" />
      </method>
      <method name="patch" signature="patch()" >
        <return type="okhttp3.Request.Builder" />
      </method>
      <method name="post" signature="post()" >
        <return type="okhttp3.Request.Builder" />
      </method>
      <method name="put" signature="put()" >
        <return type="okhttp3.Request.Builder" />
      </method>
      <method name="removeHeader" signature="removeHeader(java.lang.String)" >
        <return type="okhttp3.Request.Builder" />
      </method>
      <method name="tag" signature="tag(java.lang.String)" >
        <return type="okhttp3.Request.Builder" />
      </method>
      <method name="url" signature="url(java.lang.String)" >
        <return type="okhttp3.Request.Builder" />
        <sink argpos="0" kind="ssrf" resource="web"/>
      </method>
    </class>

    <class name="okhttp3.RequestBody">
      <method name="writeTo" signature="writeTo(sink okio.BufferedSink)" >
        <sink argpos="0" kind="xss" resource="web" />
      </method>
    </class>

    <class name="okhttp3.ResponseBody">
      <method name="bytes" signature="bytes()" >
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
      <method name="byteStream" signature="byteStream()" >
        <return type="java.io.InputStream" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
      <method name="charStream" signature="charStream()" >
        <return type="java.io.Reader" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
      <method name="string" signature="string()" >
        <return type="java.lang.String" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
      <method name="source" signature="source()" >
        <return type="okio.BufferedSource" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
    </class>

    <class name="okhttp3.WebSocket">
      <method name="send" signature="send()" match="name" >
        <sink argpos="0,1" kind="ssrf" resource="web"/>
      </method>
    </class>

    <class name="okhttp3.HttpUrl"/>

    <class name="okhttp3.HttpUrl.Builder">
      <method name="addEncodedPathSegment" signature="addEncodedPathSegment(java.lang.String)" match="name" alias="addEncodedPathSegments">
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="addEncodedQueryParameter" signature="addEncodedQueryParameter(java.lang.String, java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="addPathSegment" signature="addPathSegment(java.lang.String)" match="name" alias="addPathSegments">
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="addQueryParameter" signature="addQueryParameter(java.lang.String, java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="build" signature="build()" match="name" >
        <return type="okhttp3.HttpUrl" />
      </method>
      <method name="encodedFragment" signature="encodedFragment(java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="encodedPassword" signature="encodedPassword(java.lang.String)" match="name" >
        <tags>password:0</tags>
        <return type="okhttp3.HttpUrl.Builder" />
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="encodedPath" signature="encodedPath(java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="encodedQuery" signature="encodedQuery(java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="encodedUsername" signature="encodedUsername(java.lang.String)" match="name" >
        <tags>username:0</tags>
        <return type="okhttp3.HttpUrl.Builder" />
        <sink argpos="0" kind="hardcoded_credentials" resource="web"/>
      </method>
      <method name="fragment" signature="fragment(java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="host" signature="host(java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
        <sink argpos="0" kind="resource_injection" resource="other" />
      </method>
      <method name="port" signature="port(int)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
        <sink argpos="0" kind="resource_injection" resource="other" />
      </method>
      <method name="password" signature="password(java.lang.String)" match="name" >
        <tags>password:0</tags>
        <return type="okhttp3.HttpUrl.Builder" />
        <sink argpos="0" kind="hardcoded_credentials" resource="network"/>
      </method>
      <method name="username" signature="username(java.lang.String)" match="name" >
        <tags>username:0</tags>
        <return type="okhttp3.HttpUrl.Builder" />
        <sink argpos="0" kind="hardcoded_credentials" resource="web"/>
      </method>
      <method name="query" signature="query(java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="removeAllEncodedQueryParameters" signature="removeAllEncodedQueryParameters(java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="removeAllQueryParameters" signature="removeAllQueryParameters(java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="removePathSegment" signature="removePathSegment(java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="scheme" signature="scheme(java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="setEncodedPathSegment" signature="setEncodedPathSegment(java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="setEncodedQueryParameter" signature="setEncodedQueryParameter(java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="setPathSegment" signature="setPathSegment(java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
      <method name="setQueryParameter" signature="setQueryParameter(java.lang.String)" match="name" >
        <return type="okhttp3.HttpUrl.Builder" />
      </method>
    </class>

    <class name="okhttp3.Credentials">
      <method name="basic" signature="basic(java.lang.String, java.lang.String)" >
        <tags>username:0, password:1</tags>
        <return type="java.lang.String" />
        <sink argpos="0,1" kind="hardcoded_credentials" resource="web"/>
      </method>
      <method name="basic" signature="basic(java.lang.String, java.lang.String, java.nio.charset)" >
        <tags>username:0, password:1</tags>
        <return type="java.lang.String" />
        <sink argpos="0,1" kind="hardcoded_credentials" resource="web"/>
      </method>
    </class>
    
  </module>

  <module name="org.eclipse.jetty" standard="Jetty">
    <description url="https://www.eclipse.org/jetty/">Eclipse Jetty - HTTP server / servlet container and client</description>

    <!-- https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/server/Server.html -->
    <class name="org.eclipse.jetty.server.Server" supertypes="org.eclipse.jetty.server.handler.HandlerWrapper" >
      <constructor name="Server" signature="Server()" />
      <constructor name="Server" signature="Sever(int)" >
        <sink argpos="0" kind="resource_injection" resource="web"/>
      </constructor>
      <constructor name="Server" signature="Sever(java.net.InetSocketAddress)" >
        <sink argpos="0" kind="resource_injection" resource="web"/>
      </constructor>
    </class>

    <!-- https://www.eclipse.org/jetty/javadoc/current/org/eclipse/jetty/client/HttpClient.html -->
    <class name="org.eclipse.jetty.client.HttpClient">
      <method name="FORM" signature="FORM(java.lang.String, org.eclipse.jetty.util.Fields)">
        <tags>method:POST</tags>
        <return type="org.eclipse.jetty.client.api.ContentResponse"/>
        <sink argpos="0" kind="ssrf"/>
        <sink argpos="0" kind="insecure_transport" resource="web" />
        <sink argpos="0" kind="http_parameter_pollution" resource="filesystem" />
      </method>
      <method name="GET" signature="GET(java.lang.String)">
        <tags>method:GET</tags>
        <return type="org.eclipse.jetty.client.api.ContentResponse"/>
        <sink argpos="0" kind="ssrf"/>
        <sink argpos="0" kind="insecure_transport" resource="web" />
        <sink argpos="0" kind="http_parameter_pollution" resource="filesystem" />
      </method>
      <method name="newRequest" signature="newRequest(java.lang.String)" match="numargs">
        <return type="org.eclipse.jetty.client.api.Request"/>
        <sink argpos="0" kind="ssrf"/>
        <sink argpos="0" kind="insecure_transport" resource="web" />
        <sink argpos="0" kind="http_parameter_pollution" resource="filesystem" />
      </method> 
    </class>
    
    <class name="org.eclipse.jetty.client.api.Request">
      <method name="accept" signature="accept(java.lang.String)" match="name" alias="agent, attribute, followRedirects, tag, version">
        <return type="@self"/>
      </method>
      <method name="content" signature="content(org.eclipse.jetty.client.api.ContentProvider)" match="name">
        <return type="@self"/>
      </method>
      <method name="cookie" signature="cookie(java.net.HttpCookie)">
        <return type="@self"/>
      </method>
      <method name="file" signature="file(java.nio.file.Path)" match="name">
        <return type="@self"/>
        <sink kind="path_traversal" argpos="0" resource="filesystem"/>
      </method>
      <method name="header" signature="header(java.lang.String, java.lang.String)">
        <return type="@self"/>
        <sink kind="header_manipulation" argpos="0,1" resource="web"/>
      </method>
      <method name="method" signature="method(java.lang.String)">
        <return type="@self"/>
      </method>
      <method name="scheme" signature="scheme(java.lang.String)">
        <return type="@self"/>
        <sink argpos="0" kind="insecure_transport" resource="web" />
      </method>
      <method name="host" signature="host(java.lang.String)">
        <return type="@self"/>
        <sink argpos="0" kind="ssrf"/>
      </method>
      <method name="param" signature="param(java.lang.String, java.lang.String)">
        <return type="@self"/>
        <sink kind="http_parameter_pollution" argpos="0,1" resource="web"/>
      </method>
      <method name="path" signature="path(java.lang.String)">
        <return type="@self"/>
        <sink kind="http_parameter_pollution" argpos="0,1" resource="web"/>
      </method>
      <method name="port" signature="port(int)">
        <return type="@self"/>
        <sink argpos="0" kind="ssrf"/>
      </method>
      <method name="send" signature="send()" match="numargs">
        <return type="org.eclipse.jetty.client.api.ContentResponse"/>
      </method>
      <method name="send_async" signature="send(org.eclipse.jetty.client.api.Response.CompleteListener)" match="numargs">
        <source argpos="0" kind="network_input" resource="web"/>
      </method>
      <method name="setter" signature="setter()" match="other">
        <return type="@self"/>
        <matcher kind="method" function="on.+|listener|idleTimeout|timeout|version" args="1"/>
      </method>

    </class>

    <class name="org.eclipse.jetty.client.HttpRequest" supertypes="org.eclipse.jetty.client.api.Request"/>
    <class name="org.eclipse.jetty.client.WebSocketUpgradeRequest" supertypes="org.eclipse.jetty.client.HttpRequest">
      <method name="sendAsync" signature="sendAsync()">
        <return type="java.util.concurrent.CompletableFuture" elementType="org.eclipse.jetty.websocket.api.Session"/>
        <source argpos="-1" kind="network_input" resource="web"/>
      </method>
      <method name="upgrade" signature="upgrade(org.eclipse.jetty.client.HttpResponse, org.eclipse.jetty.client.http.HttpConnectionOverHTTP)"></method>
    </class>  

    <class name="org.eclipse.jetty.client.api.Response" kind="interface">
      <method name="getRequest" signature="getRequest()"><return type="org.eclipse.jetty.client.api.Request"/></method>
      <method name="getHeaders" signature="getHeaders()">
        <return type="org.eclipse.jetty.http.HttpFields"/>
        <source kind="network_input" resource="web" argpos="-1"/>
      </method>
      <method name="getReason" signature="getReason()">
        <return type="java.lang.String"/>
        <source kind="network_input" resource="web" argpos="-1"/>
      </method>
    </class>
    
    <class name="org.eclipse.jetty.client.HttpResponse" supertypes="org.eclipse.jetty.client.api.Response"/>

    <class name="org.eclipse.jetty.client.api.ContentResponse" kind="interface" supertypes="org.eclipse.jetty.client.api.Response">
      <method name="getContent" signature="getContent()">
        <return type="byte[]"/>
        <source kind="network_input" resource="web" argpos="-1"/>
      </method>
      <method name="getContentAsString" signature="getContentAsString()">
        <return type="java.lang.String"/>
        <source kind="network_input" resource="web" argpos="-1"/>
      </method>
      <method name="getMediaType" signature="getMediaType()" alias="getEncoding">
        <return type="java.lang.String"/>
        <source kind="network_input" resource="web" argpos="-1"/>
      </method>
    </class>
    
    <class name="org.eclipse.jetty.client.HttpContentResponse" supertypes="org.eclipse.jetty.client.api.ContentResponse"/>
    
  </module>
  
  <module name="org.jboss.resteasy" standard="RESTEasy">
    <description url="https://resteasy.github.io/">RESTEasy - RESTful Web Services API</description>

    <!-- https://docs.jboss.org/resteasy/2.0.0.GA/javadocs/org/jboss/resteasy/spi/HttpResponse.html -->
    <class name="org.jboss.resteasy.spi.HttpResponse" kind="interface" >
      <method name="addNewCookie" signature="addNewCookie(javax.ws.rs.core.NewCookie)" />
      <method name="getOutputHeaders" signature="getOutputHeaders()" >
        <tags>header:-2</tags>
        <return type="javax.ws.rs.core.MultivaluedMap" />
      </method>
      <method name="getOutputStream" signature="getOutputStream()" >
        <return type="java.io.OutputStream" />
        <source argpos="-1" kind="system_input" resource="os" />
      </method>
      <method name="sendError" signature="sendError(int, java.lang.String)" >
        <tags>CWE:113, CWE:81,header.value:0</tags>
        <sink argpos="1" kind="header_manipulation" resource="web"/>
        <sink argpos="1" kind="xss" resource="web"/>
      </method>
    </class>
    <class name="org.jboss.resteasy.plugins.server.servlet.HttpServletResponseWrapper" supertypes="org.jboss.resteasy.spi.HttpResponse" />
    <class name="org.jboss.resteasy.mock.MockHttpResponse" supertypes="org.jboss.resteasy.spi.HttpResponse" />

    <class name="org.jboss.resteasy.client.jaxrs.ResteasyWebTarget" kind="interface" supertypes="javax.ws.rs.core.Configurable, javax.ws.rs.client.WebTarget">
      <method name="clone" signature="clone()"><return type="@self"/></method>
      <method name="getResteasyClient" signature="getResteasyClient()"><return type="org.jboss.resteasy.client.jaxrs.ResteasyClient"/></method>
      <method name="matrixParam" signature="matrixParam(java.lang.String, java.lang.Object...)" match="name"
              alias="path,queryParam,queryParamNoTemplate,queryParams,queryParamsNoTemplate">
        <return type="@self"/>
        <sink argpos="0" kind="http_parameter_pollution" resource="filesystem" />
      </method>
      <method name="property" signature="property(java.lang.String, java.lang.Object)">
        <return type="@self"/>
      </method>
      <method name="register" signature="register(java.lang.Class)" match="name">
        <return type="@self"/>
      </method>
      <method name="resolveTemplate" signature="resolveTemplate(String name, java.lang.Object)" match="name"
              alias="resolveTemplateFromEncoded, resolveTemplates, resolveTemplatesFromEncoded">
        <return type="@self"/>
        <sink argpos="0" kind="http_parameter_pollution" resource="filesystem" />
      </method>
    </class>
    
    <class name="org.jboss.resteasy.client.jaxrs.internal.ClientWebTarget" supertypes="org.jboss.resteasy.client.jaxrs.ResteasyWebTarget">
    </class>

    <class name="org.jboss.resteasy.client.jaxrs.ResteasyClient" supertypes="javax.ws.rs.client.Client, javax.ws.rs.core.Configurable">
      <method name="asyncInvocationExecutor" signature="asyncInvocationExecutor()">
        <return type="java.util.concurrent.ExecutorService"/>
      </method>
      <method name="close" signature="close()"/>
      <method name="getConfiguration" signature="getConfiguration()"><return type="javax.ws.rs.core.Configuration"/></method>
      <method name="getHostnameVerifier" signature="getHostnameVerifier()"><return type="javax.net.ssl.HostnameVerifier"/></method>
      <method name="getSslContext" signature="getSslContext()"><return type="javax.net.ssl.SSLContext"/></method>
      <method name="httpEngine" signature="httpEngine"><return type="org.jboss.resteasy.client.jaxrs.ClientHttpEngine"/></method>
      <method name="property" signature="property(java.lang.String, java.lang.Object)"><return type="@self"/></method>
      <method name="register" signature="register(java.lang.Class)" match="name"><return type="@self"/></method>
      <method name="target" signature="target(java.lang.String)">
        <return type="org.jboss.resteasy.client.jaxrs.ResteasyWebTarget"/>
        <sink argpos="0" kind="ssrf"/>
        <sink argpos="0" kind="insecure_transport" resource="web" />
      </method>
    </class>

    <class name="org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder" supertypes="javax.ws.rs.client.ClientBuilder">
      <method name="build" signature="build()">
        <return type="org.jboss.resteasy.client.jaxrs.ResteasyClient"/>
      </method>
    </class>

  </module>

</library>