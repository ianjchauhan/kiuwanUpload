<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.optimyth.com/schema/definitions/library_metadata"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="java.others" standard="others" technology="java">
  <description>Other common libraries (logging, scripting, micro-frameworks...)</description>

  <!-- Log4J and other logging libraries -->

  <module name="org.apache.log4j" standard="log4j">
    <description url="https://logging.apache.org/log4j/1.2/">Apache Log4j 1.x</description>

    <class name="org.apache.log4j.Logger">
      <tags>logger</tags>
      <method name="getLogger" signature="getLogger()" match="name" alias="getRootLogger">
        <return type="org.apache.logging.log4j.Logger"/>
      </method>
      <method name="debug" signature="debug(java.lang.Object)" match="name"
              alias="error,fatal,info,trace,warn">
        <tags>not_propagate_between_args</tags>
        <sink argpos="0" kind="log_forging"/>
      </method>
      <method name="forcedLog" signature="forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)">
        <sink argpos="0,2" kind="log_forging"/>
      </method>
      <method name="l7dlog" signature="l7dlog(org.apache.log4j.Priority,java.lang.String,java.lang.Object[],java.lang.Throwable)">
        <sink argpos="2" kind="log_forging"/>
      </method>
      <method name="log" signature="log(org.apache.log4j.Priority,java.lang.Object)">
        <sink argpos="1" kind="log_forging"/>
      </method>
      <method name="log_2" signature="log(org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)">
        <sink argpos="1" kind="log_forging"/>
      </method>
      <method name="log_3" signature="log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)">
        <sink argpos="0,2" kind="log_forging"/>
      </method>
    </class>

  </module>

  <module name="org.apache.logging.log4j" standard="log4j.2">
    <description url="https://logging.apache.org/log4j/2.x/">Apache Log4j 2.x</description>

    <class name="org.apache.logging.log4j.LogManager">
      <method name="getLogger" signature="getLogger()" match="name" alias="getFormatterLogger,getRootLogger">
        <return type="org.apache.logging.log4j.Logger"/>
      </method>
    </class>

    <class name="org.apache.logging.log4j.Logger">
      <tags>logger</tags>
      <!-- Log4J 2.x API makes almost impossible to match using argument count, without expression type inference;
           this will assume that all args could be tainted -->
      <method name="debug" signature="debug(java.lang.String,java.lang.Object...)"
              alias="error,fatal,info,trace,traceEntry,traceExit,warn">
        <tags>not_propagate_between_args</tags>
        <sink argpos="0,1" kind="log_forging"/>
      </method>
      <method name="log" signature="log(org.apache.logging.log4j.Level,java.lang.String,java.lang.Object...)">
        <tags>not_propagate_between_args</tags>
        <sink argpos="1,2" kind="log_forging"/>
      </method>
      <method name="printf" signature="printf(org.apache.logging.log4j.Level, java.lang.String, java.lang.Object...)">
        <tags>not_propagate_between_args</tags>
        <sink argpos="1,2" kind="log_forging"/>
      </method>
      <method name="printf_2" signature="printf(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object...)">
        <tags>not_propagate_between_args</tags>
        <sink argpos="2,3" kind="log_forging"/>
      </method>
    </class>

  </module>

  <module name="org.slf4j" standard="slf4j">
    <description url="http://www.slf4j.org/">SLF4J - Simple Logging Facade for Java</description>

    <class name="org.slf4j.ILoggerFactory" kind="interface">
      <method name="getLogger" signature="getLogger(java.lang.String)" match="name">
        <return type="org.slf4j.Logger"/>
      </method>
    </class>
    <class name="org.slf4j.LoggerFactory" supertypes="org.slf4j.ILoggerFactory">
      <method name="getILoggerFactory" signature="getILoggerFactory()" match="name">
        <tags>not_propagate_between_args</tags>
        <return type="org.slf4j.ILoggerFactory"/>
      </method>
    </class>
    <class name="org.slf4j.Logger" kind="interface">
      <tags>logger</tags>
      <!-- SLF4J API makes almost impossible to match using argument count, without expression type inference;
           this will assume that all args could be tainted -->
      <method name="debug" signature="debug(java.lang.String,java.lang.Object...)" alias="error,info,trace,warn">
        <tags>not_propagate_between_args</tags>
        <sink argpos="0,1" kind="log_forging"/>
      </method>
    </class>

  </module>

  <module name="org.pmw.tinylog" standard="tinylog">
    <description url="https://tinylog.org/v2/">tinylog - lightweight logging framework</description>

    <class name="org.pmw.tinylog.Logger">
      <tags>logger</tags>
      <!-- TinyLog API makes almost impossible to match using argument count, without expression type inference;
           this will assume that all args could be tainted -->
      <method name="debug" signature="debug(java.lang.String,java.lang.Object...)" alias="error,info,trace,warn">
        <tags>not_propagate_between_args</tags>
        <sink argpos="0,1" kind="log_forging"/>
      </method>
    </class>

  </module>

  <module name="org.mozilla.javascript" standard="mozilla-rhino">
    <description url="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino">Mozilla Rhino - JavaScript engine in Java</description>

    <class name="org.mozilla.javascript.ContextFactory">
      <method name="enter" signature="enter()">
        <return type="org.mozilla.javascript.Context"/>
      </method>
      <method name="enterContext" signature="enterContext()" match="name">
        <return type="org.mozilla.javascript.Context"/>
      </method>
    </class>

    <class name="org.mozilla.javascript.Context">
      <method name="enter" signature="enter()" match="name">
        <return type="org.mozilla.javascript.Context"/>
      </method>
      <method name="compileFunction" signature="compileFunction(K,java.lang.String)" match="name">
        <return type="org.mozilla.javascript.Function"/>
        <sink argpos="1" kind="code_injection" resource="other"/>
      </method>
      <method name="compileReader" signature="compileReader(java.io.Reader,java.lang.String)" match="name">
        <return type="org.mozilla.javascript.Script"/>
        <sink argpos="0" kind="code_injection" resource="other"/>
      </method>
      <method name="compileString" signature="compileString(java.lang.String,java.lang.String)" match="name">
        <return type="org.mozilla.javascript.Script"/>
        <sink argpos="0" kind="code_injection" resource="other"/>
      </method>
      <method name="evaluateReader" signature="evaluateReader(K,java.io.Reader,java.lang.String)" match="name">
        <return type="java.lang.Object"/>
        <sink argpos="1" kind="code_injection" resource="other"/>
      </method>
      <method name="evaluateString" signature="evaluateString(K,java.lang.String)" match="name">
        <return type="org.mozilla.javascript.Script"/>
        <sink argpos="1" kind="code_injection" resource="other"/>
      </method>
    </class>

  </module>

  <module name="org.python" standard="jython">
    <description url="https://www.jython.org/">Jython - Python implementation</description>

    <class name="org.python.util.PythonInterpreter">
      <method name="compile" signature="compile(java.lang.String)" match="name">
        <return type="org.python.core.PyCode"/>
        <sink argpos="0" kind="code_injection" resource="other"/>
      </method>
      <method name="eval" signature="eval(java.lang.String)" match="name">
        <return type="org.python.core.PyObject"/>
        <sink argpos="0" kind="code_injection" resource="other"/>
      </method>
      <method name="exec" signature="exec(java.lang.String)" match="name">
        <sink argpos="0" kind="code_injection" resource="other"/>
      </method>
      <method name="execfile" signature="execfile(java.lang.String)" match="name">
        <sink argpos="0" kind="code_injection" resource="other"/>
      </method>
    </class>

    <class name="org.python.util.InteractiveInterpreter" supertypes="org.python.util.PythonInterpreter"/>
    <class name="org.python.util.InteractiveConsole" supertypes="org.python.util.InteractiveInterpreter"/>
  </module>

  <module name="groovy" standard="groovy">
    <description url="https://groovy-lang.org/">Apache Groovy</description>
    <class name="groovy.lang.GroovyShell">
      <method name="evaluate" signature="evaluate(java.lang.String)" match="name">
        <return type="java.lang.Object"/>
        <sink argpos="0" kind="code_injection" resource="other"/>
      </method>
      <method name="parse" signature="parse(java.lang.String)" match="name">
        <return type="groovy.lang.Script"/>
        <sink argpos="0" kind="code_injection" resource="other"/>
      </method>
      <method name="run" signature="run(java.lang.String)" match="name">
        <return type="java.lang.Object"/>
        <sink argpos="0" kind="code_injection" resource="other"/>
      </method>
    </class>
    <class name="groovy.util.Eval">
      <method name="me" signature="me(java.lang.String)">
        <sink argpos="0" kind="code_injection" resource="other"/>
      </method>
      <method name="me" signature="me(java.lang.String,java.lang.Object,java.lang.String)">
        <sink argpos="2" kind="code_injection" resource="other"/>
      </method>
      <method name="x" signature="x(java.lang.Object,java.lang.String)">
        <sink argpos="1" kind="code_injection" resource="other"/>
      </method>
      <method name="xy" signature="xy(java.lang.Object,java.lang.Object,java.lang.String)">
        <sink argpos="2" kind="code_injection" resource="other"/>
      </method>
      <method name="xyz" signature="xyz(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String)">
        <sink argpos="3" kind="code_injection" resource="other"/>
      </method>
    </class>
  </module>

  <module name="com.fasterxml.jackson" standard="jackson">
    <description url="https://github.com/FasterXML/jackson">Jackson - JSON library for Java</description>

    <!-- jackson 1.x (org.codehaus) -> jackson 2.x (com.fasterxml) -->
    <class name="com.fasterxml.jackson.core.JsonFactory">
      <method name="createGenerator" signature="createGenerator()" alias="createJsonGenerator" match="name">
        <return type="com.fasterxml.jackson.core.JsonGenerator"/>
      </method>
    </class>
    <class name="org.codehaus.jackson.JsonFactory">
      <method name="createJsonGenerator" signature="createJsonGenerator()" match="name">
        <return type="com.codehaus.jackson.JsonGenerator"/>
      </method>
    </class>
    <class name="com.fasterxml.jackson.core.JsonGenerator">
      <method name="writeRaw" signature="writeRaw(java.lang.String)" match="name" alias="writeRawUTF8String,writeRawValue">
        <sink argpos="0" kind="json_injection" resource="other"/>
      </method>
    </class>
    <class name="com.fasterxml.jackson.databind.util.JSONPObject">
      <constructor name="JSONPObject" signature="JSONPObject(java.lang.String, java.lang.Object) ">
        <sink argpos="0" kind="some_injection" resource="web" />
      </constructor>
      <constructor name="JSONPObject" signature="JSONPObject(java.lang.String, java.lang.Object, com.fasterxml.jackson.databind.JavaType) ">
        <sink argpos="0" kind="some_injection" resource="web" />
      </constructor>
    </class>
    <class name="com.codehaus.jackson.JsonGenerator">
      <method name="writeRaw" signature="writeRaw(java.lang.String)" match="name" alias="writeRawUTF8String,writeRawValue">
        <sink argpos="0" kind="json_injection" resource="other"/>
      </method>
    </class>

    <class name="com.fasterxml.jackson.databind.ObjectMapper" supertypes="com.fasterxml.jackson.core.ObjectCodec">
      <method name="readValue" signature="readValue()" match="name">
        <return type="java.lang,Object" />
        <sink argpos="0" kind="code_injection_deserialization" resource="other" >
          <checker id="code_injection_deserialization" />
        </sink>
      </method>
      <method name="readValues" signature="readValues()" match="name">
        <return type="java.util.Iterator" elementType="java.lang,Object" />
        <sink argpos="0" kind="code_injection_deserialization" resource="other" >
          <checker id="code_injection_deserialization" />
        </sink>
      </method>
      <method name="createObjectNode" signature="createObjectNode()" >
        <return type="com.fasterxml.jackson.databind.node.ObjectNode" />
      </method>
      <method name="enableDefaultTyping" signature="enableDefaultTyping()" />

      <method name="activateDefaultTyping" signature="activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)"
              match="name" alias="activateDefaultTypingAsProperty,setPolymorphicTypeValidator">
        <return type="@self"/>
        <neutralization kind="code_injection_deserialization" argpos="-2"/>
      </method>

      <method name="addHandler" signature="addHandler()" match="name"
        alias="addMixIn,clearProblemHandlers,configure,copy,deactivateDefaultTyping,disable,disableDefaultTyping,
               enable,enableDefaultTyping,findAndRegisterModules,registerModule,registerModules,
               setAnnotationIntrospector,setAnnotationIntrospectors,setBase64Variant,setConfig,setDateFormat,
               setDefaultLeniency,setDefaultMergeable,setDefaultPrettyPrinter,setDefaultPropertyInclusion,
               setDefaultSetterInfo,setDefaultTyping,setDefaultVisibility,setFilterProvider,setInjectableValues,
               setLocale,setMixInResolver,setMixIns,setNodeFactory,setPropertyInclusion,setPropertyNamingStrategy,
               setSerializationInclusion,setSerializerFactory,setSerializerProvider,setSubtypeResolver,
               setTimeZone,setTypeFactory,setVisibility">
        <return type="@self"/>
      </method>
    </class>

    <class name="com.fasterxml.jackson.databind.node.ObjectNode">
      <method name="put" signature="put()" alias="_put" match="name" >
        <return type="com.fasterxml.jackson.databind.node.ObjectNode" />
        <propagate from="1" to="-2" />
      </method>
      <method name="putAll" signature="putAll()" match="name" >
        <return type="com.fasterxml.jackson.databind.node.ObjectNode" />
        <propagate from="0" to="-2" />
      </method>
      <method name="set" signature="set(java.lang.String, com.fasterxml.jackson.databind.JsonNode)" match="name" >
        <return type="com.fasterxml.jackson.databind.JsonNode" />
        <propagate from="1" to="-2" />
      </method>
      <method name="setAll" signature="setAll()" match="name" >
        <return type="com.fasterxml.jackson.databind.JsonNode" />
        <propagate from="0" to="-2" />
      </method>
    </class>

    <class name="com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator"></class>

    <class name="com.fasterxml.jackson.databind.cfg.MapperBuilder">
      <method name="activateDefaultTyping" signature="activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)"
              match="name" alias="activateDefaultTypingAsProperty,polymorphicTypeValidator">
        <return type="@self"/>
        <neutralization kind="code_injection_deserialization" argpos="-2"/>
      </method>

      <method name="addHandler" signature="addHandler()" match="name"
              alias="addMixIn,addModule,addModules,annotationIntrospector,clearProblemHandlers,configure,deactivateDefaultTyping">
        <return type="@self"/>
      </method>
      <method name="defaultBase64Variant" signature="defaultBase64Variant()" match="name"
              alias="defaultDateFormat,defaultLeniency,defaultLocale,defaultMergeable,defaultPrettyPrinter,defaultSetterInfo,defaultTimeZone">
        <return type="@self"/>
      </method>
      <method name="disable" signature="disable()" match="name"
              alias="enable,filterProvider,findAndAddModules,handlerInstantiator,injectableValues,nodeFactory,propertyNamingStrategy">
        <return type="@self"/>
      </method>
      <method name="registerSubtypes" signature="registerSubtypes()" match="name"
              alias="serializationInclusion,serializerFactory,subtypeResolver,typeFactory,visibility">
        <return type="@self"/>
      </method>

      <method name="build" signature="build()">
        <return type="com.fasterxml.jackson.databind.ObjectMapper"/>
      </method>
    </class>

    <class name="com.fasterxml.jackson.databind.json.JsonMapper">
      <method name="builder" signature="builder()" match="name" instance="false">
        <return type="com.fasterxml.jackson.databind.json.JsonMapper.Builder"/>
      </method>
    </class>

    <class name="com.fasterxml.jackson.databind.json.JsonMapper.Builder" supertypes="com.fasterxml.jackson.databind.cfg.MapperBuilder">
      <method name="build" signature="build()">
        <return type="com.fasterxml.jackson.databind.ObjectMapper"/>
      </method>
    </class>
    
  </module>

  <!-- SUN -->
  <class name="sun.misc.BASE64Encoder">
    <constructor name="BASE64Encoder" signature="BASE64Encoder()" match="name" />

  	<method name="encode" signature="encode(java.lang.byte[] b)" match="name">
  	  <return type="java.lang.String"/>
  	  <neutralization argpos="0" kind="encoding" resource="web"/>
  	</method>
  </class>

  <class name="sun.misc.BASE64Decoder">
    <constructor name="BASE64Decoder" signature="BASE64Decoder()" match="name" />

    <method name="decodeBuffer" signature="decodeBuffer(java.lang.byte[] b)" match="name">
      <tags>deneutralization:encoding</tags>
      <return type="java.lang.String"/>
    </method>
  </class>

  <module name="org.apache.wicket" standard="apache.wicket">
    <description url="https://wicket.apache.org/">Apache Wicket - Java web framework</description>
    <!-- AjaxButton - https://ci.apache.org/projects/wicket/apidocs/6.x/org/apache/wicket/ajax/markup/html/form/AjaxFallbackButton.html -->
    <class name="org.apache.wicket.ajax.markup.html.form.AjaxButton">
      <method name="onSubmit" signature="onSubmit(org.apache.wicket.ajax.AjaxRequestTarget, org.apache.wicket.markup.html.form.Form)" match="name">
        <source argpos="1" kind="user_input" resource="web" />
      </method>
    </class>

    <class name="org.apache.wicket.ajax.markup.html.form.AjaxFallbackButton" supertypes="org.apache.wicket.ajax.markup.html.form.AjaxButton" />
  </module>

  <module name="org.apache.shiro" standard="apache.shiro">
    <description url="https://shiro.apache.org/">Apache Shiro - Java security framework (authentication, authorization, cryptography, session mgmt)</description>

    <class name="org.apache.shiro.realm.ldap.LdapContextFactory">
      <method name="getLdapContext" signature="getLdapContext(java.lang.Object, java.lang.Object)" >
        <return type="javax.naming.ldap.LdapContext" />
      </method>
      <method name="getLdapContext" signature="getLdapContext(java.lang.String, java.lang.String)" >
        <return type="javax.naming.ldap.LdapContext" />
      </method>
      <method name="getSystemLdapContext" signature="getSystemLdapContext()" >
        <return type="javax.naming.ldap.LdapContext" />
      </method>
    </class>
  </module>

  <module name="com.google.gson" standard="google.gson">
    <description url="https://github.com/google/gson">Gson - JSON object serialization</description>

    <class name="com.google.gson.JsonParser">
      <method name="parse" signature="parse()" match="name" >
        <sink argpos="0" kind="json_injection" resource="other"/>
      </method>
    </class>
    <class name="com.google.gson.Gson">
      <method name="fromJson" signature="fromJson()" match="name" >
        <sink argpos="0" kind="json_injection" resource="other"/>
      </method>
    </class>
    <class name="com.google.gson.GsonBuilder">
      <method name="create" signature="create()" match="name" >
        <return type="com.google.gson.Gson" />
      </method>
      <method name="addDeserializationExclusionStrategy" signature="addDeserializationExclusionStrategy()" match="name" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="addSerializationExclusionStrategy" signature="addSerializationExclusionStrategy()" match="name" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="disableHtmlEscaping" signature="disableHtmlEscaping()"  >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="disableInnerClassSerialization" signature="disableInnerClassSerialization()" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="enableComplexMapKeySerialization" signature="enableComplexMapKeySerialization()" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="excludeFieldsWithModifiers" signature="excludeFieldsWithModifiers()" match="name" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="excludeFieldsWithoutExposeAnnotation" signature="excludeFieldsWithoutExposeAnnotation()"  >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="generateNonExecutableJson" signature="generateNonExecutableJson()" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="registerTypeAdapter" signature="registerTypeAdapter()" match="name" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="registerTypeAdapterFactory" signature="registerTypeAdapterFactory()" match="name" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="registerTypeHierarchyAdapter" signature="registerTypeHierarchyAdapter()" match="name" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="serializeNulls" signature="serializeNulls()" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="serializeSpecialFloatingPointValue" signature="serializeSpecialFloatingPointValue()" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="setDateFormat" signature="setDateFormat()" match="name" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="setExclusionStrategie" signature="setExclusionStrategie()" match="name" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="setFieldNamingPolicy(" signature="setFieldNamingPolicy(()" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="setFieldNamingStrategy" signature="setFieldNamingStrategy()" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="setLenient" signature="setLenient()" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="setLongSerializationPolicy" signature="setLongSerializationPolicy()" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="setPrettyPrinting(" signature="setPrettyPrinting(()" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
      <method name="setVersion" signature="setVersion()" >
        <return type="com.google.gson.GsonBuilder" />
      </method>
    </class>
  </module>

  <!-- https://developers.google.com/protocol-buffers -->
  <module name="com.google.protobuf" standard="google.protobuf">
    <description url="https://developers.google.com/protocol-buffers">Google Protocol Buffers</description>
    <class name="com.google.protobuf.util.JsonFormat.Parser">
      <method name="merge" signature="merge()" match="name" >
        <sink argpos="0" kind="json_injection" resource="other"/>
      </method>
    </class>
  </module>

  <module name="com.squareup.moshi" standard="moshi">
    <description url="https://github.com/square/moshi">Moshi - JSON object serialization</description>

    <class name="com.squareup.moshi.Moshi">
      <method name="adapter" signature="adapter()" match="name" >
        <return type="com.squareup.moshi.JsonAdapter" />
      </method>
      <method name="newBuilder" signature="newBuilder()" >
        <return type="com.squareup.moshi.Moshi.Builder" />
      </method>
    </class>

    <class name="com.squareup.moshi.Moshi.Builder">
      <method name="add" signature="add()" match="name" >
        <return type="com.squareup.moshi.Moshi.Builder" />
      </method>
      <method name="addAll" signature="addAll()" match="name" >
        <return type="com.squareup.moshi.Moshi.Builder" />
      </method>
      <method name="build" signature="build()" >
        <return type="com.squareup.moshi.Moshi" />
      </method>
    </class>

    <class name="com.squareup.moshi.JsonAdapter">
      <method name="fromJson" signature="fromJson()" match="name" >
        <sink argpos="0" kind="json_injection" resource="other"/>
      </method>
    </class>
  </module>

  <module name="javafx" standard="javafx">
    <description url="https://docs.oracle.com/javafx/2/api/javafx">JavaFX - Desktop app framework</description>

    <class name="javafx.scene.control.TextInputControl.TextProperty" supertypes="javafx.beans.property.StringProperty" >
      <method name="get" signature="get()" >
        <return type="java.lang.String" />
        <source argpos="-1" kind="user_input" resource="gui" />
      </method>
    </class>

    <class name="javafx.beans.value.ChangeListener" kind="interface" >
      <method name="changed" signature="changes(javafx.beans.value.ObservableValue,T,T)" >
        <source argpos="2" kind="user_input" resource="gui" />
      </method>
    </class>

    <class name="javafx.scene.control.TextInputControl" supertypes="javafx.scene.control.Control" >
      <method name="getText" signature="getText()" >
        <return type="java.lang.String" />
        <source argpos="-1" kind="user_input" resource="gui" />
      </method>
    </class>

    <class name="javafx.scene.control.TextField" supertypes="javafx.scene.control.TextInputControl" >
      <method name="getCharacters" signature="getCharacters()" >
        <return type="java.lang.CharSequence" />
        <source argpos="-1" kind="user_input" resource="gui" />
      </method>
    </class>

    <class name="javafx.beans.value.WeakChangeListener" supertypes="javafx.beans.value.ChangeListener" />
  </module>

  <!-- https://github.com/EsotericSoftware/kryo -->
  <module name="com.esotericsoftware.kryo" standard="kryo">
    <description url="https://github.com/EsotericSoftware/kryo">Kryo - Binary object graph serialization framework for Java</description>
  </module>
  <class name="com.esotericsoftware.kryo.Kryo">
    <method name="readObject" signature="readObject()" match="name" alias="readObjectOrNull,readClassAndObject,readReferenceOrNull">
      <return type="java.lang.Object"/>
      <sink argpos="0" kind="code_injection_deserialization" resource="other" >
        <checker id="code_injection_deserialization" />
      </sink>
    </method>
    <method name="setRegistrationRequired" signature="setRegistrationRequired(boolean)" />
  </class>

  <module name="io.vertx" standard="vert.x">
    <!-- The "polyglot" Node.js clone -->
    <description url="https://vertx.io/">Eclipse Vert.x - Event-driven app framework</description>

    <!-- Vert.x 3.8.5 -->
    <class name="io.vertx.core.Vertx" alias="io.vertx.reactivex.core.Vertx" />

    <class name="io.vertx.ext.web.RoutingContext" alias="io.vertx.reactivex.ext.web.RoutingContext">
      <method name="request" signature="request()" >
        <return type="io.vertx.reactivex.core.http.HttpServerRequest" />
      </method>
      <method name="response" signature="response()" >
        <return type="javax.servlet.http.HttpServletResponse" />
      </method>
      <method name="queryParam" signature="queryParam(java.lang.String)" alias="pathParam,getCookie">
        <return type="java.lang.String" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
      <method name="queryParams" signature="queryParams()" alias="pathParams">
        <return type="io.vertx.core.MultiMap" />
        <source argpos="-1" kind="user_input" resource="web"/>
      </method>
      <method name="session" signature="session()" >
        <return type="io.vertx.ext.web.Session" />
      </method>
      <method name="cookieMap" signature="cookieMap()" alias="cookies">
        <tags>CWE:784</tags>
        <return type="io.vertx.core.MultiMap" elementType="io.vertx.core.http.Cookie"/>
        <source argpos="-1" kind="user_input" resource="web"/>
      </method>
      <method name="getBody" signature="getBody()" >
        <return type="io.vertx.core.buffer.Buffer" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
      <method name="getBodyAsJson" signature="getBodyAsJson()" >
        <return type="java.lang.String" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
      <method name="getBodyAsJsonArray" signature="getBodyAsJsonArray()" >
        <return type="java.lang.String" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
      <method name="getBodyAsString" signature="getBodyAsString()" match="name" >
        <return type="io.vertx.core.buffer.Buffer" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
      <method name="vertx" signature="vertx()" >
        <return type="io.vertx.core.Vertx" />
      </method>
      <method name="fileUploads" signature="fileUploads()" >
        <return type="io.vertx.ext.web.FileUpload" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
    </class>

    <class name="io.vertx.ext.web.FileUpload" alias="io.vertx.rxjava.ext.web.FileUpload" />

    <class name="io.vertx.ext.web.sstore.AbstractSession" >
      <method name="put" signature="put(java.lang.String, java.lang.String)" >
        <tags>CWE:501, stateChange</tags>
        <sink argpos="0,1" kind="trust_boundary" resource="web"/>
      </method>
    </class>
    <class name="io.vertx.ext.web.Session" alias="io.vertx.reactivex.ext.web.Session" supertypes="io.vertx.ext.web.sstore.AbstractSession" />

    <class name="io.vertx.core.http.HttpServerRequest" alias="io.vertx.reactivex.core.http.HttpServerRequest" >
      <method name="bodyHandler" signature="bodyHandler(io.vertx.core.Handler)" >
        <return type="io.vertx.core.http.HttpServerRequest" />
      </method>
      <method name="connection" signature="connection()" >
        <return type="io.vertx.core.http.HttpConnection" />
      </method>
      <method name="cookieMap" signature="cookieMap()">
        <tags>CWE:784</tags>
        <return type="io.vertx.core.MultiMap" elementType="io.vertx.core.http.Cookie"/>
        <source argpos="-1" kind="user_input" resource="web"/>
      </method>
      <method name="customFrameHandler" signature="customFrameHandler(io.vertx.core.Handler)" >
        <return type="io.vertx.core.http.HttpServerRequest" />
      </method>
      <method name="endHandler" signature="endHandler(io.vertx.core.Handler)" >
        <return type="io.vertx.core.http.HttpServerRequest" />
      </method>
      <method name="exceptionHandler" signature="exceptionHandler(io.vertx.core.Handler)" >
        <return type="io.vertx.core.http.HttpServerRequest" />
      </method>
      <method name="fetch" signature="fetch(long)" >
        <return type="io.vertx.core.http.HttpServerRequest" />
      </method>
      <method name="formAttributes" signature="formAttributes()" >
        <return type="io.vertx.core.MultiMap" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
      <method name="getParam" signature="getParam(java.lang.String)" alias="getFormAttribute,getCookie,getHeader" >
        <return type="java.lang.String" />
        <source argpos="-1" kind="user_input" resource="web" />
      </method>
      <method name="handler" signature="handler(io.vertx.core.Handler)" >
        <return type="io.vertx.core.http.HttpServerRequest" />
      </method>
      <method name="headers" signature="headers()" alias="params">
        <return type="io.vertx.core.MultiMap" />
        <source argpos="-1" kind="user_input" resource="web"/>
      </method>
      <method name="response" signature="response()" >
        <return type="io.vertx.core.http.HttpServerResponse" />
      </method>
      <method name="resume" signature="resume()" >
        <return type="io.vertx.core.http.HttpServerRequest" />
      </method>
      <method name="setExpectMultipart" signature="setExpectMultipart(boolean)" >
        <return type="io.vertx.core.http.HttpServerRequest" />
      </method>
      <method name="streamPriorityHandler" signature="streamPriorityHandler(io.vertx.core.Handler)" >
        <return type="io.vertx.core.http.HttpServerRequest" />
      </method>
      <method name="uploadHandler" signature="uploadHandler(io.vertx.core.Handler)" >
        <return type="io.vertx.core.http.HttpServerRequest" />
      </method>
    </class>

    <class name="io.vertx.core.http.HttpServerResponse" alias="io.vertx.reactivex.core.http.HttpServerResponse" >
      <method name="addCookie" signature="addCookie(io.vertx.core.http.Cookie)" >
        <tags>CWE:113, stateChange,header.name:Cookie</tags>
        <sink argpos="0" kind="header_manipulation" resource="web"/>
        <sink argpos="0" kind="cookie_security" resource="web"/>
      </method>

      <method name="putHeader" signature="putHeader()" match="name" >
        <tags>CWE:113,header.name:0,header.value:1</tags>
        <return type="io.vertx.core.http.HttpServerResponse" />
        <sink argpos="0,1" kind="header_manipulation" resource="web"/>
      </method>
      <method name="write" signature="write()" match="name" >
        <return type="io.vertx.core.http.HttpServerResponse" />
        <sink argpos="0" kind="xss" resource="web" />
      </method>
      <method name="sendFile" signature="sendFile()" >
        <return type="io.vertx.core.http.HttpServerResponse" />
        <sink argpos="0" kind="path_traversal" resource="web" />
      </method>
      <method name="headers" signature="headers()" alias="params">
        <return type="io.vertx.core.MultiMap" />
        <sink argpos="-2" kind="header_manipulation" resource="web" />
      </method>
    </class>

    <class name="io.vertx.core.http.Cookie" alias="io.vertx.reactivex.core.http.Cookie" >
      <constructor name="Cookie" signature="Cookie(java.lang.String,java.lang.String)">
        <tags>cookie.create,cookie.name:0,cookie.value:1</tags>
        <propagate from="0,1" to="-1"/>
        <sink argpos="1" kind="cookie_plaintext_storage" resource="web" />
        <sink argpos="1" kind="header_manipulation"  resource="web"/>
      </constructor>
      <method name="newInstance" signature="newInstance(io.vertx.core.http.Cookie)" >
        <return type="io.vertx.core.http.Cookie" />
      </method>
      <method name="getValue" signature="getValue()"  match="name">
        <return type="java.lang.String" />
        <source argpos="-1" kind="user_input" resource="web"/>
      </method>
      <method name="getPath" signature="getPath()" match="name">
        <return type="java.lang.String" />
        <source argpos="-1" kind="user_input" resource="web"/>
      </method>
      <method name="getDomain" signature="getDomain()"  match="name">
        <return type="java.lang.String" />
        <source argpos="-1" kind="user_input" resource="web"/>
      </method>
      <method name="getName" signature="getName()"  match="name">
        <return type="java.lang.String" />
        <source argpos="-1" kind="user_input" resource="web"/>
      </method>
      <method name="setDomain" signature="setDomain(java.lang.String)">
        <tags>setCookie,cookie.domain:0</tags>
      </method>
      <method name="setPath" signature="setPath(java.lang.String)">
        <tags>setCookie,cookie.path:0</tags>
      </method>
      <method name="setHttpOnly" signature="setHttpOnly(boolean)">
        <tags>setCookie,cookie.httpOnly:0</tags>
      </method>
      <method name="setMaxAge" signature="setMaxAge(int)">
        <tags>setCookie,cookie.maxAge:0</tags>
      </method>
      <method name="setSecure" signature="setMaxAge(boolean)">
        <tags>setCookie,cookie.secure:0</tags>
      </method>
      <method name="setValue" signature="setValue(java.lang.String)">
        <tags>setCookie,cookie.value:0</tags>
      </method>
    </class>

    <class name="io.vertx.core.http.HttpConnection" alias="io.vertx.reactivex.core.http.HttpConnection" />

    <class name="io.vertx.core.MultiMap" alias="io.vertx.reactivex.core.MultiMap" supertypes="java.lang.Iterable"/>

    <class name="io.vertx.ext.sql.SQLConnection" alias="io.vertx.reactivex.ext.sql.SQLConnection" >
      <method name="batchCallableWithParams" signature="batchCallableWithParams()" match="name" >
        <return type="io.vertx.ext.sql.SQLConnection" />
        <sink argpos="0" kind="sql_injection" resource="database" />
      </method>
      <method name="call" signature="call()" match="name" >
        <return type="io.vertx.ext.sql.SQLConnection" />
        <sink argpos="0" kind="sql_injection" resource="database" />
      </method>
      <method name="callWithParams" signature="callWithParams()" match="name" >
        <return type="io.vertx.ext.sql.SQLConnection" />
        <sink argpos="0" kind="sql_injection" resource="database" />
      </method>
      <method name="execute" signature="execute()" match="name" >
        <return type="io.vertx.ext.sql.SQLConnection" />
        <sink argpos="0" kind="sql_injection" resource="database" />
      </method>
      <method name="query" signature="query()" match="name" alias="querySingle,querySingleWithParams">
        <return type="io.vertx.ext.sql.SQLConnection" />
        <sink argpos="0" kind="sql_injection" resource="database" />
      </method>
      <method name="queryStream" signature="queryStream()" match="name" >
        <return type="io.vertx.ext.sql.SQLConnection" />
        <sink argpos="0" kind="sql_injection" resource="database" />
      </method>
      <method name="queryStreamWithParams" signature="queryStreamWithParams()" match="name" >
        <return type="io.vertx.ext.sql.SQLConnection" />
        <sink argpos="0" kind="sql_injection" resource="database" />
      </method>
      <method name="queryWithParams" signature="queryWithParams()" match="name" >
        <return type="io.vertx.ext.sql.SQLConnection" />
        <sink argpos="0" kind="sql_injection" resource="database" />
      </method>
      <method name="update" signature="update()" match="name" >
        <return type="io.vertx.ext.sql.SQLConnection" />
        <sink argpos="0" kind="sql_injection" resource="database" />
      </method>
      <method name="updateWithParams" signature="updateWithParams()" match="name" >
        <return type="io.vertx.ext.sql.SQLConnection" />
        <sink argpos="0" kind="sql_injection" resource="database" />
      </method>
    </class>
  </module>

  <module name="org.yaml.snakeyaml" standard="snakeyaml">
    <description url="https://bitbucket.org/asomov/snakeyaml">SnakeYAML - YAML 1.1 processor</description>

    <!-- SnakeYAML 1.26 -->
    <class name="org.yaml.snakeyaml.Yaml" >
      <constructor name="Yaml" signature="Yaml()" match="name" />

      <method name="load" signature="load()" match="name" >
        <return type="java.lang.Object" />
        <sink argpos="0" kind="code_injection_deserialization" >
          <checker id="code_injection_deserialization" />
        </sink>
      </method>
      <method name="loadAll" signature="loadAll()" match="name" >
        <return type="java.util.Iterator" elementType="java.lang.Object" />
        <sink argpos="0" kind="code_injection_deserialization" >
          <checker id="code_injection_deserialization" />
        </sink>
      </method>
    </class>

    <class name="org.yaml.snakeyaml.constructor.BaseConstructor" />
    <class name="org.yaml.snakeyaml.constructor.SafeConstructor" supertypes="org.yaml.snakeyaml.constructor.BaseConstructor" />

  </module>

  <module name="org.ho.yaml" standard="JYAML">
    <description url="http://jyaml.sourceforge.net/">JYaml - YAML processor</description>
    <!-- jYAML 1.3 -->
    <class name="org.ho.yaml.Yaml" >
      <method name="load" signature="load()" match="name" >
        <return type="java.lang.Object" />
        <!-- https://snyk.io/vuln/SNYK-JAVA-ORGJYAML-550161 -->
        <sink argpos="0" kind="code_injection_deserialization" />
      </method>
      <method name="loadType" signature="loadType()" match="name" >
        <return type="java.lang.Object" />
        <sink argpos="0" kind="code_injection_deserialization"/>
      </method>
    </class>
  </module>


  <module name="com.esotericsoftware.yamlbeans" standard="YamlBeans">
    <description url="https://github.com/EsotericSoftware/yamlbeans">YamlBeans - YAML processor</description>

    <!-- YamlBeans 1.13 -->
    <class name="com.esotericsoftware.yamlbeans.YamlReader" >
      <constructor name="YamlReader" signature="YamlReader()" match="name" >
        <sink argpos="0" kind="code_injection_deserialization" />
      </constructor>
    </class>
  </module>

  <module name="flex" standard="apache.flex">
    <description url="https://flex.apache.org/">Apache Flex BlazeDS - Server-based Java remoting and web messaging</description>

    <!-- Apache Flex BlazeDS 4.7.3 -->
    <class name="flex.messaging.io.amf.ActionMessageInput" kind="interface" >
      <method name="setInputStream" signature="setInputStream()" match="name" >
        <sink argpos="0" kind="code_injection_deserialization" >
          <checker id="code_injection_deserialization" />
        </sink>
      </method>
    </class>

    <class name="flex.messaging.io.amf.AbstractAmfInput" supertypes="flex.messaging.io.amf.ActionMessageInput" />
    <class name="flex.messaging.io.amf.Amf0Input" supertypes="flex.messaging.io.amf.AbstractAmfInput" />
    <class name="flex.messaging.io.amf.Amf3Input" supertypes="flex.messaging.io.amf.AbstractAmfInput" />

    <class name="flex.messaging.io.SerializationContext" >
      <method name="setDeserializationValidator" signature="setDeserializationValidator(flex.messaging.validators.DeserializationValidator)" />
    </class>
    <class name="flex.messaging.validators.DeserializationValidator" />
  </module>

  <module name="org.red5" standard="Red5">
    <description url="https://github.com/Red5">Red5 - Java Media Server</description>

    <!-- Red5 IO AMF 1.2.3 -->
    <class name="org.red5.io.object.Deserializer" >
      <method name="deserialize" signature="deserialize(org.red5.io.object.Input, java.lang.reflect.Type)" >
        <sink argpos="0" kind="code_injection_deserialization" />
      </method>
    </class>
  </module>

  <module name="org.exolab.castor" standard="castor">
    <description url="https://castor-data-binding.github.io/castor/">Castor - Data binding framework for Java</description>

    <!-- Castor 1.4.1 -->
    <class name="org.exolab.castor.xml.Unmarshaller" >
      <method name="unmarshal" signature="unmarshal()" match="name" >
        <sink argpos="0" kind="code_injection_deserialization" />
      </method>
    </class>
  </module>

  <module name="com.cedarsoftware" standard="json-io">
    <description url="https://github.com/jdereg/json-io">json-io - JSON serialization</description>

    <!-- JsonIo 4.12.0 -->
    <class name="com.cedarsoftware.util.io.JsonReader" >
      <method name="jsonToJava" signature="jsonToJava(java.lang.String)" match="name" >
        <return type="java.lang.Object" />
        <sink argpos="0" kind="code_injection_deserialization" />
      </method>
    </class>
  </module>

  <module name="com.caucho.hessian" standard="hessian">
    <description url="http://hessian.caucho.com/">Hessian - Binary web service protocol (Java API)</description>
    <!-- Hessian/Burlap 4.0.6.3 -->
    <class name="com.caucho.hessian.io.AbstractHessianInput" >
      <method name="readObject" signature="readObject()" match="name" >
        <return type="java.lang.Object" />
      </method>
    </class>

    <class name="com.caucho.hessian.io.HessianInput" supertypes="com.caucho.hessian.io.AbstractHessianInput" >
      <constructor name="HessianInput" signature="HessianInput(java.io.InputStream)" >
        <sink argpos="0" kind="code_injection_deserialization" />
      </constructor>

      <method name="init" signature="init(java.io.InputStream)" >
        <sink argpos="0" kind="code_injection_deserialization" />
      </method>
    </class>
  </module>

  <!-- Lombok -->
  <!--
  <class name="lombok.Getter"/>
  <class name="lombok.Setter"/>
  <class name="lombok.ToString.Exclude"/>
  <class name="lombok.ToString."/>
  <class name="lombok.EqualsAndHashCode"/>
  <class name="lombok.EqualsAndHashCode.Exlude"/>
  <class name="lombok.Cleanup"/>
  <class name="lombok.AllArgsConstructor"/>
  <class name="lombok.RequiredArgsConstructor"/>
  <class name="lombok.Value"/>
  <class name="lombok.Builder"/>
  -->

  <!-- Atmosphere Framework -->
  <module name="org.atmosphere" >
    <description url="http://async-io.org/apidocs/overview-summary.html">Atmosphere Framework</description>

    <class name="org.atmosphere.cpr.AtmosphereServlet" supertypes="javax.servlet.http.HttpServlet" />
  </module>

  <module name="wg.scrypt" standard="wg.scrypt">
    <description url="https://github.com/wg/scrypt">Java implementation of scrypt</description>
    <class name="com.lambdaworks.crypto.SCryptUtil">
      <tags>password_hash, algo:scrypt</tags>
      <method name="scrypt" signature="scrypt(java.lang.String, int, int, int)" instance="false">
        <description>Scrypt password-hashing function, with 128 bits of random salt</description>
        <tags>password_hash, algo:scrypt, salt:autogen=128, data:0, strength.cpu:1, strength.mem:2, strength.parallel:3</tags>
        <return type="java.lang.String"/>
      </method>
      <method name="check" signature="check(java.lang.String, java.lang.String)" instance="false">
        <tags>password_verify, data:0, password:1</tags>
        <return type="boolean"/>
      </method>
    </class>
    <class name="com.lambdaworks.crypto.SCrypt">
      <tags>password_hash, algo:scrypt</tags>
      <method name="scrypt" signature="scrypt(byte[], byte[], int, int, int, int)" instance="false" alias="scryptN, scryptJ">
        <tags>data:0, salt:1, strength.cpu:2, strength.mem:3, strength.parallel:4, keylen:5</tags>
        <return type="byte[]"/>
        <sink argpos="1" kind="hardcoded_salt" resource="crypto"/>
        <neutralization kind="hash" resource="crypto" argpos="-1"/>
      </method>
    </class>
    <class name="com.lambdaworks.crypto.PBKDF">
      <description>Implementation of PBKDF2 (RFC2898)</description>
      <tags>password_hash, algo:pbkdf2</tags>
      <method name="pbkdf2" signature="pbkdf2(java.lang.String, byte[], byte[], int, int)">
        <tags>hash.algo:0, data:1, password:1, salt:2, iterations:3, keylen:4</tags>
        <return type="byte[]"/>
        <sink argpos="2" kind="hardcoded_salt" resource="crypto"/>
        <neutralization kind="hash" resource="crypto" argpos="-1"/>
      </method>
    </class>
  </module>

  <module name="jbcrypt" standard="jbcrypt">
    <description url="https://github.com/jeremyh/jBCrypt">jBCrypt - Implementation for OpenBSD Blowfish password hashing algorithm</description>
    <class name="org.mindrot.jbcrypt.BCrypt">
      <method name="hashpw" signature="hashpw(java.lang.String,java.lang.String)" instance="false">
        <tags>password_hash,algo:bcrypt,data:0,salt:1</tags>
        <return type="java.lang.String"/>
        <sink argpos="1" kind="hardcoded_salt" resource="crypto"/>
        <neutralization kind="hash" resource="crypto" argpos="-1"/>
      </method>
      <method name="checkpw" signature="checkpw(java.lang.String,java.lang.String)" instance="false">
        <tags>password_verify,algo:bcrypt,data:0,password:1</tags>
        <return type="boolean"/>
      </method>
      <method name="gensalt" signature="gensalt(int)" match="name" instance="false">
        <tags>algo:bcrypt, strength.strength:0</tags>
        <return type="java.lang.String"/>
      </method>
    </class>
  </module>
  
  <module name="patrickfav.bcrypt" standard="patrickfav.bcrypt">
    <description url="https://github.com/patrickfav/bcrypt">Java standalone implementation of the bcrypt password hash function</description>
    <class name="at.favre.lib.crypto.bcrypt.BCrypt">
      <method name="withDefaults" signature="withDefaults()" instance="false">
        <return type="at.favre.lib.crypto.bcrypt.BCrypt.Hasher"/>
      </method>
      <method name="with" signature="with()" match="name" instance="false">
        <return type="at.favre.lib.crypto.bcrypt.BCrypt.Hasher"/>
      </method>
    </class>
    <class name="at.favre.lib.crypto.bcrypt.BCrypt.Hasher">
      <method name="hashToChar" signature="hashToChar(int, char[])">
        <tags>password_hash, algo:bcrypt, strength.strength:0, data:1</tags>
        <return type="char[]"/>
      </method>
      <method name="hashToString" signature="hashToString(int, char[])">
        <tags>password_hash, algo:bcrypt, strength.strength:0, data:1</tags>
        <return type="java.lang.String"/>
      </method>
      <method name="hash" signature="hash(int, byte[])">
        <tags>password_hash, algo:bcrypt, strength.strength:0, data:1</tags>
        <return type="byte[]"/>
      </method>
      <method name="hash" signature="hash(int, byte[], byte[])" alias="hashRaw">
        <tags>password_hash, algo:bcrypt, strength.strength:0, salt:1, data:2</tags>
        <return type="byte[]"/>
        <sink argpos="1" kind="hardcoded_salt" resource="crypto"/>
        <neutralization kind="hash" resource="crypto" argpos="-1"/>
      </method>
    </class>
    <class name="at.favre.lib.crypto.bcrypt.BCrypt.Verifier">
      <tags>password_verify, algo:bcrypt</tags>
      <method name="verify" signature="verify(byte[], byte[])" alias="verifyStrict">
        <tags>password_verify, algo:bcrypt, data:0, password:1</tags>
        <return type="at.favre.lib.crypto.bcrypt.BCrypt.Result"/>
      </method>
    </class>
  </module>
  
  <module name="argon2-jvm" standard="argon2-jvm">
    <description url="https://github.com/phxql/argon2-jvm">Argon2 Binding for the JVM</description>
    <class name="de.mkammerer.argon2.Argon2" kind="interface">
      <tags>password_hash, algo:argon2</tags>
      <method name="hash" signature="hash(int, int, int, java.lang.String)" match="name">
        <tags>strength.iterations:0, strength.mem-kb:1, strength.parallel:2, data:3, password:3</tags>
        <return type="java.lang.String"/>
        <neutralization argpos="-1" kind="hash" resource="crypto"/>
      </method>
      <method name="verify" signature="verify()" match="name">
        <tags>password_verify, password:0, data:1</tags>
        <return type="boolean"/>
      </method>
    </class>
    <class name="de.mkammerer.argon2.Argon2Advanced" supertypes="de.mkammerer.argon2.Argon2">
      <tags>password_hash, algo:argon2</tags>
    </class>
    <class name="de.mkammerer.argon2.Argon2Factory">
      <method name="create" signature="create()" match="name" instance="false">
        <return type="de.mkammerer.argon2.Argon2"/>
      </method>
      <method name="create" signature="createAdvanced()" match="name" instance="false">
        <return type="de.mkammerer.argon2.Argon2Advanced"/>
      </method>
    </class>
  </module>

  <module name="jargon2" standard="jargon2">
    <description url="https://github.com/kosprov/jargon2-api">Fluent Java API for Argon2 password hashing</description>
    <class name="com.kosprov.jargon2.api.Jargon2">
      <method name="jargon2Hasher" signature="jargon2Hasher()" instance="false">
        <return type="com.kosprov.jargon2.api.Jargon2.Hasher"/>
      </method>
      <method name="jargon2Verifier" signature="jargon2Verifier()" instance="false">
        <return type="com.kosprov.jargon2.api.Jargon2.Verifier"/>
      </method>
      <method name="jargon2LowLevelApi" signature="jargon2LowLevelApi()" instance="false">
        <return type="com.kosprov.jargon2.api.Jargon2.LowLevelApi"/>
      </method>
    </class>
    <class name="com.kosprov.jargon2.api.Jargon2.ByteArray" supertypes="java.lang.AutoCloseable"
           alias="com.kosprov.jargon2.api.Jargon2.ClearableSourceByteArray">
      <method name="getBytes" signature="getBytes()"><return type="byte[]"/></method>
      <method name="clear" signature="clear()"><neutralization kind="*" argpos="-2"/></method>
    </class>
    <class name="com.kosprov.jargon2.api.Jargon2.CharSeqByteArray" supertypes="com.kosprov.jargon2.api.Jargon2.ByteArray"
           alias="com.kosprov.jargon2.api.Jargon2.ClearableSourceCharSeqByteArray">
      <method name="encoding" signature="encoding(java.lang.String)" match="numargs"><return type="@self"/></method>
      <method name="normalize" signature="normalize()" match="name"><return type="@self"/></method>
    </class>
    <class name="com.kosprov.jargon2.api.Jargon2.Hasher">
      <tags>password_hash, algo:argon2</tags>
      <method name="backend" signature="backend(java.lang.String)" match="numargs"><return type="@self"/></method>
      <method name="options" signature="options(java.lang.Map)"><return type="@self"/></method>
      <method name="type" signature="type(com.kosprov.jargon2.api.Jargon2.Type)"><return type="@self"/></method>
      <method name="version" signature="version(com.kosprov.jargon2.api.Jargon2.Version)"><return type="@self"/></method>
      <method name="timeCost" signature="timeCost(int)"><tags>strength.iterations:0</tags><return type="@self"/></method>
      <method name="memoryCost" signature="memoryCost(int)"><tags>strength.mem-kb:0</tags><return type="@self"/></method>
      <method name="parallelism" signature="parallelism(int)" match="name"><tags>strength.parallel:0</tags><return type="@self"/></method>
      <method name="hashLength" signature="hashLength(int)"><tags>keylen:0</tags><return type="@self"/></method>
      <method name="saltLength" signature="saltLength(int)"><tags>saltlen:0</tags><return type="@self"/></method>
      <method name="salt" signature="salt(byte[])" match="numargs"><tags>salt:0</tags><return type="@self"/><sink kind="hardcoded_salt" argpos="0"/></method>
      <method name="saltGenerator" signature="saltGenerator(java.lang.String)" match="name"><return type="@self"/></method>
      <method name="secret" signature="secret(byte[])" match="numargs">
        <tags>pepper:0, key:0</tags>
        <return type="@self"/>
        <sink kind="hardcoded_key" argpos="0" resource="crypto"/>
      </method>
      <method name="ad" signature="ad(byte[])" match="numargs"><return type="@self"/></method>

      <method name="password" signature="password(byte[])" match="numargs"><tags>password_hash, algo:argon2, data:0</tags><return type="@self"/></method>

      <method name="rawHash" signature="rawHash()">
        <return type="byte[]"/>
        <neutralization argpos="-1" resource="crypto"/>
      </method>
      <method name="encodedHash" signature="encodedHash()">
        <return type="java.lang.String"/>
        <neutralization argpos="-1" resource="crypto"/>
      </method>
      <method name="propertiesMatch" signature="propertiesMatch(java.lang.String)">
        <return type="boolean"/>
      </method>
    </class>
    
    <class name="com.kosprov.jargon2.api.Jargon2.Verifier"></class>
    
    <class name="com.kosprov.jargon2.api.Jargon2.LowLevelApi">
      <tags>password_hash, algo:argon2</tags>
      <method name="rawHash" signature="rawHash(com.kosprov.jargon2.api.Jargon2.Type, com.kosprov.jargon2.api.Jargon2.Version, int, int, int,int, byte[], byte[])"
              match="numargs" alias="encodeHash">
        <tags>strength.mem-db:2, strength.iterations:3, strength.parallel:4, keylen:5, salt:6, data:7, password:7</tags>
        <sink kind="hardcoded_salt" argpos="6" resource="crypto"/>
        <neutralization argpos="-1" kind="hash" resource="crypto"/>
      </method>
      <method name="rawHash_2" signature="rawHash(com.kosprov.jargon2.api.Jargon2.Type, com.kosprov.jargon2.api.Jargon2.Version, int, int, int, int, int, byte[], byte[], byte[], byte[], java.lang.Map)"
              match="numargs" alias="encodeHash">
        <tags>strength.mem-db:2, strength.iterations:3, strength.parallel:5, keylen:6, key:7, pepper:7, salt:9, data:10, password:10</tags>
        <sink kind="hardcoded_salt" argpos="9" resource="crypto"/>
        <sink kind="hardcoded_key" argpos="7" resource="crypto"/>
        <neutralization argpos="-1" kind="hash" resource="crypto"/>
      </method>
    </class>
  </module>
  
  <module name="org.bouncycastle.crypto" standard="bouncycastle">
    <description url="https://www.bouncycastle.org/">The Legion of the Bouncy Castle - Java Crypto</description>
    
    <class name="org.bouncycastle.crypto.generators.BCrypt">
      <description>OpenBSD reference implementation of Bcrypt</description>
      <tags>password_hash, algo:bcrypt</tags>
      <method name="generate" signature="generate(byte[], byte[], int)">
        <tags>data:0, salt:1, bcrypt.cost</tags>
        <sink argpos="1" kind="hardcoded_salt" resource="crypto"/>
        <neutralization kind="hash" resource="crypto" argpos="-1"/>
      </method>
    </class>
    <class name="org.bouncycastle.crypto.generators.SCrypt">
      <tags>password_hash, algo:scrypt</tags>
      <method name="generate" signature="generate(byte[], byte[], int, int, int, int)" instance="false" alias="scryptN, scryptJ">
        <tags>data:0, salt:1, strength.cpu:2, strength.mem:3, strength.parallel:4, keylen:5</tags>
        <return type="byte[]"/>
        <neutralization kind="hash" resource="crypto" argpos="-1"/>
        <sink argpos="1" kind="hardcoded_salt" resource="crypto"/>
      </method>
    </class>
    <class name="org.bouncycastle.crypto.generators.Argon2BytesGenerator">
      <tags>password_hash, algo:argon2</tags>
      <method name="init" signature="init(org.bouncycastle.crypto.params.Argon2Parameters)"></method>
      <method name="generateBytes" signature="generateBytes(byte[], byte[])" match="name">
        <tags>data:0, password:0, out:1</tags>
        <propagate from="-2,0" to="1"/>
        <neutralization kind="hash" resource="crypto" argpos="1"/>
      </method>
    </class>
    <class name="org.bouncycastle.crypto.params.Argon2Parameters.Builder">
      <tags>password_hash, algo:argon2, strength.parallel:fixed=1, strength.mem:fixed=12, strength.iterations:fixed=3</tags>
      <method name="withParallelism" signature="withParallelism(int)"><tags>strength:parallel:0</tags><return type="@self"/></method>
      <method name="withSalt" signature="withSalt(byte[])"><tags>salt:0</tags><return type="@self"/><sink kind="hardcoded_salt" argpos="0"/></method>
      <method name="withSecret" signature="withSecret(byte[])" alias="withAdditional"><tags>pepper:0</tags><return type="@self"/><sink kind="hardcoded_key" argpos="0"/></method>
      <method name="withParallelism" signature="withParallelism(int)"><tags>strength:parallel:0</tags><return type="@self"/></method>
      <method name="withIterations" signature="withIterations(int)"><tags>strength:iterations:0</tags><return type="@self"/></method>
      <method name="withMemoryPowOfTwo" signature="withMemoryPowOfTwo(int)"><tags>strength:mem:0</tags><return type="@self"/></method>
      <method name="withMemoryAsKB" signature="withMemoryAsKB(int)"><tags>strength:mem-kb:0</tags><return type="@self"/></method>
      <method name="withVersion" signature="withVersion(int)" match="name" alias="withCharToByteConverter"><return type="@self"/></method>
      <method name="build" signature="build()"><return type="org.bouncycastle.crypto.params.Argon2Parameters"/></method>
    </class>
    <class name="org.bouncycastle.crypto.params.Argon2Parameters"></class>

  </module>

</library>