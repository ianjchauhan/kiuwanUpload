<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.optimyth.com/schema/definitions/library_metadata"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="java.spark" standard="Spark" technology="java">

  <description url="http://sparkjava.com/">Micro web framework for Java / Kotlin</description>

  <class name="spark.Spark">
    <description>main Spark class, made of routes</description>

    <field name="redirect" type="spark.Redirect"/>
    <field name="staticFiles" type="spark.Service.StaticFiles"/>

    <method name="connect" signature="connect(java.lang.String, spark.Route)" instance="false"></method>
    <method name="connect_2" signature="connect(java.lang.String, java.lang.String, spark.Route)" instance="false"></method>
    <method name="connect_3" signature="connect(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)" instance="false"></method>
    <method name="delete" signature="delete(java.lang.String, spark.Route)" instance="false"></method>
    <method name="delete_2" signature="delete(java.lang.String, java.lang.String, spark.Route)" instance="false"></method>
    <method name="delete_3" signature="delete(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)" instance="false"></method>
    <method name="get" signature="get(java.lang.String, spark.Route)" instance="false"></method>
    <method name="get_2" signature="get(java.lang.String, java.lang.String, spark.Route)" instance="false"></method>
    <method name="get_3" signature="get(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)" instance="false"></method>
    <method name="head" signature="head(java.lang.String, spark.Route)" instance="false"></method>
    <method name="head_2" signature="head(java.lang.String, java.lang.String, spark.Route)" instance="false"></method>
    <method name="head_3" signature="head(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)" instance="false"></method>
    <method name="options" signature="options(java.lang.String, spark.Route)" instance="false"></method>
    <method name="options_2" signature="options(java.lang.String, java.lang.String, spark.Route)" instance="false"></method>
    <method name="options_3" signature="options(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)" instance="false"></method>
    <method name="patch" signature="patch(java.lang.String, spark.Route)" instance="false"></method>
    <method name="patch_2" signature="patch(java.lang.String, java.lang.String, spark.Route)" instance="false"></method>
    <method name="patch_3" signature="patch(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)" instance="false"></method>
    <method name="post" signature="post(java.lang.String, spark.Route)" instance="false"></method>
    <method name="post_2" signature="post(java.lang.String, java.lang.String, spark.Route)" instance="false"></method>
    <method name="post_3" signature="post(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)" instance="false"></method>
    <method name="put" signature="put(java.lang.String, spark.Route)" instance="false"></method>
    <method name="put_2" signature="put(java.lang.String, java.lang.String, spark.Route)" instance="false"></method>
    <method name="put_3" signature="put(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)" instance="false"></method>
    <method name="trace" signature="trace(java.lang.String, spark.Route)" instance="false"></method>
    <method name="trace_2" signature="trace(java.lang.String, java.lang.String, spark.Route)" instance="false"></method>
    <method name="trace_3" signature="trace(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)" instance="false"></method>

    <method name="after" signature="after(java.lang.String, spark.Filter...)" instance="false" alias="afterAfter,before"></method>

    <method name="defaultResponseTransformer" signature="defaultResponseTransformer(spark.ResponseTransformer)" instance="false"></method>
    <method name="exception" signature="exception(java.lang.Class,spark.ExceptionHandler)" instance="false"></method>
    <method name="staticFileLocation" signature="staticFileLocation(java.lang.String)" instance="false" alias="externalStaticFileLocation">
      <sink argpos="0" kind="resource_injection" resource="web"/>
    </method>
    <method name="halt" signature="halt(java.lang.String)" instance="false">
      <sink argpos="0" kind="xss" resource="web"/>
    </method>
    <method name="halt" signature="halt(int,java.lang.String)" instance="false">
      <sink argpos="1" kind="xss" resource="web"/>
    </method>
    <method name="internalServerError" signature="internalServerError(spark.Route)" instance="false"></method>
    <method name="ipAddress" signature="ipAddress(java.lang.String)" instance="false" alias="seIpAddress">
      <sink argpos="1" kind="resource_injection" resource="network"/>
    </method>
    <method name="modelAndView" signature="modelAndView(java.lang.Object,java.lang.String)" instance="false">
      <return type="spark.ModelAndView"/>
    </method>
    <method name="notFound" signature="noFound(spark.Route)" instance="false"></method>
    <method name="path" signature="path(java.lang.String,spark.RouteGroup)"></method>
    <method name="port" signature="port(java.lang.Integer)" instance="false" alias="setPort">
      <sink argpos="0" kind="resource_injection" resource="web"/>
    </method>
    <method name="secure" signature="	secure()" match="name" instance="false" alias="setSecure">
      <sink argpos="0,1,2,3,4,5" kind="resource_injection" resource="web"/>
    </method>
    <method name="webSocket" signature="webSocket(java.lang.String,java.lang.String)" instance="false"></method>
  </class>

  <class name="spark.Service">
    <method name="ignite" signature="ignite()" instance="false"><return type="spark.Service"/></method>

    <method name="addFilter" signature="addFilter(spark.route.HttpMethod,spark.Filter)"/>
    <method name="addRoute" signature="addRoute(spark.route.HttpMethod,spark.Route)"/>

    <method name="after" signature="after(spark.Filter)"></method>
    <method name="afterAfter" signature="afterAfter(spark.Filter)"></method>
    <method name="before" signature="before(spark.Filter)"></method>
    <method name="after_2" signature="after(java.lang.String, spark.Filter)"></method>
    <method name="afterAfter_2" signature="afterAfter(java.lang.String, spark.Filter)"></method>
    <method name="before_2" signature="before(java.lang.String, spark.Filter)"></method>
    <method name="after_3" signature="after(java.lang.String, java.lang.String, spark.Filter)"></method>
    <method name="before_3" signature="before(java.lang.String, java.lang.String, spark.Filter)"></method>

    <method name="connect" signature="connect(java.lang.String, spark.Route)"></method>
    <method name="connect_2" signature="connect(java.lang.String, java.lang.String, spark.Route)"></method>
    <method name="connect_3" signature="connect(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)"></method>
    <method name="delete" signature="delete(java.lang.String, spark.Route)"></method>
    <method name="delete_2" signature="delete(java.lang.String, java.lang.String, spark.Route)"></method>
    <method name="delete_3" signature="delete(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)"></method>
    <method name="get" signature="get(java.lang.String, spark.Route)"></method>
    <method name="get_2" signature="get(java.lang.String, java.lang.String, spark.Route)"></method>
    <method name="get_3" signature="get(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)"></method>
    <method name="head" signature="head(java.lang.String, spark.Route)"></method>
    <method name="head_2" signature="head(java.lang.String, java.lang.String, spark.Route)"></method>
    <method name="head_3" signature="head(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)"></method>
    <method name="options" signature="options(java.lang.String, spark.Route)"></method>
    <method name="options_2" signature="options(java.lang.String, java.lang.String, spark.Route)"></method>
    <method name="options_3" signature="options(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)"></method>
    <method name="patch" signature="patch(java.lang.String, spark.Route)"></method>
    <method name="patch_2" signature="patch(java.lang.String, java.lang.String, spark.Route)"></method>
    <method name="patch_3" signature="patch(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)"></method>
    <method name="post" signature="post(java.lang.String, spark.Route)"></method>
    <method name="post_2" signature="post(java.lang.String, java.lang.String, spark.Route)"></method>
    <method name="post_3" signature="post(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)"></method>
    <method name="put" signature="put(java.lang.String, spark.Route)"></method>
    <method name="put_2" signature="put(java.lang.String, java.lang.String, spark.Route)"></method>
    <method name="put_3" signature="put(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)"></method>
    <method name="trace" signature="trace(java.lang.String, spark.Route)"></method>
    <method name="trace_2" signature="trace(java.lang.String, java.lang.String, spark.Route)"></method>
    <method name="trace_3" signature="trace(java.lang.String, java.lang.String, spark.Route, spark.ResponseTransformer)"></method>

    <method name="defaultResponseTransformer" signature="defaultResponseTransformer(spark.ResponseTransformer)"></method>
    <method name="exception" signature="exception(java.lang.Class,spark.ExceptionHandler)"></method>
    <method name="staticFileLocation" signature="staticFileLocation(java.lang.String)" alias="externalStaticFileLocation">
      <return type="spark.Service"/>
      <sink argpos="0" kind="resource_injection" resource="web"/>
    </method>
    <method name="halt" signature="halt(java.lang.String)">
      <sink argpos="0" kind="xss" resource="web"/>
    </method>
    <method name="halt" signature="halt(int,java.lang.String)">
      <sink argpos="1" kind="xss" resource="web"/>
    </method>
    <method name="internalServerError" signature="internalServerError(spark.Route)"></method>
    <method name="ipAddress" signature="ipAddress(java.lang.String)" alias="seIpAddress">
      <return type="spark.Service"/>
      <sink argpos="1" kind="resource_injection" resource="network"/>
    </method>
    <method name="modelAndView" signature="modelAndView(java.lang.Object,java.lang.String)">
      <return type="spark.ModelAndView"/>
    </method>
    <method name="notFound" signature="noFound(spark.Route)"></method>
    <method name="path" signature="path(java.lang.String,spark.RouteGroup)"></method>
    <method name="port" signature="port(java.lang.Integer)" alias="setPort">
      <return type="spark.Service"/>
      <sink argpos="0" kind="resource_injection" resource="web"/>
    </method>
    <method name="secure" signature="	secure()" match="name" alias="setSecure">
      <return type="spark.Service"/>
      <sink argpos="0,1,2,3,4,5" kind="resource_injection" resource="web"/>
    </method>
    <method name="webSocket" signature="webSocket(java.lang.String,java.lang.String)"></method>
  </class>

  <class name="spark.Route" kind="interface">
    <method name="handle" signature="handle(spark.Request, spark.Response)">
      <return type="java.lang.Object"/>
    </method>
  </class>

  <class name="spark.route.HttpMethod" kind="enum">
    <field name="after"/><field name="afterafter"/><field name="before"/><field name="connect"/>
    <field name="delete"/><field name="get"/><field name="head"/><field name="options"/>
    <field name="patch"/><field name="post"/><field name="put"/><field name="trace"/><field name="unsupported"/>
  </class>

  <class name="spark.TemplateViewRoute" kind="interface">
    <method name="handle" signature="handle(spark.Request, spark.Response)">
      <return type="spark.ModelAndView"/>
    </method>
  </class>

  <class name="spark.Filter" kind="interface">
    <method name="handle" signature="handle(spark.Request, spark.Response)">
      <return type="java.lang.Object"/>
    </method>
  </class>

  <class name="spark.ResponseTransformer" kind="interface">
    <method name="render" signature="render(java.lang.Object)"><return type="java.lang.String"/></method>
  </class>

  <class name="spark.ExceptionHandler" kind="interface">
    <method name="handle" signature="handle(java.lang.Exception, spark.Request, spark.Response)">
      <return type="java.lang.Object"/>
    </method>
  </class>

  <class name="spark.Request">
    <method name="attribute" signature="attribute(java.lang.String)">
      <return type="java.lang.Object"/>
      <propagate from="0" to="-1"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="attribute_2" signature="attribute(java.lang.String,java.lang.Object)">
      <tags>CWE:501, stateChange</tags>
      <sink argpos="0,1" kind="trust_boundary" resource="web"/>
    </method>
    <method name="attributes" signature="attributes()">
      <return type="java.util.Set" elementType="java.lang.String"/>
    </method>
    <method name="body" signature="body()">
      <return type="java.lang.String"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="bodyAsBytes" signature="bodyAsBytes()">
      <return type="byte[]"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="contentType" signature="contentType()">
      <return type="java.lang.String"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="contentPath" signature="contentPath()">
      <tags>doNotPropagate</tags>
      <return type="java.lang.String"/>
      <!--source argpos="-1" kind="user_input" resource="web"/--><!-- Cannot be tainted by attackers -->
    </method>
    <method name="cookie" signature="cookie(java.lang.String)">
      <tags>CWE:784</tags>
      <return type="java.lang.String"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="cookies" signature="cookies()">
      <tags>CWE:784</tags>
      <return type="java.util.Map"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="headers" signature="headers()">
      <return type="java.util.Set"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="headers_2" signature="headers(java.lang.String)">
      <return type="java.lang.String"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="host" signature="host()">
      <return type="java.lang.String"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="ip" signature="ip()">
      <return type="java.lang.String"/>
      <!-- considered unsafe -->
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="matchedPath" signature="matchedPath()">
      <return type="java.lang.String"/>
      <!--source argpos="-1" kind="user_input" resource="web"/ SAFE -->
    </method>
    <method name="params" signature="params()">
      <return type="java.util.Map"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="pathInfo" signature="pathInfo()">
      <return type="java.lang.String"/>
      <!--source argpos="-1" kind="user_input" resource="web"/ SAFE -->
    </method>
    <method name="port" signature="port()">
      <return type="int"/>
      <!--source argpos="-1" kind="user_input" resource="web"/ SAFE -->
    </method>
    <method name="protocol" signature="protocol()">
      <return type="java.lang.String"/>
      <!--source argpos="-1" kind="user_input" resource="web"/-->
    </method>
    <method name="queryMap" signature="queryMap()" match="name">
      <return type="spark.QueryParamsMap"/>
    </method>
    <method name="queryParamOrDefault" signature="queryParamOrDefault(java.lang.String,java.lang.String)">
      <return type="java.lang.String"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="queryParams" signature="queryParams()">
      <return type="java.util.Set" elementType="java.lang.String"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="queryParams_2" signature="queryParams(java.lang.String)" alias="queryParamsValues">
      <return type="java.lang.String"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="queryString" signature="queryString()">
      <return type="java.lang.String"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="raw" signature="raw()">
      <return type="javax.servlet.http.HttpServletRequest"/>
    </method>
    <method name="requestMethod" signature="requestMethod()">
      <return type="java.lang.String"/>
      <!--source argpos="-1" kind="user_input" resource="web"/ SAFE -->
    </method>
    <method name="scheme" signature="scheme()">
      <return type="java.lang.String"/>
      <!--source argpos="-1" kind="user_input" resource="web"/ SAFE -->
    </method>
    <method name="servletPath" signature="servletPath()">
      <return type="java.lang.String"/>
      <!--source argpos="-1" kind="user_input" resource="web"/ SAFE -->
    </method>
    <method name="session" signature="session()" match="name">
      <return type="spark.Session"/>
    </method>
    <method name="splat" signature="splat()">
      <return type="java.lang.String[]"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="uri" signature="uri()">
      <return type="java.lang.String"/>
    </method>
    <method name="url" signature="ur()">
      <return type="java.lang.String"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="userAgent" signature="userAgent()">
      <return type="java.lang.String"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>

  </class>

  <class name="spark.Response">
    <method name="body" signature="body()">
      <return type="java.lang.String"/>
    </method>
    <method name="body_2" signature="body(java.lang.String)">
    </method>
    <method name="cookie" signature="cookie(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)">
      <tags>CWE:113, stateChange,header.name:Cookie,cookie.create,cookie.domain:0,cookie.path:1,cookie.name:2,cookie.value:3,cookie.maxAge:4,cookie.secure:5,cookie.httpOnly:6</tags>
      <sink argpos="0,1,2,3" kind="header_manipulation" resource="web"/>
    </method>
    <method name="cookie_2" signature="cookie(java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)">
      <tags>CWE:113, stateChange,header.name:Cookie,cookie.create,cookie.path:0,cookie.name:1,cookie.value:2,cookie.maxAge:3,cookie.secure:4,cookie.httpOnly:5</tags>
      <sink argpos="0,1,2" kind="header_manipulation" resource="web"/>
    </method>
    <method name="cookie_3" signature="cookie(java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)">
      <tags>CWE:113, stateChange,header.name:Cookie,cookie.create,cookie.path:0,cookie.name:1,cookie.value:2,cookie.maxAge:3,cookie.secure:4,cookie.httpOnly:5</tags>
      <sink argpos="0,1,2" kind="header_manipulation" resource="web"/>
    </method>
    <method name="cookie_4" signature="cookie(java.lang.String,java.lang.String,int,boolean,boolean)">
      <tags>CWE:113, stateChange,header.name:Cookie,cookie.create,cookie.create,cookie.name:0,cookie.value:1,cookie.maxAge:2,cookie.secure:3,cookie.httpOnly:4</tags>
      <sink argpos="0,1" kind="header_manipulation" resource="web"/>
    </method>
    <method name="cookie_5" signature="cookie(java.lang.String,java.lang.String,int,boolean)">
      <tags>CWE:113, stateChange,header.name:Cookie,cookie.create,cookie.name:0,cookie.value:1,cookie.maxAge:2,cookie.httpOnly:3</tags>
      <sink argpos="0,1" kind="header_manipulation" resource="web"/>
    </method>
    <method name="cookie_6" signature="cookie(java.lang.String,java.lang.String,int)">
      <tags>CWE:113, stateChange,header.name:Cookie,cookie.create,cookie.name:0,cookie.value:1,cookie.maxAge:2</tags>
      <sink argpos="0,1" kind="header_manipulation" resource="web"/>
    </method>
    <method name="cookie_7" signature="cookie(java.lang.String,java.lang.String)">
      <tags>CWE:113, stateChange,header.name:Cookie,cookie.create,cookie.name:0,cookie.value:1</tags>
      <sink argpos="0,1" kind="header_manipulation" resource="web"/>
    </method>
    <method name="raw" signature="raw()">
      <return type="javax.servlet.http.HttpServletResponse"/>
    </method>
    <method name="redirect" signature="redirect(java.lang.String,int)" match="name">
      <sink argpos="0" kind="open_redirect" />
      <sink argpos="0" kind="header_manipulation" resource="web"/>
      <sink kind="execution_after_redirect" argpos="-1" resource="web"/>
    </method>
    <method name="removeCookie" signature="removeCookie(java.lang.String,java.lang.String)">
      <sink argpos="0" kind="header_manipulation" resource="web"/>
    </method>
    <method name="status" signature="status()"><return type="int"/></method>
    <method name="status_2" signature="status(int)"></method>
    <method name="type" signature="type(java.lang.String)">
      <sink argpos="0" kind="header_manipulation" resource="web"/>
    </method>
  </class>

  <class name="spark.Session">
    <description>Session object</description>
    <method name="attribute" signature="attribute(java.lang.String)">
      <return type="java.lang.Object"/>
      <propagate from="0" to="-1"/>
      <!-- <source argpos="-1" kind="user_input" resource="web"/> -->
    </method>
    <method name="attribute_2" signature="attribute(java.lang.String,java.lang.Object)">
      <tags>CWE:501, stateChange</tags>
      <sink argpos="0,1" kind="trust_boundary" resource="web"/>
    </method>
    <method name="attributes" signature="attributes()">
      <return type="java.util.Set" elementType="java.lang.String"/>
    </method>
    <method name="id" signature="id()">
      <tags>sensitive_info</tags>
      <source argpos="-1" kind="sensitive_info" resource="web"/>
    </method>
    <method name="raw" signature="raw()">
      <return type="javax.servlet.http.HttpSession"/>
    </method>
  </class>

  <class name="spark.QueryParamsMap">
    <method name="get" signature="get(java.lang.String...)">
      <return type="spark.QueryParamsMap"/>
    </method>
    <method name="value" signature="value()" match="name">
      <return type="java.lang.String"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="values" signature="values()">
      <return type="java.lang.String[]"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <method name="toMap" signature="toMap()">
      <return type="java.util.Map"/>
      <source argpos="-1" kind="user_input" resource="web"/>
    </method>
    <!-- Irrelevant, for now
    <method name="booleanValue" signature="booleanValue()">
      <return type="java.lang.Boolean"/>
    </method>
    <method name="longValue" signature="longValue()" alias="integerValue">
      <return type="java.lang.Long"/>
    </method>
    <method name="doubleValue" signature="doubleValue()" alias="floatValue">
      <return type="java.lang.Double"/>
    </method>
    <method name="hasKey" signature="hasKey(java.lang.String)">
      <return type="boolean"/>
    </method>
    <method name="hasKeys" signature="hasKeys()" alias="hasValue">
      <return type="boolean"/>
    </method>
    -->
  </class>

  <class name="spark.Redirect">
    <method name="any" signature="any(java.lang.String, java.lang.String)" alias="delete,get,post,put" match="name">
      <sink argpos="0" kind="resource_injection" resource="web"/>
      <sink argpos="1" kind="open_redirect" resource="web"/>
    </method>
  </class>

  <class name="spark.Service.StaticFiles">
    <method name="disableMimeTypeGuessing" signature="disableMimeTypeGuessing()"/>
    <method name="expireTime" signature="expireTime(long)"/>
    <method name="externalLocaltion" signature="externalLocation(java.lang.String)" alias="location">
      <sink argpos="0" kind="resource_injection" resource="web"/>
    </method>
    <method name="header" signature="header(java.lang.String, java.lang.String)">
      <sink argpos="0,1" kind="header_manipulation" resource="web"/>
    </method>
    <method name="headers" signature="headers(java.util.Map)">
      <sink argpos="0" kind="header_manipulation" resource="web"/>
    </method>
    <method name="registerMimeType" signature="registerMimeType(java.lang.String, java.lang.String)"></method>
  </class>

  <class name="spark.ModelAndView">
    <constructor name="ModelAndView" signature="ModelAndView(java.lang.Object,java.lang.String)"/>
    <method name="getModel" signature="getModel()"><return type="java.lang.Object"/></method>
    <method name="getViewName" signature="getViewName()"><return type="java.lang.String"/></method>
  </class>

  <class name="spark.servlet.SparkFilter" supertypes="javax.servlet.Filter" />
</library>

