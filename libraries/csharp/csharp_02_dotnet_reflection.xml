<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.optimyth.com/schema/definitions/library_metadata"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="System.Reflection" technology="csharp">

  <description url="https://docs.microsoft.com/en-us/dotnet/api/system.reflection">
    Reflective access to .NET entities
  </description>

  <!--
    System.Reflection / System.Reflection.Emit packages, plus a few more mscorlib classes not in System.Reflection,
    like System.Type, System.Delegate...
  -->

  <class name="System.Type" supertypes="System.Reflection.MemberInfo">
    <!-- many members, a small subset declared here -->
    <field name="Assembly" type="System.Reflection.Assembly"/>
    <field name="Attributes" type="System.Reflection.TypeAttributes"/>
    <field name="BaseType" type="System.Type"/>
    <field name="DeclaringMethod" type="System.Reflection.MethodBase"/>
    <field name="Module" type="System.Reflection.Module"/>
    <field name="Namespace" type="string"/>
    <field name="StructLayoutAttribute" type="System.Runtime.InteropServices.StructLayoutAttribute"/>
    <field name="TypeHandle" type="System.RuntimeTypeHandle"/>
    <field name="TypeInitializer" type="System.Reflection.ConstructorInfo"/>
    <field name="UnderlyingSystemType" type="System.Type"/>

    <method name="FindInterfaces" signature="FindInterfaces(System.Reflection.TypeFilter,object)">
      <return type="System.Type[]"/>
    </method>
    <method name="FindMembers" signature="FindMembers(System.Reflection.MemberTypes,BindingFlags,System.Reflection.MemberFilter,object)">
      <tags>accessibility_subversion:1</tags>
      <return type="System.Reflection.MemberInfo[]"/>
    </method>
    <method name="GetConstructor" signature="GetConstructor(System.Type[])" match="name">
      <tags>accessibility_subversion:0</tags>
      <return type="System.Reflection.ConstructorInfo"/>
    </method>
    <method name="GetConstructorImpl" signature="GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])" match="name">
      <tags>accessibility_subversion:0</tags>
      <return type="System.Reflection.ConstructorInfo"/>
    </method>
    <method name="GetConstructors" signature="GetConstructors" match="name">
      <tags>accessibility_subversion:0</tags>
      <return type="System.Reflection.ConstructorInfo[]"/>
    </method>
    <method name="GetElementType" signature="GetElementType()"><return type="System.Type"/></method>
    <method name="GetEvent" signature="GetEvent(string)" match="name">
      <return type="System.Reflection.EventInfo"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetEvent" signature="GetEvent()" match="name">
      <tags>accessibility_subversion:1</tags>
      <return type="System.Reflection.EventInfo"/>
    </method>
    <method name="GetEvents" signature="GetEvents()" match="name">
      <tags>accessibility_subversion:1</tags>
      <return type="System.Reflection.EventInfo[]"/>
    </method>
    <method name="GetField" signature="GetField(string)" match="name">
      <tags>accessibility_subversion:1</tags>
      <return type="System.Reflection.FieldInfo"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetFields" signature="GetFields()" match="name">
      <tags>accessibility_subversion:0</tags>
      <return type="System.Reflection.FieldInfo[]"/>
    </method>
    <method name="GetGenericArguments" signature="GetGenericArguments()"><return type="System.Type[]"/></method>
    <method name="GetInterface" signature="GetInterface(string)" instance="false" match="name">
      <return type="System.Type"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetInterfaces" signature="GetInterfaces()"><return type="System.Type[]"/></method>
    <method name="GetMember" signature="GetMember(string)" match="name">
      <tags>accessibility_subversion:1,2</tags>
      <return type="System.Reflection.MemberInfo"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetMembers" signature="GetMembers()" match="name">
      <return type="System.Reflection.MemberInfo[]"/>
    </method>
    <method name="GetMethod" signature="GetMethod(string)" match="name">
      <tags>accessibility_subversion:1</tags>
      <return type="System.Reflection.MethodInfo"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetMethodImpl" signature="GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])" match="name">
      <tags>accessibility_subversion:1</tags>
      <return type="System.Reflection.MethodInfo"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetMethods" signature="GetMethods()" match="name">
      <return type="System.Reflection.MethodInfo[]"/>
    </method>
    <method name="GetNestedType" signature="GetType(string)" match="name">
      <tags>accessibility_subversion:1,2</tags>
      <return type="System.Type"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetNestedTypes" signature="GetNestedTypes(string)" match="name">
      <tags>accessibility_subversion:0</tags>
      <return type="System.Type"/>
    </method>
    <method name="GetProperty" signature="GetProperty(string)" match="name">
      <tags>accessibility_subversion:1</tags>
      <return type="System.Reflection.PropertyInfo"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetPropertyImpl" signature="GetPropertyImpl(string, BindingFlags, Binder, Type, Type[], ParameterModifier[]))" match="name">
      <tags>accessibility_subversion:1</tags>
      <return type="System.Reflection.PropertyInfo"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetProperties" signature="GetProperties()" match="name">
      <tags>accessibility_subversion:0</tags>
      <return type="System.Reflection.PropertyInfo[]"/>
    </method>
    <method name="GetType" signature="GetType(string)" instance="false" match="name">
      <return type="System.Type"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetTypeFromCLSID" signature="GetTypeFromCLSID(System.Guid)" instance="false">
      <return type="System.Type"/>
    </method>
    <method name="GetTypeFromProgID" signature="GetTypeFromProgID(string)" match="name" instance="false">
      <return type="System.Type"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetTypeHandle" signature="GetTypeHandle(object)" instance="false">
      <return type="System.RuntimeTypeHandle"/>
    </method>
    <method name="InvokeMember" signature="InvokeMember(string,BindingFlags,Binder,object,object[])">
      <tags>accessibility_subversion:1,</tags>
      <return type="object"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="IsAssignableFrom" signature="IsAssignableFrom(System.Type)">
      <return type="bool"/>
      <neutralization argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="IsEnumDefined" signature="IsEnumDefined(object)"><return type="bool"/></method>
    <method name="IsEquivalentTo" signature="IsEquivalentTo(System.Type)"><return type="bool"/></method>
    <method name="IsInstanceOfType" signature="IsInstanceOfType(object)"><return type="bool"/></method>
    <method name="IsSubclassOf" signature="IsSubclassOf(System.Type)"><return type="bool"/></method>
    <method name="MakeArrayType" signature="MakeArrayType()" match="name"><return type="System.Type"/></method>
    <method name="MakeByRefType" signature="MakeByRefType()" alias="MakePointerType"><return type="System.Type"/></method>
    <method name="MakeGenericType" signature="MakeGenericType(System.Type[])" match="name"><return type="System.Type"/></method>
    <method name="ReflectionOnlyGetType" signature="ReflectionOnlyGetType(string,bool,bool)" instance="false">
      <return type="System.Type"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
  </class>

  <class name="System.Reflection.TypeInfo" kind="abstract_class" supertypes="System.Type">
    <field name="DeclaredConstructors" type="System.Collections.Generic.IEnumerable" elementType="System.Reflection.ConstructorInfo"/>
    <field name="DeclaredEvents" type="System.Collections.Generic.IEnumerable" elementType="System.Reflection.EventInfo"/>
    <field name="DeclaredFields" type="System.Collections.Generic.IEnumerable" elementType="System.Reflection.FieldInfo"/>
    <field name="DeclaredMembers" type="System.Collections.Generic.IEnumerable" elementType="System.Reflection.MemberInfo"/>
    <field name="DeclaredMethods" type="System.Collections.Generic.IEnumerable" elementType="System.Reflection.MethodInfo"/>
    <field name="DeclaredNestedTypes" type="System.Collections.Generic.IEnumerable" elementType="System.Reflection.TypeInfo"/>
    <field name="DeclaredProperties" type="System.Collections.Generic.IEnumerable" elementType="System.Reflection.PropertyInfo"/>
    <field name="GenericTypeParameters" type="System.Type[]"/>
    <field name="ImplementedInterfaces" type="System.Collections.Generic.IEnumerable" elementType="System.Type"/>
    <method name="AsType" signature="AsType()"><return type="System.Type"/></method>
    <method name="GetDeclaredEvent" signature="GetDeclaredEvent(string)">
      <return type="System.Reflection.EventInfo"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetDeclaredField" signature="GetDeclaredField(string)">
      <return type="System.Reflection.FieldInfo"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetDeclaredMethod" signature="GetDeclaredMethod(string)">
      <return type="System.Reflection.MethodInfo"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetDeclaredMethods" signature="GetDeclaredMethods(string)">
      <return type="System.Collections.Generic.IEnumerable" elementType="System.Reflection.MethodInfo"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetDeclaredNestedType" signature="GetDeclaredNestedType(string)">
      <return type="System.Reflection.TypeInfo"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetDeclaredProperty" signature="GetDeclaredProperty(string)">
      <return type="System.Reflection.PropertyInfo"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="IsAssignableFrom" signature="IsAssignableFrom(System.Reflection.TypeInfo)"><return type="bool"/>
      <neutralization argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
  </class>

  <class name="System.Reflection.Emit.EnumBuilder" supertypes="System.Reflection.TypeInfo"/>
  <class name="System.Reflection.Emit.GenericTypeParameterBuilder" supertypes="System.Reflection.TypeInfo"/>
  <class name="System.Reflection.TypeDelegator" supertypes="System.Reflection.TypeInfo"/>

  <class name="System.Reflection.Emit.TypeBuilder" supertypes="System.Reflection.TypeInfo">
    <method name="CreateType" signature="CreateType()"><return type="System.Type"/></method>
    <method name="CreateTypeInfo" signature="CreateTypeInfo()"><return type="System.Reflection.TypeInfo"/></method>
    <method name="DefineEvent" signature="DefineEvent(string,System.Reflection.EventAttributes,System.Type)">
      <return type="System.Reflection.Emit.EventBuilder"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="DefineField" signature="DefineField(string,System.Type,System.Reflection.FieldAttributes)">
      <return type="System.Reflection.Emit.FieldBuilder"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="DefineField" signature="DefineField(string,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
      <return type="System.Reflection.Emit.FieldBuilder"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="DefineInitializedData" signature="DefineInitializedData(string,byte[],System.Reflection.FieldAttributes)" alias="DefineUninitializedData">
      <return type="System.Reflection.Emit.FieldBuilder"/>
      <sink argpos="0,1" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="DefineMethod" signature="DefineMethod(string,System.Reflection.MethodAttributes)" match="name">
      <return type="System.Reflection.Emit.MethodBuilder"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="DefineNestedType" signature="DefineNestedType(string)" match="name">
      <return type="System.Reflection.Emit.TypeBuilder"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="DefinePInvokeMethod" signature="DefinePInvokeMethod(string,string,string,System.Reflection.MethodAttributes)" match="name">
      <return type="System.Reflection.Emit.MethodBuilder"/>
      <sink argpos="0,1,2" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="DefineProperty" signature="DefineProperty(string,System.Reflection.PropertyAttributes,System.Type,System.Type[])" match="name">
      <return type="System.Reflection.Emit.PropertyBuilder"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="DefineTypeInitializer" signature="DefineTypeInitializer()"><return type="System.Reflection.Emit.ConstructorBuilder"/></method>
  </class>

  <class name="System.Reflection.Assembly" supertypes="System.Reflection.ICustomAttributeProvider">
    <field name="CodeBase" type="string"/>
    <field name="CustomAttributes" type="System.Collections.IEnumerable" elementType="System.Reflection.CustomAttributeData"/>
    <field name="DefinedTypes" type="System.Collections.Generic.IEnumerable" elementType="System.Reflection.TypeInfo"/>
    <field name="EntryPoint" type="System.Reflection.MethodInfo"/>
    <field name="EscapedCodeBase" type="string"/>
    <field name="ExportedTypes" type="System.Collections.Generic.IEnumerable" elementType="System.Type"/>
    <field name="FullName" type="string"/>
    <field name="ImageRuntimeVersion" type="string"/>
    <field name="IsDynamic" type="bool"/>
    <field name="IsFullyTrusted" type="bool"/>
    <field name="Location" type="string"/>
    <field name="ManifestModule" type="System.Reflection.Module"/>
    <field name="Modules" type="System.Collections.IEnumerable" elementType="System.Reflection.TypeInfo"/>
    <field name="SecurityRuleSet" type="System.Security.SecurityRuleSet"/>

    <method name="CreateInstance" signature="CreateInstance(string)" match="name">
      <return type="object"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="CreateQualifiedName" signature="CreateQualifiedName(string,string)" instance="false">
      <return type="string"/>
      <propagate from="0,1" to="-1"/>
    </method>
    <method name="GetAssembly" signature="GetAssembly(System.Type)" instance="false"><return type="System.Reflection.Assembly"/></method>
    <method name="GetCallingAssembly" signature="GetCallingAssembly()" instance="false"><return type="System.Reflection.Assembly"/></method>
    <method name="GetCustomAttributesData" signature="GetCustomAttributesData()">
      <return type="System.Collections.Generic.IList" elementType="System.Reflection.CustomAttributeData"/>
    </method>
    <method name="GetEntryAssembly" signature="GetEntryAssembly()" instance="false"><return type="System.Reflection.Assembly"/></method>
    <method name="GetExecutionAssembly" signature="GetExecutionAssembly()" instance="false"><return type="System.Reflection.Assembly"/></method>
    <method name="GetExportedTypes" signature="GetExportedTypes()">
      <return type="System.Type[]"/>
    </method>
    <method name="GetFile" signature="GetFile(string)"><return type="System.IO.FileStream"/></method>
    <method name="GetFiles" signature="GetFiles()" match="name"><return type="System.IO.FileStream[]"/></method>
    <method name="GetLoadedModules" signature="GetLoadedModules()" match="name">
      <return type="System.Reflection.Module[]"/>
    </method>
    <method name="GetManifestResourceNames" signature="GetManifestResourceNames()"><return type="string[]"/></method>
    <method name="GetManifestResourceStream" signature="GetManifestResourceStream(string)"><return type="System.IO.Stream"/></method>
    <method name="GetManifestResourceStream" signature="GetManifestResourceStream(System.Type,string)"><return type="System.IO.Stream"/></method>
    <method name="GetModule" signature="GetModule(string)"><return type="System.Reflection.Module"/></method>
    <method name="GetModules" signature="GetModules()" match="name"><return type="System.Reflection.Module[]"/></method>
    <method name="GetName" signature="GetName()" match="name"><return type="System.Reflection.AssemblyName"/></method>
    <method name="GetReferencedAssemblies" signature="GetReferencedAssemblies()" match="name">
      <return type="System.Reflection.AssemblyName[]"/>
    </method>
    <method name="GetSatelliteAssembly" signature="GetSatelliteAssembly(System.Globalization.CultureInfo)" match="name"><return type="System.Reflection.Assembly"/></method>
    <method name="GetType" signature="GetType(string)" match="name">
      <return type="System.Type"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetTypes" signature="GetTypes()">
      <return type="System.Type[]"/>
    </method>

    <method name="Load" signature="Load(string)" instance="false" match="name">
      <sink argpos="0" kind="process_control" resource="os"/>
    </method>
    <method name="LoadFile" signature="LoadFile(string)" instance="false" match="name">
      <sink argpos="0" kind="process_control" resource="os"/>
    </method>
    <method name="LoadFrom" signature="LoadFrom(string)" instance="false" match="name">
      <sink argpos="0" kind="process_control" resource="os"/>
    </method>
    <method name="LoadWithPartialName" signature="LoadWithPartialName(string)" instance="false" match="name">
      <sink argpos="0" kind="process_control" resource="os"/>
    </method>
    <method name="ReflectionOnlyLoad" signature="ReflectionOnlyLoad(string)" instance="false" alias="ReflectionOnlyLoadFrom">
      <sink argpos="0" kind="process_control" resource="os"/>
    </method>
    <method name="UnsafeLoadFrom" signature="UnsafeLoadFrom(string)" instance="false">
      <sink argpos="0" kind="process_control" resource="os"/>
    </method>
  </class>

  <class name="System.Reflection.Module" kind="abstract_class" supertypes="System.Reflection.ICustomAttributeProvider">
    <field name="Assembly" type="System.Reflection.Assembly"/>
    <field name="CustomAttributes" type="System.Collections.IEnumerable" elementType="System.Reflection.CustomAttributeData"/>
    <field name="ModuleHandle" type="System.ModuleHandle"/>
    <method name="FindTypes" signature="FindTypes(System.Reflection.TypeFilter,object)">
      <return type="System.Type[]"/>
      <sink argpos="1" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetCustomAttributesData" signature="GetCustomAttributesData()">
      <return type="System.Collections.Generic.IList" elementType="System.Reflection.CustomAttributeData"/>
    </method>
    <method name="GetField" signature="GetField(string)" match="name">
      <return type="System.Reflection.FieldInfo"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetFields" signature="GetFields()" match="name">
      <return type="System.Reflection.FieldInfo[]"/>
    </method>
    <method name="GetMethod" signature="GetMethod(string)" match="name">
      <return type="System.Reflection.MethodInfo"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetMethods" signature="GetMethods()" match="name">
      <return type="System.Reflection.MethodInfo[]"/>
    </method>
    <method name="GetSignerCertificate" signature="GetSignerCertificate()"><return type="System.Security.Cryptography.X509Certificates.X509Certificate"/></method>
    <method name="GetType" signature="GetType()" match="name">
      <return type="System.Type"/>
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="GetTypes" signature="GetTypes()"><return type="System.Type[]"/></method>
    <method name="IsResource" signature="IsResource()"><return type="bool"/></method>
    <method name="ResolveField" signature="ResolveField(int)" match="name">
      <return type="System.Reflection.FieldInfo"/>
    </method>
    <method name="ResolveMember" signature="ResolveMember(int)" match="name">
      <return type="System.Reflection.MemberInfo"/>
    </method>
    <method name="ResolveMethod" signature="ResolveMethod(int)" match="name">
      <return type="System.Reflection.MethodBase"/>
    </method>
    <method name="ResolveType" signature="ResolveType(int)" match="name">
      <return type="System.Type"/>
    </method>
  </class>

  <class name="System.Reflection.MemberInfo" kind="abstract_class" supertypes="System.Reflection.ICustomAttributeProvider">
    <field name="CustomAttributes" type="System.Collections.IEnumerable" elementType="System.Reflection.CustomAttributeData"/>
    <field name="DeclaringType" type="System.Type"/>
    <field name="MemberType" type="System.Reflection.MemberTypes"/>
    <field name="Module" type="System.Reflection.Module"/>
    <field name="Name" type="string"/>
    <field name="ReflectedType" type="System.Type"/>

    <method name="GetCustomAttributesData" signature="GetCustomAttributesData()">
      <return type="System.Collections.Generic.IList" elementType="System.Reflection.CustomAttributeData"/>
    </method>
  </class>

  <class name="System.Reflection.EventInfo" kind="abstract_class" supertypes="System.Reflection.MemberInfo">
    <field name="AddMethod" type="System.Reflection.MethodInfo"/>
    <field name="Attributes" type="System.Reflection.EventAttributes"/>
    <field name="EventHandlerType" type="System.Type"/>
    <field name="IsMulticast" type="bool"/>
    <field name="IsSpecialName" type="bool"/>
    <field name="RaiseMethod" type="System.Reflection.MethodInfo"/>
    <field name="RemoveMethod" type="System.Reflection.MethodInfo"/>
    <method name="AddEventHandler" signature="AddEventHandler(object,System.Delegate)" alias="RemoveEventHandler"/>
    <method name="GetAddMethod" signature="GetAddMethod()" match="name" alias="GetRaiseMethod,GetRemoveMethod">
      <return type="System.Reflection.MethodInfo"/>
    </method>
    <method name="GetOtherMethods" signature="GetOtherMethods()" match="name">
      <return type="System.Reflection.MethodInfo[]"/>
    </method>
  </class>

  <class name="System.Runtime.InteropServices.ComAwareEventInfo" supertypes="System.Reflection.EventInfo"/>

  <class name="System.Reflection.FieldInfo" kind="abstract_class" supertypes="System.Reflection.MemberInfo">
    <field name="Attributes" type="System.Reflection.FieldAttributes"/>
    <field name="FieldHandle" type="System.RuntimeFieldHandle"/>
    <field name="FieldType" type="System.Type"/>
    <!-- Many IsXXX properties -->
    <field name="IsSecurityCritical" type="bool"/>
    <field name="IsSecuritySafeCritical" type="bool"/>
    <field name="IsSecurityTransparent" type="bool"/>

    <method name="GetFieldFromHandle" signature="GetFieldFromHandle(System.RuntimeFieldHandle)" match="name" instance="false">
      <return type="System.Reflection.FieldInfo"/>
    </method>
    <method name="GetRequiredCustomModifiers" signature="GetRequiredCustomModifiers()" alias="GetOptionalCustomModifiers">
      <return type="System.Type[]"/>
    </method>
    <method name="GetRawConstantValue" signature="GetRawConstantValue()"><return type="object"/></method>
    <method name="GetValue" signature="GetValue(object)">
      <return type="object"/>
      <propagate from="0" to="-1"/>
    </method>
    <method name="SetValue" signature="SetValue(object,object)" match="name">
      <propagate from="1" to="0"/>
    </method>
  </class>

  <class name="Microsoft.JScript.COMFieldInfo" supertypes="System.Reflection.FieldInfo"/>
  <class name="Microsoft.JScript.JSField" supertypes="System.Reflection.FieldInfo"/>
  <class name="Microsoft.JScript.JSFieldInfo" supertypes="System.Reflection.FieldInfo"/>
  <class name="System.Reflection.Emit.FieldBuilder" supertypes="System.Reflection.FieldInfo"/>

  <class name="System.Reflection.MethodBase" kind="abstract_class" supertypes="System.Reflection.MemberInfo">
    <field name="Attributes" type="System.Reflection.MethodAttributes"/>
    <field name="CallingConvention" type="System.Reflection.CallingConventions"/>
    <!-- Many Isxxx properties, ignored to reduce metadata size
    <field name="IsAbstract" type="bool"/>
    <field name="IsAssembly" type="bool"/>
    <field name="IsConstructor" type="bool"/>
    <field name="IsFamily" type="bool"/>
    <field name="IsFamilyAndAssembly" type="bool"/>
    <field name="IsFinal" type="bool"/>
    -->
    <field name="IsSecurityCritical" type="bool"/>
    <field name="IsSecuritySafeCritical" type="bool"/>
    <field name="IsSecurityTransparent" type="bool"/>
    <field name="MethodHandle" type="System.RuntimeMethodHandle"/>
    <field name="MethodImplementationFlags" type="System.Reflection.MethodImplAttributes"/>

    <method name="GetCurrentMethod" signature="GetCurrentMethod()" instance="false">
      <return type="System.Reflection.MethodBase"/>
    </method>
    <method name="GetMethodByHandle" signature="GetMethodByHandle(System.RuntimeMethodHandle)" instance="false" match="name">
      <return type="System.Reflection.MethodBase"/>
    </method>
    <method name="GetMethodBody" signature="GetMethodBody()">
      <return type="System.Reflection.MethodBody"/>
    </method>
    <method name="GetParameters" signature="GetParameters()">
      <return type="System.Reflection.ParameterInfo[]"/>
    </method>
    <method name="Invoke" signature="Invoke(object,BindingFlags,Binder,object[],CultureInfo)">
      <return type="object"/>
      <propagate from="0,3" to="-1"/>
      <!-- not an "unsafe reflection" sink per-se
      <sink argpos="3" kind="unsafe_reflection" resource="other"/>
      -->
    </method>
    <method name="Invoke" signature="Invoke(object,object[])">
      <return type="object"/>
      <propagate from="0,1" to="-1"/>
      <!-- not an "unsafe reflection" sink per-se
      <sink argpos="1" kind="unsafe_reflection" resource="other"/>
      -->
    </method>
  </class>

  <class name="System.Reflection.ConstructorInfo" kind="abstract_class" supertypes="System.Reflection.MethodBase">
    <method name="Invoke" signature="Invoke(BindingFlags,Binder,object[],CultureInfo)">
      <return type="object"/>
      <propagate from="2" to="-1"/>
      <!-- not an "unsafe reflection" sink per-se
      <sink argpos="2" kind="unsafe_reflection" resource="other"/>
      -->
    </method>
    <method name="Invoke" signature="Invoke(object[])">
      <return type="object"/>
      <propagate from="0" to="-1"/>
      <!-- not an "unsafe reflection" sink per-se
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
      -->
    </method>
  </class>
  
  <class name="Microsoft.JScript.JSConstructor" supertypes="System.Reflection.ConstructorInfo"/>
  <class name="System.Reflection.Emit.ConstructorBuilder" supertypes="System.Reflection.ConstructorInfo"/>

  <class name="System.Reflection.MethodInfo" kind="abstract_class" supertypes="System.Reflection.MethodBase">
    <field name="ReturnParameter" type="System.Reflection.ParameterInfo"/>
    <field name="ReturnType" type="System.Type"/>
    <method name="CreateDelegate" signature="CreateDelegate(System.Type,object)" match="name">
      <return type="System.Delegate"/>
    </method>
    <method name="GetBaseDefinition" signature="GetBaseDefinition()" alias="GetGenericMethodDefinition">
      <return type="System.Reflection.MethodInfo"/>
    </method>
    <method name="MakeGenericMethod" signature="MakeGenericMethod(System.Type[])">
      <return type="System.Reflection.MethodInfo"/>
    </method>
  </class>

  <class name="Microsoft.JScript.JSMethod" supertypes="System.Reflection.MethodInfo"/>
  <class name="Microsoft.JScript.JSMethodInfo" supertypes="System.Reflection.MethodInfo"/>

  <class name="System.Reflection.Emit.DynamicMethod" supertypes="System.Reflection.MethodInfo">
    <constructor name="DynamicMethod" signature="DynamicMethod(string,System.Type,System.Type[])" match="name">
      <sink argpos="0" kind="unsafe_reflection" resource="other"/>
    </constructor>
  </class>

  <class name="System.Reflection.Emit.MethodBuilder" supertypes="System.Reflection.MethodInfo"/>

  <class name="System.Reflection.PropertyInfo" kind="abstract_class" supertypes="System.Reflection.MemberInfo">
    <field name="Attributes" type="System.Reflection.PropertyAttributes"/>
    <field name="GetMethod" type="System.Reflection.MethodInfo"/>
    <field name="SetMethod" type="System.Reflection.MethodInfo"/>
    <field name="PropertyType" type="System.Type"/>
    <method name="GetAccessors" signature="GetAccessors()" match="name">
      <return type="System.Reflection.MethodInfo[]"/>
    </method>
    <method name="GetConstantValue" signature="GetConstantValue()" alias="GetRawConstantValue"><return type="object"/></method>
    <method name="GetGetMethod" signature="GetGetMethod()" match="name"><return type="System.Reflection.MethodInfo"/></method>
    <method name="GetSetMethod" signature="GetSetMethod()" match="name"><return type="System.Reflection.MethodInfo"/></method>
    <method name="GetIndexParameters" signature="GetIndexParameters()"><return type="System.Reflection.ParameterInfo[]"/></method>
    <method name="GetRequiredCustomModifiers" signature="GetRequiredCustomModifiers()" alias="GetOptionalCustomModifiers">
      <return type="System.Type[]"/>
    </method>
    <method name="GetValue" signature="GetValue(object)">
      <return type="object"/>
      <propagate from="0" to="-1"/>
    </method>
    <method name="SetValue" signature="SetValue(object,object)">
      <propagate from="1" to="0"/>
    </method>
    <method name="SetValue" signature="SetValue(object,object,BindingFlags,Binder,object[],CultureInfo)">
      <propagate from="1,4" to="0"/>
    </method>
    <method name="SetValue" signature="SetValue(object,object,object[])">
      <propagate from="1,2" to="0"/>
    </method>
  </class>
  
  <class name="Microsoft.JScript.COMPropertyInfo" supertypes="System.Reflection.PropertyInfo"/>
  <class name="System.Reflection.Emit.PropertyBuilder" supertypes="System.Reflection.PropertyInfo"/>

  <class name="System.Reflection.ICustomAttributeProvider" kind="interface">
    <method name="GetCustomAttributes" signature="GetCustomAttributes(bool)"><return type="object[]"/></method>
    <method name="GetCustomAttributes" signature="GetCustomAttributes(System.Type,bool)"><return type="object[]"/></method>
    <method name="IsDefined" signature="IsDefined(System.Type,bool)"><return type="bool"/></method>
  </class>
  
  <class name="System.Reflection.CustomAttributeData">
    <field name="AttributeType" type="System.Type"/>
    <field name="Constructor" type="System.Reflection.ConstructorInfo"/>
    <field name="ConstructorArguments" type="System.Collections.Generic.IList" elementType="System.Reflection.CustomAttributeTypedArgument"/>
    <field name="NamedArguments" type="System.Collections.Generic.IList" elementType="System.Reflection.CustomAttributeNamedArgument"/>
    <method name="GetCustomAttributes" signature="GetCustomAttributes(System.Reflection.Assembly)" match="name">
      <return type="System.Collections.Generic.IList" elementType="System.Reflection.CustomAttributeData"/>
    </method>
  </class>

  <class name="System.Reflection.MemberTypes" kind="enum"/>
  <class name="System.Security.SecurityRuleSet" kind="enum"/>

  <class name="System.RuntimeMethodHandle" kind="struct">
    <field name="Value" type="System.IntPtr"/>
    <method name="GetFunctionPointer" signature="GetFunctionPointer()"><return type="System.IntPtr"/></method>
  </class>

  <class name="System.Delegate">
    <constructor name="Delegate" signature="Delegate(System.Type,string)">
      <sink argpos="1" kind="unsafe_reflection" resource="other"/>
    </constructor>
    <constructor name="Delegate" signature="Delegate(object,string)">
      <sink argpos="1" kind="unsafe_reflection" resource="other"/>
    </constructor>
    <field name="Method" type="System.Reflection.MethodInfo"/>
    <field name="Target" type="object"/>
    <method name="Combine" signature="Combine(System.Delegate,System.Delegate)" instance="false">
      <return type="System.Delegate"/>
    </method>
    <method name="Combine" signature="Combine(System.Delegate[])" instance="false">
      <return type="System.Delegate"/>
    </method>
    <method name="CreateDelegate" signature="CreateDelegate(System.Type,object,string)" match="name">
      <sink argpos="1" kind="unsafe_reflection" resource="other"/>
    </method>
    <method name="DynamicInvoke" signature="DynamicInvoke(object[])">
      <return type="object"/>
    </method>
    <method name="GetInvocationList" signature="GetInvocationList()">
      <return type="System.Delegate[]"/>
    </method>
    <method name="Remove" signature="Remove(System.Delegate,System.Delegate)" instance="false" alias="RemoveAll">
      <return type="System.Delegate"/>
    </method>
  </class>

</library>