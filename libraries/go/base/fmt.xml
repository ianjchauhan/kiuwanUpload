<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.optimyth.com/schema/definitions/library_metadata"
         technology="go" name="fmt">

  <module name="fmt" >
    <description url="https://pkg.go.dev/fmt">Implements formatted I/O with functions analogous to C's printf and scanf</description>

    <function name="fmt.Errorf" signature="fmt.Errorf(go.string, go.interface)" >
      <tags>write</tags>
      <return type="go.error" />
      <sink argpos="0" kind="format_injection" resource="formatstr" />
      <sink argpos="1,2,3" kind="log_forging" resource="other" />
    </function>
    <function name="fmt.Fprint" signature="fmt.Fprint(io.Writer, go.interface)" >
      <tags>write</tags>
      <return type="go.int, go.error" />
      <sink argpos="1,2,3" kind="log_forging" resource="other" />
    </function>
    <function name="fmt.Fprintf" signature="fmt.Fprintf(io.Writer, go.string, go.interface)" >
      <tags>write</tags>
      <return type="go.int, go.error" />
      <sink argpos="1" kind="format_injection" resource="formatstr" />
      <sink argpos="2,3,4" kind="log_forging" resource="other" />
    </function>
    <function name="fmt.Fscan" signature="fmt.Fscan(io.Reader, go.interface)" >
      <return type="go.int, go.error" />
      <source argpos="1" kind="user_input" resource="gui" />
    </function>
    <function name="fmt.Fscan" signature="fmt.Fscan(io.Reader, go.string, go.interface)" >
      <return type="go.int, go.error" />
      <source argpos="2" kind="user_input" resource="gui" />
    </function>
    <function name="fmt.Fscanln" signature="fmt.Fscanln(io.Reader, go.interface)" >
      <return type="go.int, go.error" />
      <source argpos="1" kind="user_input" resource="gui" />
    </function>
    <function name="fmt.Print" signature="fmt.Print(go.interface)" alias="fmt.Sprint" >
      <tags>write</tags>
      <return type="go.int, go.error" />
      <sink argpos="0,1,2" kind="log_forging" resource="other" />
    </function>
    <function name="fmt.Printf" signature="fmt.Printf(go.string, go.interface)" >
      <tags>write</tags>
      <return type="go.int, go.error" />
      <sink argpos="0" kind="format_injection" resource="formatstr" />
      <sink argpos="1,2,3" kind="log_forging" resource="other" />
    </function>
    <function name="fmt.Println" signature="fmt.Println(go.interface)" >
      <tags>write</tags>
      <return type="go.int, go.error" />
      <sink argpos="0,1,2,3" kind="log_forging" resource="other" />
    </function>
    <function name="fmt.Scan" signature="fmt.Scan(go.interface)" >
      <return type="go.int, go.error" />
      <source argpos="0" kind="user_input" resource="gui" />
    </function>
    <function name="fmt.Scanf" signature="fmt.Scanf(go.string, go.interface)" >
      <return type="go.int, go.error" />
      <source argpos="1" kind="user_input" resource="gui" />
    </function>
    <function name="fmt.Scanln" signature="fmt.Scanln(go.interface)" >
      <return type="go.int, go.error" />
      <source argpos="0" kind="user_input" resource="gui" />
    </function>
    <function name="fmt.Sprintf" signature="fmt.Sprintf(go.string, go.interface)" >
      <tags>write</tags>
      <return type="go.string, go.error" />
      <sink argpos="0" kind="format_injection" resource="formatstr" />
      <sink argpos="1,2,3" kind="log_forging" resource="other" />
    </function>
    <function name="fmt.Sprintln" signature="fmt.Sprintln(go.interface)" >
      <tags>write</tags>
      <return type="go.string, go.error" />
      <sink argpos="0,1,2,3" kind="log_forging" resource="other" />
    </function>
    <function name="fmt.Sscan" signature="fmt.Sscan(go.sitrng, go.interface)" >
      <return type="go.int, go.error" />
      <source argpos="1" kind="user_input" resource="gui" />
    </function>
    <function name="fmt.Sscanf" signature="fmt.Sscanf(go.string, go.string, go.interface)" >
      <return type="go.int, go.error" />
      <source argpos="2" kind="user_input" resource="gui" />
    </function>
    <function name="fmt.Sscanln" signature="fmt.Sscanln(go.string, go.interface)" >
      <return type="go.int, go.error" />
      <source argpos="1" kind="user_input" resource="gui" />
    </function>
    <function name="fmt.len" signature="fmt.len(go.interface)" >
      <tags>potential_infinite_loop_neutralizer</tags>
      <return type="go.int" />
    </function>
  </module>
</library>