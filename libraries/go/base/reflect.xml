<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.optimyth.com/schema/definitions/library_metadata"
         technology="go" name="reflect">

  <module name="reflect" >
    <description url="https://pkg.go.dev/reflect">Run-time reflection</description>

    <function name="reflect.TypeOf" signature="reflect.TypeOf(go.int,reflect.Type)" >
      <return type="reflect.Type" />
    </function>
    <function name="reflect.ChanOf" signature="reflect.ChanOf(reflect.ChanDir,reflect.Type)" >
      <return type="reflect.Type" />
    </function>
    <function name="reflect.FuncOf" signature="reflect.FuncOf(reflect.ChanDir,go.slice,bo.bool)" >
      <return type="reflect.Type" />
    </function>
    <function name="reflect.MapOf" signature="reflect.MapOf(reflect.Type,reflect.Type)" >
      <return type="reflect.Type" />
    </function>
    <function name="reflect.PtrTo" signature="reflect.PtrTo(reflect.Type)" >
      <return type="reflect.Type" />
    </function>
    <function name="reflect.SliceOf" signature="reflect.SliceOf(reflect.Type)" >
      <return type="reflect.Type" />
    </function>
    <function name="reflect.StructOf" signature="reflect.StructOf(reflect.Type)" >
      <return type="reflect.Type" />
    </function>
    <function name="reflect.TypeOf" signature="reflect.TypeOf(go.interface)" >
      <return type="reflect.Type" />
      <sink argpos="0" kind="unsafe_reflection" resource="other" />
    </function>
    <function name="reflect.Append" signature="reflect.Append(reflect.Value,reflect.Value)" >
      <return type="reflect.Value" />
    </function>
    <function name="reflect.AppendSlice" signature="reflect.AppendSlice(reflect.Value,reflect.Value)" >
      <return type="reflect.Value" />
    </function>
    <function name="reflect.Indirect" signature="reflect.Indirect(reflect.Value)" >
      <return type="reflect.Value" />
    </function>
    <function name="reflect.MakeChan" signature="reflect.MakeChan(reflect.Value,go.int)" >
      <return type="reflect.Value" />
    </function>
    <function name="reflect.MakeFunc" signature="reflect.MakeFunc(reflect.Type,go.func)" >
      <return type="reflect.Value" />
    </function>
    <function name="reflect.MakeMap" signature="reflect.MakeMap(reflect.Type)" >
      <return type="reflect.Value" />
    </function>
    <function name="reflect.MakeMapWithSize" signature="reflect.MakeMapWithSize(reflect.Type,go.int)" >
      <return type="reflect.Value" />
    </function>
    <function name="reflect.MakeSlice" signature="reflect.MakeSlice(reflect.Type,go.int,go.int)" >
      <return type="reflect.Value" />
    </function>
    <function name="reflect.New" signature="reflect.New(reflect.Type)" >
      <return type="reflect.Value" />
    </function>
    <function name="reflect.NewAt" signature="reflect.NewAt(reflect.Type,unsafe.Pointer)" >
      <return type="reflect.Value" />
    </function>
    <function name="reflect.Select" signature="Select.NewAt(go.slice)" >
      <return type="go.int,reflect.Value,go.bool" />
    </function>
    <function name="reflect.ValueOf" signature="reflect.ValueOf(go.interface)" >
      <return type="reflect.Value" />
    </function>
    <function name="reflect.Zero" signature="reflect.Zero(reflect.Type)" >
      <return type="reflect.Value" />
    </function>

    <class name="reflect.Value" kind="struct">
      <method name="Addr" signature="Addr()" >
        <return type="reflect.Value" />
      </method>
      <method name="Bool" signature="Bool()" >
        <return type="go.bool" />
      </method>
      <method name="Bytes" signature="Bytes()" >
        <return type="go.slice" />
      </method>
      <method name="Call" signature="Call(go.slice)" >
        <return type="go.slice" elementType="reflect.Value" />
        <sink argpos="0" kind="unsafe_reflection" resource="other" />
      </method>
      <method name="CallSlice" signature="CallSlice(go.slice)" >
        <return type="go.slice" elementType="reflect.Value" />
        <sink argpos="0" kind="unsafe_reflection" resource="other" />
      </method>
      <method name="Convert" signature="Convert(reflect.Type)" >
        <return type="reflect.Value" />
      </method>
      <method name="Elem" signature="Elem()" >
        <return type="reflect.Value" />
      </method>
      <method name="Field" signature="Field(go.int)" >
        <return type="reflect.Value" />
        <sink argpos="0" kind="unsafe_reflection" resource="other" />
      </method>
      <method name="FieldByIndex" signature="FieldByIndex(go.slice)" >
        <return type="reflect.Value" />
        <sink argpos="0" kind="unsafe_reflection" resource="other" />
      </method>
      <method name="FieldByName" signature="FieldByName(go.string)" >
        <return type="reflect.Value" />
        <sink argpos="0" kind="unsafe_reflection" resource="other" />
      </method>
      <method name="FieldByNameFunc" signature="FieldByNameFunc(go.func)" >
        <return type="reflect.Value" />
        <sink argpos="0" kind="unsafe_reflection" resource="other" />
      </method>
      <method name="Index" signature="Index(go.int)" >
        <return type="reflect.Value" />
        <sink argpos="0" kind="unsafe_reflection" resource="other" />
      </method>
      <method name="MapIndex" signature="MapIndex(go.string)" >
        <return type="reflect.Value" />
        <sink argpos="0" kind="unsafe_reflection" resource="other" />
      </method>
      <method name="Method" signature="Method(go.int)" >
        <return type="reflect.Value" />
        <sink argpos="0" kind="unsafe_reflection" resource="other" />
      </method>
      <method name="MethodByName" signature="MethodByName(go.string)" >
        <return type="reflect.Value" />
        <sink argpos="0" kind="unsafe_reflection" resource="other" />
      </method>
      <method name="Recv" signature="Recv(reflect.Value,go.bool)" >
        <return type="reflect.Value,go.bool" />
        <sink argpos="0" kind="unsafe_reflection" resource="other" />
      </method>
      <method name="Send" signature="Send(reflect.Value)" >
        <return type="reflect.Value,go.bool" />
      </method>
    </class>
  </module>
</library>