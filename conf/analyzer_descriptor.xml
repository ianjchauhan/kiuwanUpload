<?xml version="1.0" encoding="UTF-8"?>

<properties>
  <group technology="GLOBAL">
    <property id="encoding" text="Encoding" type="string"/>
    <property id="dump.code" text="Upload source code fragments of defects found" type="boolean"/>
    <property id="upload.analyzed.code" text="Upload analyzed source code files" type="boolean"/>
    <property id="timeout" text="Analysis timeout (minutes)" type="integer" />
    <property id="memory.start" text="Initial memory size" type="string"/>
    <property id="memory.max" text="Max memory size" type="string"/>
    <property id="stack.size" text="Stack memory size" type="string"/>
    <property id="listener.jmx.active" text="Activate analysis monitoring (for tech support)?" type="boolean"/>
  </group>

  <group technology="abap">
    <property id="abap.parse.includes" text="Parse included files" type="boolean"/>
    <property id="abap.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="abap.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="abap.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>
  </group>

  <group technology="actionscript">
    <property id="actionscript.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="actionscript.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="actionscript.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>
  </group>

  <group technology="aspnet">
    <property id="aspnet.parse.includes" text="Parse included files" type="boolean"/>
    <property id="aspnet.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="aspnet.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="aspnet.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>
  </group>

  <group technology="c">
    <property id="c.header.includes" text="Header directories" type="string"/>
    <property id="c.header.extensions" text="Header extensions" type="string"/>
    <property id="c.use.all.known.macros" text="Use all known macros" type="boolean"/>
    <property id="c.process.conditional.directives" text="Process conditional directives" type="boolean"/>
    <property id="c.resource.external.defines" text="Define macros" type="string" style="properties">
      <dialog>
        <title>Edit macros (#define) to use when parsing C files</title>
        <description><![CDATA[Add macro name (either normal or function-like) and their definitions.
        They are substituted in C sources (such macros are typically passed to build tools).]]></description>
        <headers>Macro,Definition</headers>
      </dialog>
    </property>
    <property id="c.parse.build.logfile" text="Analyze build logfile" type="string" style="dialog">
      <macroref ref="build.analysis.dialog"/>
    </property>
    <property id="c.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="c.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="c.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>
  </group>

  <group technology="cpp">
    <property id="cpp.header.includes" text="Header directories" type="string"/>
    <property id="cpp.header.extensions" text="Header extensions" type="string"/>
    <property id="cpp.use.all.known.macros" text="Use all known macros" type="boolean"/>
    <property id="cpp.process.conditional.directives" text="Process conditional directives" type="boolean"/>
    <property id="cpp.resource.external.defines" text="Define macros" type="string" style="properties">
      <dialog>
        <title>Edit macros (#define) to use when parsing C++ files</title>
        <description><![CDATA[Add macro name (either normal or function-like) and their definitions.
        They are substituted in C++ sources (such macros are typically passed to build tools).]]></description>
        <headers>Macro,Definition</headers>
      </dialog>
    </property>
    <property id="cpp.parse.build.logfile" text="Analyze build logfile" type="string" style="dialog">
      <macroref ref="build.analysis.dialog"/>
    </property>
    <property id="cpp.dotnet" text="Support Microsoft extensions for C++ (CLI and CX)" type="boolean"/>
    <property id="cpp.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="cpp.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="cpp.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="csharp">
    <property id="csharp.macroFile" text="Predefined macros resource" type="string" style="properties">
      <dialog>
        <title>Edit macros (#define) to use when parsing C# files</title>
        <description><![CDATA[Add macro name (either normal or function-like) and their definitions.
        They are substituted in C# sources (such macros are typically passed to build tools).]]></description>
        <headers>Macro,Definition</headers>
      </dialog>
    </property>
    <property id="csharp.processConditionalDirectives" text="Process conditional directives" type="boolean"/>
    <property id="csharp.processCshtml" text="Process .cshtml files as C# code" type='boolean' />
    <property id="csharp.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="csharp.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="csharp.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>
  
  <group technology="cobol">
    <property id="cobol.transform.freeform" text="Free format Cobol" type="boolean"/>
    <property id="cobol.transform.marginType" text="Margins format" type="string" style="combo">
      <options>
        <option key="autodetect">Autodetect</option>
        <option key="both_margin">ANSI, both margins (columns 1-6 and 73+)</option>
        <option key="left_margin">Left margin (columns 1-6)</option>
        <option key="right_margin">Right margin (columns 73+)</option>
        <option key="no_margin">No margins</option>
        <option key="tandem">HP/Tandem (right margin only, column 133+)</option>
        <option key="tandem_ansi">HP/Tandem ANSI (directives at column 1)</option>
        <option key="terminal">ACUCOBOL terminal format (no margins)</option>
      </options>
    </property>
    <property id="cobol.transform.firstcolumncomment" text="First column comments allowed" type="boolean"/>
    <property id="cobol.transform.procobol" text="Pre-transform Pro*Cobol files" type="boolean"/>
    <property id="cobol.transform.procobol.extensions" text="PRO*Cobol pre-transform extensions filter" type="string"/>
    <property id="cobol.copyResolution" text="COPY resolution strategy" type="string" style="combo">
      <options>
        <option key="byFile">Resolve COPYs relative to analyzed file</option>
        <option key="byPatterns">Resolve COPYs by patterns</option>
        <option key="byDirectories">Resolve COPYs in directories</option>
      </options>
    </property>
    <property id="cobol.copyResolution.extensions" text="COPY extensions" type="string"/>
    <property id="cobol.copyResolution.byFile.relativePaths" text="COPY search paths (relative to current)" type="string">
      <depends id="cobol.copyResolution" value="byFile"/>
    </property>
    <property id="cobol.copyResolution.byPatterns.patterns" text="COPY patterns" type="string">
      <depends id="cobol.copyResolution" value="byPatterns"/>
    </property>
    <property id="cobol.copyResolution.byDirectories.recurseSubdirs" text="Recurse directories in COPY resolution" type="boolean">
      <depends id="cobol.copyResolution" value="byDirectories"/>
    </property>
    <property id="cobol.parser.valid.list" text="Cobol parser" type="string" style="combo">
      <options>
        <option key="cobolibm,cobolmicrofocus,coboltandem,acucobol,rmcobol">All available</option>
        <option key="cobolibm">Enterprise / ILE COBOL (IBM)</option>
        <option key="cobolmicrofocus">Micro Focus COBOL</option>
        <option key="coboltandem">HP COBOL (Tandem NonStop)</option>
        <option key="acucobol">ACUCOBOL</option>
        <option key="rmcobol">RM/COBOL</option>
      </options>
    </property>
    <property id="cobol.parser.choose.strategy" text="Parser strategy" type="string" hidden="true">
      <depends id="cobol.parser.valid.list">
        <map key="cobolibm,cobolmicrofocus,coboltandem,acucobol,rmcobol" value="smart" />
        <map key="cobolibm" value="deterministic" />
        <map key="cobolmicrofocus" value="deterministic" />
        <map key="coboltandem" value="deterministic" />
        <map key="acucobol" value="deterministic" />
        <map key="rmcobol" value="deterministic" />
      </depends>
    </property>
    <property id="cobol.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="cobol.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="cobol.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>
  </group>  

  <group technology="go">
    <property id="go.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="go.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="go.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>
  
  <group technology="html">
    <property id="html.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="html.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="html.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="informix">
    <property id="informix.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="informix.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="informix.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="java">
    <property id="java.version" text="Java source code version" type="integer" style="combo">
      <options>
        <option key="3">Java 1.3</option>
        <option key="4">Java 1.4</option>
        <option key="5">Java 1.5</option>
        <option key="6">Java 6</option>
        <option key="7">Java 7</option>
        <option key="8">Java 8</option>
        <option key="9">Java 9</option>
        <option key="10">Java 10</option>
        <option key="11">Java 11</option>
        <option key="12">Java 12</option>
      </options>
    </property>
    <property id="java.processJsp" text="Process JSP pages as java servlets" type="boolean"/>
    <property id="java.JSPCompiler.classpath" text="Jars and classes paths for JSP compilation" type="string"/>
    <property id="java.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="java.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="java.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>
  
  <group technology="javascript">
    <property id="javascript.version" text="JavaScript source code version" type="string" style="combo">
      <options>
        <option key="1.5">JavaScript 1.5</option>
        <option key="1.6">JavaScript 1.6</option>
        <option key="1.7">JavaScript 1.7</option>
        <option key="1.8">JavaScript 1.8</option>
        <option key="ES6">ECMAScript 6 (ES 2015)</option>
        <option key="ES7">ECMAScript 7 (ES 2016)</option>
        <option key="ES8">ECMAScript 8 (ES 2017)</option>
        <option key="TS">TypeScript</option>
      </options>
    </property>
    <property id="javascript.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="javascript.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="javascript.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="jcl">
    <property id="jcl.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="jcl.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="jcl.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="jsp">
    <property id="jsp.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="jsp.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="jsp.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="natural">
    <property id="natural.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="natural.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="natural.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="kotlin">
    <property id="kotlin.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="kotlin.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="kotlin.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>  

  <group technology="objectivec">
    <property id="objectivec.system.version" text="Objective-C system version" type="string" />
    <property id="objectivec.memory.model" text="Objective-C memory model" type="string" style="combo">
      <options>
        <option key="">Not specified</option>
        <option key="ARC">ARC (Automatic Reference Count)</option>
        <option key="MRR">MRR (Manual Retain/Release)</option>
      </options>
    </property>
    <property id="objectivec.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="objectivec.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="objectivec.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="oracleforms">
    <property id="oracleforms.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="oracleforms.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="oracleforms.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="perl">
    <property id="perl.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="perl.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="perl.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="php">
    <property id="php.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="php.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="php.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="plsql">
    <property id="plsql.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="plsql.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="plsql.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="powerscript">
    <property id="powerscript.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="powerscript.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="powerscript.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="python">
    <property id="python.parser.valid.list" text="Python parser" type="string" style="combo">
      <options>
        <option key="python,python3">All available</option>
        <option key="python">Python</option>
        <option key="python3">Python 3</option>
      </options>
    </property>
  
    <property id="python.parser.choose.strategy" text="Parser strategy" type="string" hidden="true">
      <depends id="python.parser.valid.list">
        <map key="python,python3" value="smart" />
        <map key="python" value="deterministic" />
        <map key="python3" value="deterministic" />
      </depends>
    </property>
  
    <property id="python.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="python.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="python.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="rpg4">
    <property id="rpg4.processSQL" text="Process embedded SQL in RPG IV statements" type="boolean"/>
    <property id="rpg4.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="rpg4.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="rpg4.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="ruby">
    <property id="ruby.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="ruby.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="ruby.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <group technology="scala">
    <property id="scala.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="scala.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="scala.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>
  </group>

  <group technology="sqlscript">
    <property id="sqlscript.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="sqlscript.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="sqlscript.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>
  </group>

  <group technology="swift">
    <property id="swift.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="swift.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="swift.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>  
  
  <group technology="transactsql">
    <property id="transactsql.parser.valid.list" text="Transact-SQL parser" type="string" style="combo">
      <options>
        <option key="transactsql,sybase">All available</option>
        <option key="transactsql">SQL Server</option>
        <option key="sybase">Sybase</option>
      </options>
    </property>
    <property id="transactsql.parser.choose.strategy" text="Parser strategy" type="string" hidden="true">
      <depends id="transactsql.parser.valid.list">
        <map key="transactsql,sybase" value="smart" />
        <map key="transactsql" value="deterministic" />
        <map key="sybase" value="deterministic" />
      </depends>
    </property>
    <property id="transactsql.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="transactsql.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="transactsql.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>
  
  <group technology="vb6">
    <property id="vb6.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="vb6.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="vb6.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>
  
  <group technology="vbnet">
    <property id="vbnet.min.tokens" text="Minimum tokens in clone" type="integer" />
    <property id="vbnet.ignore.literals" text="Ignore literals in clones" type="boolean"/>
    <property id="vbnet.ignore.identifiers" text="Ignore identifiers in clones" type="boolean"/>    
  </group>

  <macros>
    <macro id="build.analysis.dialog">
      <dialog>
        <class>com.optimyth.qaking.agent.analyzer.gui.config.BuildAnalysisDialog</class>
        <title>Analyze build tool output</title>
        <description><![CDATA[<p>Process build tool output to extract header directories and pre-defined macros 
          from compiler executions.</p><br>
          
          <p>Run the build tool (make, nmake, imake, MSbuild, scons, etc.) for the software 
          to analyze, and dump output to a logfile. Make sure that build runs with clean dependencies.</p><br>
          
          <p>Note: You may use with make the -n switch to build without executing compilation 
          scripts and to ensure that commands are dumped.</p><br>

          <p>Examples (for different build tools):
          <ul style="font-family: monospace">
            <li>make clean && make -n > build.log</li>
            <li>nmake /N clean all > build.log</li>
            <li>msbuild /nologo /t:rebuild MyProject.proj > build.log</li>
            <li>scons -Q -n > build.log</li>
          </ul></p>
          
          <p>Once you have executed the build tool, select the generated logfile for 
          analysis and click "Analyze".</p><br>]]>
        </description>
      </dialog>
    </macro>
  </macros>
</properties>