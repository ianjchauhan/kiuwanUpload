# Classpath for the JDBC driver to connect to the database to analyze
# jdbc.driver.classpath=${AGENT_HOME}/lib.custom/mysql-connector-java-5.1.38-bin.jar
# For Oracle:
jdbc.driver.classpath=${AGENT_HOME}/lib.custom/ojdbc14.jar;${AGENT_HOME}/lib.custom/orai18n.jar
# For SQL Server:
# jdbc.driver.classpath=${AGENT_HOME}/lib.custom/jtds-1.2.jar

# Database type: db2, db2net, udbt4, db2zos, derby, derbynet, firebird, hsqldb, informix, maxdb, mssql, mssql05,
# mssql-jtds, mssql05-jtds, mysql, ora, orathin, pgsql, sqlite, sybase, sybase2, teradata
dbType=orathin_servicename

# Database name to analyze
dbName=XE

# Schema to use (for databases that do not use schemas, use user for example)
schema=CHECKING

# Host where database lives
host=linuxserver

# (TCP/IP) Port to connect
port=1521

# Username and password to use when connecting (needs permissions for some database schema/catalog accesses)
user=checking
password=checking

# Regexp for tables to include. Example: (PROD.*)|(DEV.*)
include=.+

# Regexp for tables to exclude
exclude=_NONE_

# Where to place the output; typically passed to the script (this is a convenient default)
output=${basedir}

# Set to false is schema is huge and the count of rows for each table takes long time
count.rows=true

# Set to false if no implied foreign keys should be extracted from schema
export.implied.foreign.keys=true

# Set to false if no views should be extracted
export.views=true

# If true, extended schema extensions for the particular database type is generated
# If false, extended schema extensions are not exported
export.extended=true

# Memory configuration
memory.start=512m
memory.max=512m
stack.size=256k

# Encoding for output files
encoding=UTF-8

# Prefix for tables. ALL or DBA are accepted
prefix=ALL
