
# The declarative validation rule
aim.validation.rule.validate.active=false
# Category for the rule
aim.validation.rule.validate.category=architecture

# Validation DEPVAL code could be registered in a classpath resource, or directly (see aim.validation.rule.validate.code)
aim.validation.rule.validate.codeResource=
# Sample DEPVAL code for validation rule. See APPMAP Dependencies Validation Language section in AIM manuals
aim.validation.rule.validate.code=\
  ruleset(name: 'architecture', severity: 'warning', message:'${rule.description}: ${source} -> ${target}' ) { \
    // Predicates for matching each layer. Assumes that containing software has a tag according to its layer \
    String PRESENTATION = "tags('presentation', in:software)" \
    String BUSINESS = "tags('business', in:software)" \
    String BACKEND = "tags('dataAccess', in:software) or tags('host', in:software)" \
    \
    pattern(name: 'component') { include(aql: ".[@type == 'component']") } \
    // Patterns that define the layers, using predicates above \
    pattern(name: 'presentation') { include(aql: ".[${PRESENTATION}]") } \
    pattern(name: 'business') { include(aql:  ".[${BUSINESS}]") } \
    pattern(name: 'backend') { include(aql: ".[${BACKEND}]") } \
    \
    rule(name: 'layering', description: 'A component in a layer may call only components in other layers (or infrastructure)') { \
      subset(pattern:'component') // Only interested in components \
      deny { \
        // Illegal business -> presentation dependency \
        from(pattern: 'business') \
        to(aql: "component[${PRESENTATION}]") \
      } \
      deny { \
        // Illegal backend -> business/presentation dependency \
        from(pattern: 'backend') \
        to(aql: "component[${PRESENTATION} or ${BUSINESS}]") \
      } \
      deny { \
        // Illegal presentation -> backend dependency \
        from(pattern: 'presentation') \
        to(aql: "component[${BACKEND}]") \
      } \
    } \
  }

# Too much coupling detector
aim.validation.rule.tooMuchCoupling.active=false

# If true, transitive (indirect) dependencies are checked ("global coupling").
# If false, only direct dependencies are considered.
aim.validation.rule.tooMuchCoupling.transitive=false

# Default direct coupling threshold
aim.validation.rule.tooMuchCoupling.defaultThreshold=50

# 5% of transitive links incoming/outgoing means GLOBAL smell
aim.validation.rule.tooMuchCoupling.componentPercentageThreshold=5.0

# Direct coupling thresholds by type/subtype
aim.validation.rule.tooMuchCoupling.threshold.software=20
aim.validation.rule.tooMuchCoupling.threshold.component=50
aim.validation.rule.tooMuchCoupling.threshold.class=20
aim.validation.rule.tooMuchCoupling.threshold.program=50
aim.validation.rule.tooMuchCoupling.threshold.dbObject=50
