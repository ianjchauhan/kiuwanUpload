
# Default (fallback) software name
aim.cpp.software=${aim.common.software}

# Activate very basic C++ rule
aim.cpp.rule.active=false

# Activate rule to extract relations between C++ and DB objects
aim.cpp.proc.rule.active=false

# Set true if we want to add all classes (even those with no relations to PL/SQL sentences) to the model.
aim.cpp.proc.allclasses=true

# If true, intermediate SQL components between C caller component and target database entities are created.
# If false (the default), no intermediate SQL components are created. Direct relations between caller and target database entities are created.
aim.cpp.proc.createSqlComponents=false

# Resolve method calls
aim.cpp.rule.resolveCalls=true
# Resolve inheritance
aim.cpp.rule.resolveInheritance=true
# Resolve type references
aim.cpp.rule.resolveTypeReferences=true

# Filter to use (default, pattern) for C++ code files
aim.cpp.filter=pattern

# C/C++ filters
aim.cpp.filter.pattern=**/*.c,**/*.cpp,**/*.cc,**/*.h,**/*.hpp,**/*.pc

# C/C++ granularity level: file, class or function
aim.cpp.level=class

# Which resolver to use (existing or any other else)
# existing: Resolve only relations to classes in same model
# matching: Resolve only relations to classes in packages matching aim.cpp.matching.packagePatterns
aim.cpp.resolver=existing

# If resolver is set to matching, set package patterns
aim.cpp.matching.packagePatterns=.+

# Strategy for resolve the package of any class have not a package, values: unknown, same, custom
# unknown - put the package [?]
# same - put the package of the caller
# custom - put the specific package in property aim.cpp.custom.package
aim.cpp.package.resolver=same

# If the property aim.cpp.package.resolver=custom use this package for classes
aim.cpp.custom.package=

# If true calls to same object are ignored.
aim.cpp.ignored.calls.same.object=false

