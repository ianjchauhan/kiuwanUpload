<!DOCTYPE block SYSTEM "../aim.configuration.dtd">
<block tech='cpp' subtech='cpp' descriptor='cpp/aim.cpp.xml' label=''>
  <description>
  This module identifies C/C++ files and adds to the model
  the source file, classes, structs and methods.
  </description>

  <dependencies/>

  <properties>
    <property id='aim.cpp.rule.active' type='bool'>
      <name>active</name>
      <example>false</example>
      <description>
        Rule activation flag.
      </description>
    </property>

    <property id='aim.cpp.proc.rule.active' type='bool'>
      <name>active</name>
      <example>false</example>
      <description>
        Activate rule to extract relations between C++ and DB objects.
      </description>
    </property>

    <property id="aim.cpp.software" type="string">
      <name>software</name>
      <example>${aim.common.software}</example>
      <description>
        Containing software for program entities discovered by C++ rule.
        Used as fallback if no global resolver or global resolver cannot find a containing software for the target entity.
      </description>
    </property>

    <property id='aim.cpp.filter' type='enum'>
      <name>filter</name>
      <example>pattern</example>
      <description>Strategy to use for selecting C++ files to process.</description>
      <possible>
        <enumval name='default'>Accept language extensions for cpp technology.</enumval>
        <enumval name='pattern'>Accept scripts matching patterns in the <code>patterns</code> property.</enumval>
      </possible>
    </property>

    <property id='aim.cpp.filter.pattern' type='list' subtype='antPattern'>
      <name>pattern</name>
      <example>**/*.cpp,**/*.cc</example>
      <description>If <code>filter=pattern</code>, use the following comma-separated Ant patterns for matching JCL files.</description>
    </property>

    <property id='aim.cpp.level' type='enum'>
      <name>level</name>
      <example>file</example>
      <description>Level of components generated by the rule on model.</description>
      <possible>
        <enumval name='file'>Generates at resource level.</enumval>
        <enumval name='class'>Generates resources and classes.</enumval>
        <enumval name='function'>Generates resources, classes and functions.</enumval>
      </possible>
    </property>

    <property id='aim.cpp.rule.resolveCalls' type='bool'>
      <name>resolveCalls</name>
      <example>false</example>
      <description>Resolve method calls</description>
    </property>

    <property id='aim.cpp.rule.resolveInheritance' type='bool'>
      <name>resolveInheritance</name>
      <example>false</example>
      <description>Resolve class inheritance</description>
    </property>

    <property id='aim.cpp.rule.resolveTypeReferences' type='bool'>
      <name>resolveTypeReferences</name>
      <example>false</example>
      <description>Resolve type references</description>
    </property>

    <property id='aim.cpp.resolver' type='enum'>
      <name>resolver</name>
      <example>existing</example>
      <description>Indicates resolver to use in order to generate model.</description>
      <possible>
        <enumval name='existing'>Resolve only relations to classes in same model.</enumval>
      </possible>
    </property>

    <property id='aim.cpp.proc.allclasses' type='bool'>
      <name>resolver</name>
      <example>existing</example>
      <description>Set true if we want to add all classes (even those with no relations to PL/SQL sentences) to the model.</description>
    </property>

    <property id='aim.cpp.ignored.calls.same.object' type='bool'>
      <name>ignored.calls.same.object</name>
      <example>false</example>
      <description>If true calls to same object are ignored.</description>
    </property>
  </properties>

  <createdEntities>
    <values>program,class,operation,structs</values>
    <description>If <code>aim.cpp.level=file</code> creates C++ programs and, if <code>aim.cpp.level=class</code>, will create C++ class.
     If <code>aim.cpp.level=function</code>, will create structs and functions also</description>
  </createdEntities>

  <createdRelations>
    <values>application-contains-&gt;program,application-contains-&gt;class,program-contains-&gt;struct,program-contains-&gt;operation</values>
    <description>Resolves class (<code>aim.cpp.level=class</code>), programs contained in an application, but also structs and operations contained in a program (<code>aim.cpp.level=function</code>).</description>
  </createdRelations>

  <importantConfigurations>
    <alternative>
      <value>aim.cpp.rule.active=true</value>
      <value>aim.cpp.level=file</value>
    </alternative>
    <alternative>
      <value>aim.cpp.rule.active=true</value>
      <value>aim.cpp.level=class</value>
    </alternative>
    <alternative>
      <value>aim.cpp.rule.active=true</value>
      <value>aim.cpp.level=function</value>
    </alternative>
  </importantConfigurations>
</block>
