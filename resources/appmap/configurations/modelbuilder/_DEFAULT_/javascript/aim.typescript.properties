# Configuration property for Typescript

# If true, enables processing of Typescript programs.
aim.typescript.rule.active=true

# Default (fallback) software, when no software resolver could classify Typescript artifacts
aim.typescript.software=${aim.common.software}

# If true, matching Typescript code will be added to relations
aim.typescript.addCodeToRelations=${aim.common.addCodeToRelations}

# If true, artifacts will be resolved
aim.typescript.resolveArtifacts=${aim.common.resolveArtifacts}

# Filter to use (default, pattern) for Javascript code files
aim.typescript.filter=default

# Comma-separated list of ANT Patterns for Typescript files to process, when aim.typescript.filter=pattern
aim.typescript.filter.pattern=**/*.js,**/*.xsjs,**/*.ts,**/*.tsx

# Which resolver to use (existing or matching) for resolving outward dependencies (calls...).
# existing: Resolve only relations to classes in same model
# matching: Resolve only relations to classes matching aim.typescript.matching.patterns
aim.typescript.resolver=existing

# If resolver is set to matching, set class patterns to accept for dependencies
aim.typescript.matching.patterns=.+

# Strategy for resolve the package of any class have not a package, values: unknown, same, custom
# unknown - put the package [?]
# same - put the package of the caller
# custom - put the specific package in property aim.typescript.custom.package
aim.typescript.type.package.resolver=same

# If the property aim.typescript.type.package.resolver=custom use this package for classes
aim.typescript.custom.package=

# Part of the beginning of the name that will be ignored in the names of classes and elements 
# of the typescript language. Values separated by ','. Example: /FRONT,/UI
aim.typescript.ignore.folders=

# if the match of the beginning of the names is ignore case or not. Values true or false.
aim.typescript.ignore.case.folders=false
