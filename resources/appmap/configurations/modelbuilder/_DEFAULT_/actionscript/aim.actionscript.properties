# If true, process ActionScript source code
aim.actionscript.rule.active=false

# Strategy to use for selecting ActionScript files to process.
# default: use extensions in language info.
# pattern: uses explicit pattern.
aim.actionscript.filter=default

# If filter set to pattern, use the following comma-separated patterns
aim.actionscript.filter.pattern=*.as,**/*.as

# Containing software for program entities discovered by ActionScript rule.
# Used as fallback if no global resolver or global resolver cannot find a containing software for the target entity.
aim.actionscript.software=${aim.common.software}

# If true create components of type operation to model functions and the relations between functions.
aim.actionscript.process.functions=false

# Objects that access to database separated with ','
aim.actionscript.rule.sql.objects=SQLStatement,flash.data.SQLStatement

# Methods to execute queries separated with ','
aim.actionscript.rule.sql.methods=execute

# The database type (e.g. DB2, Oracle...) or database name for container of referenced tables.
# Used as fallback if no global database object resolver, or the resolver cannot find the target entity.
aim.actionscript.rule.dbsystem=${aim.common.database.dbsystem}

# The database name or database schema for container of referenced tables.
# Used as fallback if no global database object resolver, or the resolver cannot find the target entity.
aim.actionscript.rule.dbname=${aim.common.database.dbname}

# If true ignore case for database components.
aim.actionscript.rule.ignoreCase=${aim.common.ignoreCase}

# If set to true, SQL code is added as property into the queries.
aim.actionscript.rule.addSqlToModel=${aim.common.addCodeToRelations}

# If set to true, SQL queries and their relationships with used tables are inserted into the model as explicit entities.
aim.actionscript.rule.parseSqlColumns=true

# The dialect of embedded SQL in .NET code. Possible values are: ansisql, plsql, transactsql, multi
# ansisql: Use SQL-92 parser
# plsql: Use PL/SQL parser
# transactsql: Use Transact-SQL parser
# multi: Try all options above
aim.actionscript.sqltype=${aim.common.database.sqltype}

