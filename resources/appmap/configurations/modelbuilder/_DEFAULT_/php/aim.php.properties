# Configuration properties for PHP code processing.

aim.php.rule.active=false

# Default (fallback) software, when no software resolver could classify PHP artefacts
aim.php.software=${aim.common.software}

# If true, matching PHP code will be added to relations
aim.php.addCodeToRelations=${aim.common.addCodeToRelations}

# If true, artifacts will be resolved
aim.php.resolveArtifacts=${aim.common.resolveArtifacts}

# When true, PHP functions are registered as operation Components; when false, only dependencies between PHP programs or classes are modelled
aim.php.registerFunctions=true

# When true, methods are registered and their dependencies processed; when false, only register dependencies between classes
aim.php.registerMethods=true

# When true, class inheritance dependencies are processed
aim.php.resolveInheritance=true

# When true, function/method calls between PHP entities are processed
aim.php.resolveCalls=true

# When true, object instantiations are processed
aim.php.resolveInstantiations=true

# When true, class field usages are processed
aim.php.resolveFieldReferences=true

# Which methods to model? (when registerMethods=true):
# nonPrivateMagicGetterSetter - ignore private, "magic" and getter/setter methods
# nonPrivateMagic - ignore private or "magic" methods
# any - register all methods
aim.php.methodPredicate=nonPrivateMagicGetterSetter

# Filter to use (default, pattern) for PHP code files
aim.php.filter=default

# Comma-separated list of ANT Patterns for PHP files to process, when aim.php.filter=pattern
aim.php.filter.pattern=**/*.php, **/*.php3, **/*.php4, **/*.php5, **/*.php6, **/*.phps, **/*.phtml

# Which resolver to use (existing or matching) for resolving outward dependencies (calls...).
# existing: Resolve only relations to classes in same model
# matching: Resolve only relations to classes matching aim.php.matching.patterns
aim.php.resolver=existing

# If resolver is set to matching, set class patterns to accept for dependencies
aim.php.matching.patterns=.+

# Strategy for resolve the package of any class have not a package, values: unknown, same, custom
# unknown - put the package [?]
# same - put the package of the caller
# custom - put the especific package in property aim.php.custom.package
aim.php.type.package.resolver=same

# If the property aim.php.type.package.resolver=custom use this package for classes
aim.php.custom.package=

# ---- SQL processing -----

# If true, resolve dependencies in embedded SQL code; if false, no SQL code is processed
aim.php.resolveSQL=true

# If true, create intermediate component for each SQL statement detected, linked to the source component and to the database objects;
# if false, no component is created for SQL statement, and direct dependencies are created between source component and database objects.
aim.php.createSqlComponents=true

# The dialect of embedded SQL in PHP code. Possible values are: ansisql, plsql, transactsql, multi
# ansisql: Use SQL-92 parser
# plsql: Use PL/SQL parser
# transactsql: Use Transact-SQL parser
# multi: Try all options above
aim.php.sqltype=${aim.common.database.sqltype}


# The name for default software to contain database objects, when not resolved by a global database resolver
aim.php.dbsystem=${aim.common.database.dbsystem}

# The name for database component to contain database objects, when not resolved by a global database resolver
aim.php.dbname=${aim.common.database.dbname}

# If true, ignore case for database objects; if false, keep case found in SQL statements
aim.php.ignoreSQLCase=${aim.common.ignoreCase}

