# Configuration properties for j2ee/hibernate module.

# The default software name to place classes found in descriptor (if no global resolver finds it).
aim.hibernate.software=${aim.common.software}

# The default database system (or database name) to use when the target database entity cannot be resolved.
aim.j2ee.rule.hibernate.dbsystem=${aim.common.database.dbsystem}

# The default database name (or schema) to use when the target database entity cannot be resolved.
aim.j2ee.rule.hibernate.dbname=${aim.common.database.dbname}

# If true, case in database names are ignored in mappings between entity beans and tables
aim.j2ee.rule.hibernate.ignoreCase=${aim.common.ignoreCase}

# If true, matching HQL/SQL code will be added to relations
aim.j2ee.rule.hibernate.addCodeToRelations=${aim.common.addCodeToRelations}

# If set to true, SQL nodes are added to model queries
aim.j2ee.rule.hibernate.addSqlToModel=${aim.common.addCodeToRelations}

# If true, intermediate SQL components between java classes and target database entities are created.
# If false (the default), no intermediate SQL components are created, and direct relations between java class
# and target database entities are created.
aim.j2ee.rule.hibernate.createSqlComponents=false

# Ant pattern(s) for hibernate descriptors
aim.hibernate.rule.hibernateMappingsPattern=**/*.hbm,**/*.hbm.xml

# Filter (Ant patterns) for Java source code
aim.hibernate.filter.javaSource=**/*.java

# Database Session methods to be inspected for programmatic query execution
aim.hibernate.java.rule.databaseMethods=createQuery,createSQLQuery,createNativeQuery

# Which of the database methods are taking HQL (Hibernate Query Language) code
aim.hibernate.java.rule.hqlMethods=createQuery

# Additional classes (besides org.hibernate.Session) that will be checked as subclasses of hibernate sessions.
aim.hibernate.java.rule.sessionClasses=

# Additional classes (besides org.hibernate.SessionFactory) that will be checked for openSession() /
# getCurrentSession() session factory method calls
aim.hibernate.java.rule.sessionFactoryClasses=

# Additional packages that will be checked as hibernate classes
aim.hibernate.java.rule.packages=

# If true, checks that database methods are invoked on org.hibernate.Session.
# If false, any call on databaseMethods is inspected. This allows to process code that uses "wrapper"
# frameworks that provide factories on Hibernate sessions.
aim.hibernate.java.rule.strictSessionCheck=false

# If true, check that JPA methods are called on a JPA object (may not match complex JPA calls).
# If false, any call to methods listed in methods properties is considered a JPA call.
aim.j2ee.rule.jpa.strictCheck=false

# If false, method calls are replaced by SQL placeholders. If true, method calls are ignored.
# Depending on how the SQL is produced in code, set this flag to increase parsing ratio of the extracted SQL code.
aim.j2ee.rule.jpa.ignoreMethodCalls=true

# If true, Hibernate mapping descriptors are processed.
aim.hibernate.rule.active=false

# If true, Hibernate java code is processed for analyzing mapping annotations or API code.
aim.hibernate.java.rule.active=false

# If true, JPA java code is processed for analyzing mapping annotations or API code.
aim.hibernate.java.jpa.rule.active=false