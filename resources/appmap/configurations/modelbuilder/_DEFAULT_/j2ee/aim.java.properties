# Configuration properties for Java code processing.

# Default (fallback) software name
aim.j2ee.rule.java.software=${aim.common.software}

# Resolve method calls
aim.j2ee.rule.java.resolveCalls=true
# Resolve references to fields
aim.j2ee.rule.java.resolveFieldReferences=true
# Resolve inheritance (extends from parent class, inherits from interface)
aim.j2ee.rule.java.resolveInheritance=true
# Resolve object instantiations
aim.j2ee.rule.java.resolveInstantiations=true
# Resolve type references (casts, type usages in method signatures and field/variable declarations)
aim.j2ee.rule.java.resolveTypeReferences=true
# If true, matching java code will be added to relations
aim.j2ee.rule.java.addCodeToRelations=${aim.common.addCodeToRelations}
# If true, artifacts will be resolved
aim.j2ee.rule.java.resolveArtifacts=${aim.common.resolveArtifacts}

# Which resolver to use (existing or matching)
# existing: Resolve only relations to classes in same model
# matching: Resolve only relations to classes in packages matching aim.j2ee.rule.java.matching.packagePatterns
aim.j2ee.java.resolver=existing
# If resolver is set to matching, set package patterns
aim.j2ee.java.matching.packagePatterns=.+

# Strategy for resolve the package of any class have not a package, values: unknown, same, custom
# unknown - put the package [?]
# same - put the package of the caller
# custom - put the especific package in property aim.j2ee.custom.package
aim.j2ee.type.package.resolver=same

# If the property aim.j2ee.type.package.resolver=custom use this package for classes
aim.j2ee.custom.package=

# The strategy to follow for modelling class dependencies with method-level granularity.
# If empty, dependencies will be modeled with class-level granularity.
# If 'patterns', the list of patterns in aim.j2ee.java.resolveMethodsFilter.patterns will be used.
aim.j2ee.java.resolveMethodsFilter=

# Comma-separated list of (regexp) patterns on Java fully-qualified types that, when matched, will be registered with method granularity
# If you use ".*" (match any) methods will be shown as components for every type found.
# If empty, entities and dependencies will be represented at the type granularity.
aim.j2ee.java.resolveMethodsFilter.patterns=.+

# Java rule (either source or bytecode) may register class methods as model entities
# This is the strategy to follow for deciding which method declarations to model: Empty, or one of: nonPrivateMethods, excludeGetterSetter, patterns
# If empty, no method declaration will be modeled (but methods with dependencies for classes matching aim.j2ee.java.resolveMethodsFilter will be registered).
# If nonPrivateMethods, any method with access scope higher than 'private' will be modeled.
# If excludeGetterSetter, all methods, excluding getters and setters, will be modeled.
# If patterns, methods with signatures matching aim.j2ee.java.methodsPredicate.patterns property will be registered.
aim.j2ee.java.methodsPredicate=

# List of regular expressions (separated by |) that will be used to match method signatures when aim.j2ee.java.methodsPredicate=patterns
# Method signatures are in the form: methodName(arg1Type,...,argNType)
# where each type is fully-qualified.
aim.j2ee.java.methodsPredicate.patterns=.+

# Activation for source (.java) rule
aim.j2ee.rule.javaSource.active=false
# Filter (Ant patterns) for java source rule
aim.j2ee.filter.javaSource=**/*.java

# Activation for bytecode (.class) rule
aim.j2ee.rule.javaBytecode.active=false
# Filter (Ant patterns) for java bytecode rule
aim.j2ee.filter.javaBytecode=**/*.class
