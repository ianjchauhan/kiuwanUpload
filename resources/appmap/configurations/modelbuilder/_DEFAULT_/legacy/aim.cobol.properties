# Configuration property for Cobol

# If true, enables processing of Cobol programs.
aim.cobol.rule.active=false

# If true, enables processing vars of Cobol programs.
aim.cobol.rule.variables.active=false

# If true, enables processing of IMS dependencies in Cobol programs
aim.cobol.ims.rule.active=false

# Filtering strategy for selecting Cobol files to process.
# default: Use default extensions configured for cobol technology.
# pattern: Use patterns in aim.cobol.filter.pattern property for selecting which files should be processed.
aim.cobol.filter=default

# When filter = pattern, the explicit ANT pattern to use for matching Cobol sources
aim.cobol.filter.pattern=**/*.cob,**/*.cbl,**/*.cobol,**/*.cpy,**/*.pco

# Containing software for program entities discovered by cobol rule.
# Used as fallback if no global resolver or global resolver cannot find a containing software for the target entity.
aim.cobol.rule.software=${aim.common.software}

# The database type (e.g. DB2, Oracle...) or database name for container of referenced tables.
# Used as fallback if no global database object resolver, or the resolver cannot find the target entity.
aim.cobol.rule.dbsystem=${aim.common.database.dbsystem}

# The database name or database schema for container of referenced tables.
# Used as fallback if no global database object resolver, or the resolver cannot find the target entity.
aim.cobol.rule.dbname=${aim.common.database.dbname}

# If true, case is ignored in entity names found in cobol programs (called programs, copys, datafiles, db tables...)
aim.cobol.rule.ignoreCase=${aim.common.ignoreCase}

# If set to true, usages of physical files will be resolved
aim.cobol.rule.parseFileDependencies=true
# If set to true, Cobol - SQL dependencies will be extracted from EXEC SQL statements
aim.cobol.rule.parseSqlDependencies=true
# If set to true, SQL queries and their relationships with used tables are inserted into the model as explicit entities.
# Ignored if parseSqlDependencies=false
aim.cobol.rule.parseSqlColumns=true
# If set to true, EXEC CICS blocks will be parsed and cobol-related dependencies resolved (basically LINK/XCTL command)
aim.cobol.rule.parseCicsDependencies=true
# If set to true, SQL code is added as property into the queries. Ignored if parseSqlColumns=false
aim.cobol.rule.addSqlToModel=${aim.common.addCodeToRelations}

# Regular expression with the COPY pattern to ignore (if not specified, all COPYs will be considered)
aim.cobol.rule.copysToIgnore=^$
# Regular expression with the program pattern to ignore when resolving calls (if not specified, all calls will be considered)
aim.cobol.rule.callsToIgnore=^$

# If true, unresolved dynamic CALLs will be created with the name of the Cobol variable as target program,
# and a toCheck property set. If false (the default) the dynamic CALL will be ignored when value for target
# variable cannot be resolved for the Cobol program.
aim.cobol.rule.markUnresolvedDynamicCalls=false

# If true, calls to programs that cannot be found are registered without language / artifact properties
# If false, such calls are ignored
aim.cobol.resolver.progcalls.registerUnresolvedCalls=${aim.common.acceptUnresolved}

# Base directory where called Cobol programs will be searched.
aim.cobol.resolver.cobol.basedir=${aim.common.srcdir}
# Ant pattern(s) that match directories, relative to aim.cobol.resolver.cobol.basedir, where called Cobol programs will be searched.
aim.cobol.resolver.cobol.patterns=**
# Extensions to consider for called cobol programs resolution.
aim.cobol.resolver.cobol.extensions=cob,cbl,cobol,pco

# File resolver to be use during copy resolution, it can be: inmodel, singledir, multipattern
# inmodel: All the analyzed artifacts (files) are stored in the model.
# singledir: Resolve file for program name, using a single basedir (possibly traversing the directory subtree, if property aim.cobol.resolver.copy.recurseDirs set to true).
# multipattern: This resolver uses a sequence of ANT patterns (aim.cobol.resolver.copy.patterns) to fetch directories where the files of interest may live from basedir.
# datatablepatterns: This resolver uses two sequences of ANT patterns (aim.cobol.resolver.data.copy.patterns and aim.cobol.resolver.table.copy.patterns) to fetch 
#                directories where the files of interest may live from basedir. If the sentence is of type EXEC SQL INCLUDE COPY this resolver uses first the patterns
#                specified in aim.cobol.resolver.table.copy.patterns, in other case uses aim.cobol.resolver.data.copy.patterns as first patterns.
aim.cobol.resolver.copy.type=inmodel
# Base directory where included Cobol copybooks (COPYs) will be searched. Note that this parameter is used only when "singledir" resolver is used
aim.cobol.resolver.copy.basedir=${aim.common.srcdir}
# Whether recurse subdirectories when using "singledir" file resolver
aim.cobol.resolver.copy.recurseDirs=false
# Ant pattern(s) that match directories, relative to aim.cobol.resolver.copy.basedir, where included copybooks will be searched.
aim.cobol.resolver.copy.patterns=libs/*
# Ant pattern(s) that match directories, relative to aim.cobol.resolver.copy.basedir, where included copybooks will be searched. Used first for not SQL EXEC INCLUDE statements.
aim.cobol.resolver.data.copy.patterns=libs/*
# Ant pattern(s) that match directories, relative to aim.cobol.resolver.copy.basedir, where included copybooks will be searched. Used first for SQL EXEC INCLUDE statements.
aim.cobol.resolver.table.copy.patterns=libs/*
# Extensions to consider for COPY resolution.
aim.cobol.resolver.copy.extensions=cpy
# Wether to put copys in caller software or not (default)
# true: use caller software
# false: use default software
aim.cobol.resolver.copy.unresolved.useCallerSoftware=false

# SqlProcessor and Parser to use for embedded SQL processing. Possible values are: ansisql, plsql, multi
# ansisql: Use SQL-92 parser
# plsql: Use PL/SQL parser (e.g. for Pro*Cobol)
# multi: Try both SQL-92 and PL/SQL parsers
aim.cobol.sqltype=${aim.common.database.sqltype}

# Resolution for calls to JOBs, the JOB language to consider:
# none: Do not consider any job language.
# jcl: Consider potential calls to JCL jobs.
# cl400: Consider potential calls to OS/400 CL scripts.
aim.cobol.resolver.progcalls.job=none

# Used if aim.cobol.resolver.progcalls.job=jcl or cl400
aim.cobol.resolver.job.extensions=jcl
# Base directory where jobs/scripts code will be searched.
aim.cobol.resolver.job.basedir=${aim.common.srcdir}
# Ant pattern(s) that match directories, relative to aim.cobol.resolver.job.basedir, where target jobs/scripts will be searched.
aim.cobol.resolver.job.patterns=**

# Enable resolution for calls to RPG from Cobol programs (e.g. from Cobol ILE code).
# If there are potential calls to RPG programs in Cobol code, set this to true.
aim.cobol.resolver.progcalls.rpg=false

# Base directory where called RPG programs will be searched.
aim.cobol.resolver.rpg.basedir=${aim.common.srcdir}
# Ant pattern(s) that match directories, relative to aim.cobol.resolver.rpg.basedir, where target programs will be searched.
aim.cobol.resolver.rpg.patterns=**
# Extensions to consider for target RPG program resolution. Used if aim.cobol.resolver.progcalls.rpg=true
aim.cobol.resolver.rpg.extensions=rpg

# Type for IMS databases to create
aim.ims.dbsystem=IMSDB
# Comma-separated list of ANT patterns for matching PSB descriptor files. Empty means no PSB processing.
aim.ims.psbPatterns=
# Comma-separated list of DATAENTRY=IMSFUNCTION to use when value for variables for DLI function in IMS calls cannot be resolved.
# For example: SEND=ISRT,RECEIVE=GU. Leave empty for no explicit mapping.
aim.cobol.ims.rule.identifierFunctionMap=GU-FUNC=GU,GN-FUNC=GN,GHU-FUNC=GHU,GHN-FUNC=GHN,ISRT-FUNC=ISRT,DLET-FUNC=DLET,REPL-FUNC=REPL,CHKP-FUNC=CHKP,XRST-FUNC=XRST,ROLB-FUNC=ROLB,ROLS-FUNC=ROLS
