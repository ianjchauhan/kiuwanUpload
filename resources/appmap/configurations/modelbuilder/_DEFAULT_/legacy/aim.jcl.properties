# Configuration properties for legacy/jcl AIM module.

# Enables processing of JCL code.
aim.jcl.rule.active=false

# Application/module name for JCL scripts. (default value)
aim.jcl.software.batch=${aim.common.software}

# Application/module name for called programs, not resolved as JCL scripts. (default value)
aim.jcl.software.backend=${aim.common.software}

# Strategy to use for selecting JCL files to process.
# default: use extensions in language info.
# pattern: uses explicit pattern.
aim.jcl.filter=default

# If filter ser to pattern, use the following comma-separated patterns
aim.jcl.filter.pattern=**/*.jcl

# If true, case is ignored in entity names referenced in JCL scripts
aim.jcl.ignoreCase=${aim.common.ignoreCase}

# If true, target called programs not found in model are created (in batch application).
# If false, unresolved calls are ignored.
aim.jcl.acceptUnresolved=${aim.common.acceptUnresolved}

# If true, be mapped so many relationships between the JCL and the element as are referred to in various steps.
# If false, be mapped a single relationship between JCL and the element although references the element more than once inside.
aim.jcl.saveStepInformation=true

# If true, utilities called are registered. If false, utilities are not modelled as components and no calls relation is created.
aim.jcl.registerUtilities=true

# If true, internal procedures are modeled
aim.jcl.instream=true

# Extended visitor (E) or Default (old) visitor (D)
# Use extended visitor for proper resolution of dependencies.
aim.jcl.visitor=E

# If true, calls to programs that cannot be found are registered without language / artifact properties
# If false, such calls are ignored
aim.jcl.resolver.progcalls.registerUnresolvedCalls=${aim.common.acceptUnresolved}

# Extensions to consider for called files
aim.jcl.resolver.file.extensions=jcl,prc,ctc

# Extensions to consider for called cobol programs
aim.jcl.resolver.cobol.extensions=cob,cbl,cobol,pco

# Comma-separated list of system programs / procedures to ignore
#aim.jcl.utilities.toIgnore=IDCAMS,IEBCOPY,IEBDG,IEBGENER,IEBUPDTE,IEFBR14,ICEGENER,SORT,SORTD,ICEMAN,ICKDSF,IEHINITT,IEHLIST,IEHPROGM,SPZAP
aim.jcl.utilities.toIgnore=

# Comma-separated list of host utilities (used to execute programs and launch DB2 utilities)
aim.jcl.utilities.host=IKJEFT01,IKJEFT1A,IKJEFT1B

# Comma-separated list of DB2 utilities, used to execute SQL statements (or table LOAD/UNLOAD)
aim.jcl.utilities.db2=DSNTIAUL,DSNTIAD,DSNTEP2,DSNTEP4,DSNTIAUP

# Comma-separated list of Control-M utilities for launching/scheduling Control-M jobs from JCL
aim.jcl.utilities.controlm=CTMJOB,CTMPLANB

# If true, SQL statements passed to DB2 utilities are processed.
# If false, SQL statements in JCL code are ignored.
aim.jcl.resolveSqlStatements=true

# If set to true, SQL queries and their relationships with used tables are inserted into the model as explicit entities.
# If false, direct relations between JCL and used tables are presented.
aim.jcl.addQuery=true

# If set to true, SQL code is added as property into the queries. Ignored if addQuery=false
aim.jcl.addSqlCode=true

# The database type (e.g. DB2) or database name for container of referenced tables.
# Used as fallback if no global database object resolver, or the resolver cannot find the target entity.
aim.jcl.dbsystem=${aim.common.database.dbsystem}

# The database name or database schema for container of referenced tables.
# Used as fallback if no global database object resolver, or the resolver cannot find the target entity.
aim.jcl.dbname=${aim.common.database.dbname}
