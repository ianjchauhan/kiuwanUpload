# Configuration properties for dotnet/dotnet module.

# Enable processing for .Net source code
aim.dotnet.rule.active=false

# Default software name to use as fallback, when no (global) software resolver
# found container software for analyzed artifacts and their dependencies.
aim.dotnet.software=${aim.common.software}

# Process method calls.
aim.dotnet.rule.resolveCalls=true
# Process field references.
aim.dotnet.rule.resolveFieldReferences=true
# Process class inheritance.
aim.dotnet.rule.resolveInheritance=true
# Process object instantiations.
aim.dotnet.rule.resolveInstantiations=true
# Process type references.
aim.dotnet.rule.resolveTypeReferences=true
# If true, code for a dependency is added as property to the generated relation.
aim.dotnet.rule.addCodeToRelations=${aim.common.addCodeToRelations}
# If true, location of target entities is looked for and added as artifacts property.
aim.dotnet.rule.resolveArtifacts=${aim.common.resolveArtifacts}

# The software resolver to use for resolving .Net code artefacts to containing software.
# existing: Only outgoing dependencies against existing entities will be registered.
# matching: Only outgoing dependencies against entities matching classname patterns will be registered.
aim.dotnet.resolver=existing

# When aim.dotnet.resolver=matching, comma-separated list of regexp patterns with the classes to match (ASP.Net standard types will be ignored)
aim.dotnet.resolver.matching.packagePatterns=.+

# Index file with the base framework types to ignore.
# .Net types that belong to the base framework are registered in an indexFile.
# References to such types are excluded from the model, to limit the number of components.
aim.dotnet.typeResolver.indexFile=${CHECKING_DATA}/config/plugins/APPMAP/typeIndex.idx

# The strategy to follow for modelling class dependencies with method-level granularity.
# If empty, dependencies will be modeled with class-level granularity.
# If 'patterns', the list of patterns in aim.dotnet.resolveMethodsFilter.patterns will be used.
aim.dotnet.resolveMethodsFilter=

# Comma-separated list of (regexp) patterns on fully-qualified types that, when matched, will be registered with method granularity
# If you use ".*" (match any) methods will be shown as components for every type found.
# If empty, entities and dependencies will be represented at the type granularity.
aim.dotnet.resolveMethodsFilter.patterns=.+

# Dotnet rules (either csharp or vbnet) may register class methods as model entities
# This is the strategy to follow for deciding which method declarations to model: Empty, or one of: nonPrivateMethods, patterns
# If empty, no method declaration will be modeled (but methods with dependencies for classes matching aim.dotnet.resolveMethodsFilter will be registered).
# If nonPrivateMethods, any method with access scope higher than 'private' will be modeled.
# If patterns, methods with signatures matching aim.dotnet.methodsPredicate.patterns property will be registered.
aim.dotnet.methodsPredicate=

# List of regular expressions (separated by |) that will be used to match method signatures when aim.dotnet.methodsPredicate=patterns
# Method signatures are in the form: methodName(arg1Type,...,argNType)
# where each type is fully-qualified.
aim.dotnet.methodsPredicate.patterns=.+

# Filter to use (default, pattern) for C# code files
aim.csharp.filter=default
# If aim.csharp.filter=pattern, comma-separated list of Ant patters for C# source files
aim.csharp.filter.pattern=*.cs,**/*.cs

# Filter to use (default, pattern) for VB.Net code files
aim.vbnet.filter=default
# If aim.csharp.filter=pattern, comma-separated list of Ant patters for VB.Net source files
aim.vbnet.filter.pattern=*.vb,**/*.vb
