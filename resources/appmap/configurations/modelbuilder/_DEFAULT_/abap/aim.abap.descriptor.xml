<!DOCTYPE block SYSTEM "../aim.configuration.dtd">
<block tech='abap' subtech='abap' descriptor='abap/aim.abap.xml' label='Process SAP/R3 (ABAP) technology'>
  <description>
    Process SAP/R3 (ABAP IV) technology. ABAP sources are processed to extract entities (for both procedural
    and class-oriented paradigms) and dependencies are resolved.
  </description>

  <properties>
    <property id="aim.abap.rule.active" type="bool">
      <name>abap.rule.active</name>
      <example>true</example>
      <description>If true, process ABAP source code.</description>
    </property>

    <property id="aim.abap.software" type="string">
      <name>software</name>
      <example>${aim.common.software}</example>
      <description>
        Containing software for program entities discovered by ABAP rule.
        Used as fallback if no global resolver or global resolver cannot find a containing software for the target entity.
      </description>
    </property>

    <property id="aim.abap.dbsystem" type="string">
      <name>dbsystem</name>
      <example>SAP/R3</example>
      <description>
        The container fo referenced non-internal tables (e.g. SAP/R3).
        Used as fallback if no global database object resolver, or the resolver cannot find the target entity.
      </description>
    </property>

    <property id="aim.abap.dbname" type="string">
      <name>dbname</name>
      <example>SAP</example>
      <description>
        The database name or database schema (e.g. SAP) for container of referenced non-internal tables.
        Used as fallback if no global database object resolver, or the resolver cannot find the target entity.
      </description>
    </property>

    <property id="aim.abap.createSqlNodes" type="bool">
      <name>createSqlNodes</name>
      <example>true</example>
      <description>If true, SQL intermediate components are created between source and destination database objects.</description>
    </property>

    <property id="aim.abap.processInternalTables" type="bool">
      <name>processInternalTables</name>
      <example>false</example>
      <description>If true, internal tables declarations and usages are registered in the model.</description>
    </property>

    <property id="aim.abap.registerTableReferences" type="bool">
      <name>registerTableReferences</name>
      <example>false</example>
      <description>If true, TABLES references to ABAP tables are registered.</description>
    </property>

    <property id="aim.abap.registerSapCalls" type="bool">
      <name>registerSapCalls</name>
      <example>true</example>
      <description>If true, calls to standard SAP procedures (functions, methods, transactions) are registered; ignored otherwise.</description>
    </property>

    <property id="aim.abap.filter" type="enum">
      <name>filter</name>
      <example>default</example>
      <description>Strategy to use for selecting ABAP files to process.</description>
      <possible>
        <enumval name="default">Use extensions in language info.</enumval>
        <enumval name="pattern">Uses explicit pattern.</enumval>
      </possible>
    </property>

    <property id="aim.abap.filter.pattern" type="list" subtype="antPattern">
      <name>filter.pattern</name>
      <example>*.abap,**/*.abap</example>
      <description>If filter set to pattern, use the following comma-separated patterns</description>
    </property>

    <property id="aim.abap.repository.dir" type="string">
      <name>repository.dir</name>
      <example>${CHECKING_DATA}/ABAP_REPO</example>
      <description>(Optional) path to the directory where repository files generated by extractor utility are stored.</description>
    </property>

  </properties>

  <createdEntities>
    <values>
      program(report,program), class, method, operation(form,function,module), transaction, dynpro,
      dataset, module(function-pool, type-pool, class-pool, interface-pool), table(internalTable, sapTable)
    </values>
    <description>
      Creates program component for both ABAP report and program, or class. Creates a module component
      for ABAP containers (function/type/class/interface pools), and a component for each referenced
      ABAP/SAP entity (dataset, transaction, dynpro or table).
      <br/>
      All procedural units (form, module, function or method) referenced in ABAP sources are registered.
      <br/>
      Both internal and external (SAP or custom) tables are registered.
    </description>
  </createdEntities>

  <createdRelations>
    <values>
      software|group-contains->program|operation|class,
      program|class-contains->operation|method,
      program|operation|method-calls->transaction
      program|operation|method-calls->operation|method,
      program-calls->dynpro,
      program|operation|method-uses->dataset,
      program|operation|method-uses(different kinds)->table
    </values>
    <description>
      Process relations between ABAP entities. Calls to procedural units are registered.
      Usages of datasets, dynpros and internal/external tables are modelled as relations
      (calls, uses, select, etc.).
    </description>
  </createdRelations>

</block>