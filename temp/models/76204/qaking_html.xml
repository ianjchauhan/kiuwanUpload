<?xml version="1.0" encoding="UTF-8"?>

<ruleset name="qaking_html" updated="">
  <description>BridgeWeave Mobile</description>
  <rule name="OPT.HTML.AutocompleteOnForSensitiveFields" message="AutocompleteOnForSensitiveFields: Autocomplete enabled for sensitive form fields" class="com.optimyth.html.rules.html5.security.AutocompleteOnForSensitiveFields" technology="HTML" active="true">
    <tags><![CDATA[ASVS-v4.0.2:8.2.1,CWEScope:Confidentiality]]></tags>
    <description><![CDATA[By default, browsers remember information that users submit through form input fields. This enables the browser to offer
autocomplete (suggesting possible completions for fields that the user starts typing in) or autofill (pre-populate
certain fields upon load).

Autocomplete/autofill could be a privacy concern for users. Browsers could be configured to disable autocomplete,
but it is typically enabled by default. Past values for some fields are either not useful (like a one-time pin),
or contain sensitive/private information (government identifier, credit card security code, or simply a password).
Forms in a web application should be configured to avoid remembering past values for some sensitive fields (or all fields in
a critical form), even if the browser's autocomplete feature is disabled.

That strategy limits information leakages, when a browser shows past submitted values for another person (in a shared device).
This rule will report any sensitive field (password, or fields with a name/id matching a configurable pattern).

Rule checks input fields into form tags but and also input fields outside from a form tag but specifying a form into their
form attribute.]]></description>
    <priority>3</priority>
    <effort>2</effort>
    <vulntype>Information leaks</vulntype>
    <impl>1</impl>
    <benefits><![CDATA[Avoid information leakage.]]></benefits>
    <inconvenients><![CDATA[]]></inconvenients>
    <example><![CDATA[<form method="post" action="/form" id="form1">
  <div>
    <input type="password" id="auth" name="auth"/><!-- VIOLATION -->
    <input type="text" id="creditCard" name="creditCard"/><!-- VIOLATION -->
  </div>
</form>

<input type="password" id="input3" name="auth" form="form1"/><!-- VIOLATION -->]]></example>
    <repair><![CDATA[<form method="post" action="/form" id="form1" autocomplete="off">
  <div>
    <input type="password" id="auth" name="auth"/>
    <input type="text" id="creditCard" name="creditCard"/>
  </div>
</form>

<input type="password" id="input3" name="auth" form="form1"/>

Alternatively, disable autocomplete for sensitive fields only:

<form method="post" action="/form" autocomplete="on">
  <div>
    <input type="password" id="auth" name="auth" autocomplete="off"/>
    <input type="text" id="creditCard" name="creditCard" autocomplete="off"/>
  </div>
</form>

<input type="password" id="input3" name="auth" form="form1" autocomplete="off"/>]]></repair>
    <reference><![CDATA[https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion]]></reference>
    <normatives>
      <security><![CDATA[CWE:525,OWASP:2021:A4,PCI-DSS:3.2,WASC:13]]></security>
    </normatives>
    <properties>
      <property name="acceptBrowserPasswordManagers" descname="If true, accept autocomplete behaviour for password fields, when it is assumed that browser password managers are safer than memorized passwords." value="false"/>
      <property name="sensitiveFieldsPattern" descname="Regular expression for detecting, by name, potentially sensitive fields." value="password|pass|username|user_name|creditcard|credit_card|cardnum|card_num"/>
    </properties>
    <idcat>OPT.CRITERIUM_VALUE.CQM.SECURITY</idcat>
  </rule>
  <rule name="OPT.HTML.CORDOVA.ShouldUseContentSecurityPolicy" message="ShouldUseContentSecurityPolicy: Add a CSP to every page" class="com.optimyth.html.rules.cordova.ShouldUseContentSecurityPolicy" technology="HTML" active="true">
    <tags><![CDATA[CWEScope:Access-Control,Framework:Cordova]]></tags>
    <description><![CDATA[Content Security Policy (CSP) controls which network requests (images, XHRs, etc) are
allowed to be made (via webview directly).

On Android and iOS, the network request whitelist is not able to filter all types of requests (e.g. <video> & WebSockets
are not blocked). So, in addition to the whitelist, you should use a Content Security Policy <meta> tag on all of your pages.]]></description>
    <priority>3</priority>
    <effort>2</effort>
    <vulntype>Permissions, privileges and access controls</vulntype>
    <impl>1</impl>
    <benefits><![CDATA[Improve security.]]></benefits>
    <inconvenients><![CDATA[]]></inconvenients>
    <example><![CDATA[<html> <!-- VIOLATION -->
</html>]]></example>
    <repair><![CDATA[<html>
  <meta http-equiv="Content-Security-Policy" content="default-src 'self' foo.com">
</html>]]></repair>
    <reference><![CDATA[https://cwe.mitre.org/data/definitions/358.html,https://cordova.apache.org/docs/en/8.x/reference/cordova-plugin-whitelist/#content-security-policy]]></reference>
    <normatives>
      <security><![CDATA[CWE:358,OWASP:2021:A5]]></security>
    </normatives>
    <properties/>
    <idcat>OPT.CRITERIUM_VALUE.CQM.SECURITY</idcat>
  </rule>
  <rule name="OPT.HTML.FormValidationOff" message="FormValidationOff: Form validation disabled" class="com.optimyth.html.rules.html5.security.FormValidationOff" technology="HTML" active="true">
    <tags><![CDATA[ASVS-v4.0.2:13.2.2,ASVS-v4.0.2:13.3.1,ASVS-v4.0.2:5.1.3,ASVS-v4.0.2:5.1.4,CWEScope:Availability,CWEScope:Confidentiality,CWEScope:Integrity]]></tags>
    <description><![CDATA[HTML5 offers a facility for simple (browser-side) input form validation. Input fields could be validated with certain
validation attributes (required, pattern...). Both the novalidate attribute in <form> tag, or the formnovalidate attribute
in the submit <input> element, deactivate form validation.

The rule reports any HTML5 form with validation disabled.

Please note that client-side validation is not enough to protect the web application against injection attacks, but is a convenient
mechanism for end-users to provide valid data.]]></description>
    <priority>5</priority>
    <effort>2</effort>
    <vulntype>Misconfiguration</vulntype>
    <impl>1</impl>
    <benefits><![CDATA[]]></benefits>
    <inconvenients><![CDATA[]]></inconvenients>
    <example><![CDATA[<form name="my_form" action="myform.php" novalidate="novalidate"><!-- VIOLATION -->
  Username: <input type="text" name="user_name" />
  E-mail: <input type="email" name="user_email" />
  <input type="submit" />
</form>

<form name="my_form" action="myform.php">
  Username: <input type="text" name="user_name" />
  E-mail: <input type="email" name="user_email" />
  <input type="submit" formnovalidate="formnovalidate"/><!-- VIOLATION -->
</form>]]></example>
    <repair><![CDATA[<!-- FIXED -->
<form name="my_form" action="myform.php">
  Username: <input type="text" name="user_name" required maxlength="16" pattern="[a-zA-Z][a-zA-Z0-9_]" />
  E-mail: <input type="email" name="user_email" required />
  <input type="submit" />
</form>]]></repair>
    <reference><![CDATA[http://www.w3schools.com/html5/att_form_novalidate.asp]]></reference>
    <normatives>
      <security><![CDATA[CWE:20,CWETOP25:2021:4,PCI-DSS:6.5.6]]></security>
    </normatives>
    <properties/>
    <idcat>OPT.CRITERIUM_VALUE.CQM.SECURITY</idcat>
  </rule>
  <rule name="OPT.HTML.MissingPasswordFieldMasking" message="MissingPasswordFieldMasking: Password input field is not masked" class="com.optimyth.html.rules.html5.security.MissingPasswordFieldMasking" technology="HTML" active="true">
    <tags><![CDATA[CWEScope:Access-Control,infoleak,privacy]]></tags>
    <description><![CDATA[When a form contains a password input field, the type attribute must be set to "password". Otherwise an attacker
directly or indirectly watching the user might capture it.]]></description>
    <priority>1</priority>
    <effort>2</effort>
    <vulntype>Information leaks</vulntype>
    <impl>1</impl>
    <benefits><![CDATA[]]></benefits>
    <inconvenients><![CDATA[]]></inconvenients>
    <example><![CDATA[<form id="login">
  Username: <input name="user_name" type="text"/>
  <!-- VIOLATION -->
  Password: <input name="user_password" type="text"/>
</form>]]></example>
    <repair><![CDATA[<!-- FIXED -->
<form id="login">
  Username: <input name="user_name" type="text"/>
  Password: <input name="user_password" type="password"/>
</form>]]></repair>
    <reference><![CDATA[https://cwe.mitre.org/data/definitions/549.html]]></reference>
    <normatives>
      <security><![CDATA[CWE:549]]></security>
    </normatives>
    <properties>
      <property name="pattern" descname="Pattern to use. If blank, the default pattern is used." value=""/>
    </properties>
    <idcat>OPT.CRITERIUM_VALUE.CQM.SECURITY</idcat>
  </rule>
  <rule name="OPT.HTML.PasswordInHttpGet" message="PasswordInHttpGet: Password in GET FORM" class="com.optimyth.html.rules.html5.security.PasswordInHttpGet" technology="HTML" active="true">
    <tags><![CDATA[ASVS-v4.0.2:13.1.3,ASVS-v4.0.2:3.1.1,CWEScope:Confidentiality]]></tags>
    <description><![CDATA[When GET form contains a password input field, when the form is submitted, the password is sent as a parameter,
in the query-string part of the URL in the HTTP message.

Parameters associated with HTTP GET requests are not treated as sensitive data, and web servers and intermediate proxies
may cache them or write them to a log file, and web browsers make no effort to protect such parameters.

Sending passwords (or any other sensitive information) a part of an HTTP GET request is a privacy violation
and unsafe password management.]]></description>
    <priority>1</priority>
    <effort>2</effort>
    <vulntype>Information leaks</vulntype>
    <impl>1</impl>
    <benefits><![CDATA[]]></benefits>
    <inconvenients><![CDATA[]]></inconvenients>
    <example><![CDATA[<!-- GET by default -->
<form id="renew_pass">
  <!-- VIOLATION -->
  Password: <input name="user_password" type="password"/>
  <!-- VIOLATION -->
  Confirm:  <input name="confirm_password" type="password"/>
  <input type="submit" name="action" value="Renew password">
</form>]]></example>
    <repair><![CDATA[<!-- FIXED -->
<form id="renew_pass" method="post">
  Password: <input name="user_password" type="password"/>
  Confirm:  <input name="confirm_password" type="password"/>
  <input type="submit" name="action" value="Renew password">
</form>]]></repair>
    <reference><![CDATA[https://www.vanimpe.eu/2013/10/06/password-attacks-against-http-web-forms/]]></reference>
    <normatives>
      <security><![CDATA[CWE:598,OWASP:2021:A7,PCI-DSS:6.5.3]]></security>
    </normatives>
    <properties/>
    <idcat>OPT.CRITERIUM_VALUE.CQM.SECURITY</idcat>
  </rule>
  <rule name="OPT.HTML.PathRelativeStylesheetImport" message="PathRelativeStylesheetImport: Path-Relative Stylesheet Import." class="com.optimyth.html.rules.html5.security.PathRelativeStylesheetImport" technology="HTML" active="true">
    <tags><![CDATA[ASVS-v4.0.2:5.3.3,CWEScope:AccessControl,CWEScope:Availability,CWEScope:Integrity]]></tags>
    <description><![CDATA[A Path-Relative Stylesheet Import (PRSSI) vulnerability occurs when a web application uses relative URLs for importing
CSS stylesheets. By abusing the path handling features of certain web languages and frameworks, an attacker might
perform cross-site scripting injection.

Imagine that a vulnerable page has a <link rel='stylesheet' href='style.css'> for importing a stylesheet.

An attacker may provide an extra path following the vulnerable HTML page URL, so the same page could be loaded a second time
in the context of the link, and the browser will try to parse it as a CSS stylesheet.

When the browser renders the page in quirks mode (either because of no DOCTYPE, or an old one, in the page; or
because the vulnerable page, without anti-framing measures, is loaded through iframes), a resource with invalid
content-type for a CSS (e.g. text/html) will be accepted. If the attacker can force the page to reflect content
he controls (e.g. for URL parameters or from session-stored data), he/she may succeed with the victim's browser
executing malicious CSS code. For example, @import url(//evil.com), using CSS selectors to steal CSRF tokens,
executing JavaScript code via expression() function, etc.]]></description>
    <priority>2</priority>
    <effort>2</effort>
    <vulntype>Injection</vulntype>
    <impl>1</impl>
    <benefits><![CDATA[]]></benefits>
    <inconvenients><![CDATA[]]></inconvenients>
    <example><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- Quirks mode triggered, use standard mode when possible -->

<!-- VIOLATION -->
<link href="styles/theme/print.css" rel="stylesheet" type="text/css"/>]]></example>
    <repair><![CDATA[<!DOCTYPE html>

<!-- FIXED, non-relative  -->
<link href="/myapp/styles/theme/print.css" rel="stylesheet" type="text/css"/>]]></repair>
    <reference><![CDATA[https://owasp.org/www-pdf-archive//OWASP-Ionut-Popescu-Less-Known-Web-Application-Vulnerabilities-Stripped.pdf,https://portswigger.net/research/detecting-and-exploiting-path-relative-stylesheet-import-prssi-vulnerabilities]]></reference>
    <normatives>
      <security><![CDATA[CWE:79,CWETOP25:2021:2,OWASP:2021:A3,PCI-DSS:6.5.7,WASC:08]]></security>
    </normatives>
    <properties/>
    <idcat>OPT.CRITERIUM_VALUE.CQM.SECURITY</idcat>
  </rule>
  <rule name="OPT.HTML.SandboxAllowScriptsAndSameOrigin" message="SandboxAllowScriptsAndSameOrigin: Unsafe sandbox with allow-scripts and allow-same-origin" class="com.optimyth.html.rules.html5.security.SandboxAllowScriptsAndSameOrigin" technology="HTML" active="true">
    <tags><![CDATA[ASVS-v4.0.2:5.3.6,CWEScope:Availability,CWEScope:Confidentiality,CWEScope:Integrity]]></tags>
    <description><![CDATA[In HTML5, iframe content could be sandboxed, and the developer may give the capabilities it requires
(a whitelist of capabilities that the framed content needs, specified in the iframe's sandbox attribute).
If you need to include external content in your application, sandboxing is an excelent measure (when properly set).
For example, plugins are blocked in sandbox, and that restriction cannot be lifted.

As the framed content needs certain capabilities enabled to be useful, developers must exercise due care
when choosing which sandbox restrictions to be lifted, and that the lifted restrictions are really the minimum
needed by the framed content ('principle of least-privilege').

Setting both the allow-scripts and allow-same-origin keywords together, when the embedded page
has the same origin as the page containing the iframe, allows the embedded page to simply remove
the sandbox attribute and then reload itself, effectively breaking out of the sandbox altogether.

Remember, allow-same-origin typically permits the sandboxed content to access its own DOM and originating site
(typical same-origin policy). But if the content origin is the same as your application's, and you add the
allow-scripts permission, an attacker may remove sandbox attribute and reload the content.]]></description>
    <priority>1</priority>
    <effort>3</effort>
    <vulntype>Misconfiguration</vulntype>
    <impl>1</impl>
    <benefits><![CDATA[]]></benefits>
    <inconvenients><![CDATA[]]></inconvenients>
    <example><![CDATA[<!-- VIOLATION, uploaded content may include JavaScript which is allowed to remove the sandbox attribute -->
<iframe id = 'sandboxed' sandbox = 'allow-scripts allow-same-origin' src = 'uploads/evil.html'></iframe>]]></example>
    <repair><![CDATA[<!-- option #1: place untrusted content in another domain -->
<iframe id = 'sandboxed' sandbox = 'allow-scripts allow-same-origin' src = 'https://uploads.my.org/evil.html'></iframe>

<!-- option #2: remove one of the problematic capabilities -->
<iframe id = 'sandboxed' sandbox = 'allow-scripts' src = 'uploads/evil.html'></iframe>]]></repair>
    <reference><![CDATA[https://html.spec.whatwg.org/multipage/embedded-content.html#the-iframe-element,https://www.html5rocks.com/en/tutorials/security/sandboxed-iframes/]]></reference>
    <normatives>
      <security><![CDATA[CWE:830,OWASP:2021:A8]]></security>
    </normatives>
    <properties/>
    <idcat>OPT.CRITERIUM_VALUE.CQM.SECURITY</idcat>
  </rule>
  <rule name="OPT.HTML.TargetBlankVulnerability" message="TargetBlankVulnerability: Improper Neutralization of links to external sites" class="com.optimyth.html.rules.html5.security.TargetBlankVulnerability" technology="HTML" active="true">
    <tags><![CDATA[CWEScope:Access-Control,CWEScope:Availability,CWEScope:Confidentiality,CWEScope:Integrity]]></tags>
    <description><![CDATA[When an user clicks a link to an external site, and that link has the target="_blank" attribute,
then the new site will be opened into a new tab or window, but will share its process with the original tab or window.

The window.opener object stores information from the original window, so if a malicious attacker achieves to run code into
the target site then he/she might read or modify the properties included into the window.opener object, even when the
original and the target sites have different origin.

After that, the attacker might change the original windows for a malicious copy of it, where the user can be tricked
to login, or to input his/her bank account information or some other sensitive information.]]></description>
    <priority>2</priority>
    <effort>2</effort>
    <vulntype>Injection</vulntype>
    <impl>1</impl>
    <benefits><![CDATA[Avoid malicious redirections to sites controlled by the attacker]]></benefits>
    <inconvenients><![CDATA[]]></inconvenients>
    <example><![CDATA[<a href="http://attacker-site.example.com/useful-page.html" target="_blank">    <!-- VIOLATION -->]]></example>
    <repair><![CDATA[<a href="http://attacker-site.example.com/useful-page.html" target="_blank" rel="noopener noreferrer">]]></repair>
    <reference><![CDATA[https://dev.to/ben/the-targetblank-vulnerability-by-example,https://owasp.org/www-community/attacks/Reverse_Tabnabbing,https://cwe.mitre.org/data/definitions/1022.html,https://mathiasbynens.github.io/rel-noopener/]]></reference>
    <normatives>
      <security><![CDATA[CWE:1022,OWASP:2021:A5]]></security>
    </normatives>
    <properties>
      <property name="allowedHref" descname="Separated comma list of allowed href values which, when used, exclude that element from
            being reported" value="#,javascript:void(0);"/>
    </properties>
    <idcat>OPT.CRITERIUM_VALUE.CQM.SECURITY</idcat>
  </rule>
  <categories>
    <category name="HTML" technology="HTML" active="true" weight="1.0">
      <description><![CDATA[HTML rules]]></description>
      <children>
        <category name="OPT.CRITERIUM_VALUE.CQM.EFFICIENCY" technology="HTML" active="true" weight="0.0">
          <description><![CDATA[Efficiency]]></description>
        </category>
        <category name="OPT.CRITERIUM_VALUE.CQM.MAINTAINABILITY" technology="HTML" active="true" weight="0.0">
          <description><![CDATA[Maintainability]]></description>
        </category>
        <category name="OPT.CRITERIUM_VALUE.CQM.PORTABILITY" technology="HTML" active="true" weight="0.0">
          <description><![CDATA[Portability]]></description>
        </category>
        <category name="OPT.CRITERIUM_VALUE.CQM.RELIABILITY" technology="HTML" active="true" weight="0.0">
          <description><![CDATA[Reliability]]></description>
        </category>
        <category name="OPT.CRITERIUM_VALUE.CQM.SECURITY" technology="HTML" active="true" weight="10.0">
          <description><![CDATA[Security]]></description>
        </category>
      </children>
    </category>
  </categories>
</ruleset>
