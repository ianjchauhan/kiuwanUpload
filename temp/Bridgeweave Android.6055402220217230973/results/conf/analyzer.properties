# Default encoding for source files
encoding=UTF-8

# Register source code fragments of defects found and duplicated code
dump.code=true

# Upload analyzed source code. This will enable browsing the analyzed sources files in Kiuwan
upload.analyzed.code=false

# Comma separated list of analysis steps to ignore [rules|metrics|clones|architecture|insights]
# The value of this property will always apply independently of the analysis scope
ignore=

# Comma separated list of analysis steps to ignore (applies only to deliveries) [rules|metrics|clones|architecture|insights]
# The value of this property will apply when the analysis' scope is completeDelivery or partialDelivery
ignoreOnDelivery=insights

# Default include and exclude patterns: comma-separated Ant-style patterns (empty by default).
# They could be given in command-line or checKing analyzer, these patterns are the defaults used
# when no execution-specific values provided.
# 
# Rules are:
# a) If excludes provided, any input file matching one of the patters will be ignored.
# b) If includes provided and no exclude pattern rejected the file, to be accepted input file must match at least one include pattern.
# c) If excludes provided but no explicit includes, any input file not rejected by one exclude pattern will be accepted.
# d) If includes provided with no explicit excludes, input file will be accepted only when matches at least one include pattern.
# e) If both explicit includes and excludes, excludes are checked before includes; a file will be accepted if does not match
#    any exclude pattern but matches at least one include pattern.
include.patterns=
exclude.patterns=**/src/test/**,**/__MACOSX/**,**/*.min.js,**/*.Designer.vb,**/*.designer.vb,**/*Reference.vb,**/*Service.vb,**/*Silverlight.vb,**/*.Designer.cs,**/*.designer.cs,**/*Reference.cs,**/*Service.cs,**/*Silverlight.cs,**/.*,**/Pods/BuildHeaders/**/*.h,**/Pods/Headers/**/*.h,**/node_modules/**,**/bower_components/**,**/target/**,**/bin/**,**/obj/**,**/dist/**,**/lib/**

# Timeout (in milliseconds) to use for max execution time of each analysis step. Must be between 1 minute and 96 hours.
timeout=3600000

# Current technologies supported by agent
supported.technologies=abap, actionscript, aspnet,c, cobol, cpp, csharp,go, html, informix,java, javascript, jcl, jsp,kotlin, natural,objectivec, oracleforms, other,perl, php, plsql, powerscript, python,rpg4, ruby,scala, sqlscript, swift,transactsql, vb6, vbnet, xml

# ---------JVM settings ------------
# Starting size for heap memory (128m = 128 Megabytes)
memory.start=128m

# Maximum size for heap memory (1024m = 1 Gigabyte)
memory.max=1024m

# Stack memory, per thread (1024k = 1 Megabyte)
stack.size=2048k

# --------- Monitoring -------------

# JMX listener: Provide MBeans (under com.optimyth.analysis domain) for monitoring analysis.
# If true, create JMX beans for analysis to access to management interface via JMX console.
listener.jmx.active=false

# ------------- ABAP ---------------
# If true, parses included files and injects parsed tree below include statement
abap.parse.includes=true

# Macro for resolving ABAP component file from logical name
abap.include.resolver.macro=\#name\#-include.abap

# Directory for the repository data extracted by SAP Connector
abap.repository.dir=.

# Namespaces used for custom programs, separated with commas (like KWAN,PCKG)
# Could be empty.
abap.custom.programs.namespaces=

# Comma-separated list of extensions for SAP BSP (Business Server Pages) items
abap.bsp.extensions=bsp

# Prefix for violation exclude marker in source code
abap.exclude.marker=

# ---------- ACTIONSCRIPT ----------
# Prefix for violation exclude marker in source code
actionscript.exclude.marker=

# ------------ ASPNET --------------
# If true, parses included files and injects parsed tree below include statement
aspnet.parse.includes=true

# -------------- C -----------------
# If true, conditional preprocessing directives will be evaluated. If false, they are ignored.
# Setting to false improves parsing efficiency but may produce more parsing errors
c.process.conditional.directives=true

# Resolve external macros, recursively searching for their declarations in included header files
c.process.external.macros=true

# If true, preprocessor will replace digraphs and trigraphs.
# Digraphs and trigraphs are seldom used. If your installation does not use such feature, set this property
# to false for better performance.
# See http://tigcc.ticalc.org/doc/cpp.html for full details.
c.process.alternate.tokens=false

# If true, all known macro definitions will be used when preprocessor expands macros.
# This value may increase successful parsing percentage.
# Set to false for the standard macro expansion (could low the successful parsing rate).
c.use.all.known.macros=false

# If true, included code will be added to the source parser tree.
# When active, rules will process both source code and the (recursively) included code.
# When not active, rules will process only source code, without included code (but with macros replaced).
# Parsing throughput is reduced when this flag is true. For complex code, it is recommended to deactivate the flag.
c.include.headers=false

# Set to true for parsing Pro*C/C++ SQL/PLSQL statements and build an AST node under the EXEC SQL productions
c.process.sql=false

# Error recovery. If true, syntactic errors could be recovered. If false, no error recovery is tried.
# Set to true for higher successful parsing rates.
c.error.recovery=false

# Comma-separated directories (absolute or relative to source directories) where include files could be placed
c.header.includes=

# Comma-separated header file extensions
c.header.extensions=h

# Comma-separated platforms for standard header files. Default: gcc (ANSI C headers)
c.header.platforms=gcc

# The resource where external defines (macros) are declared.
c.resource.external.defines=file\:${AGENT_HOME}/conf/cpp.macros.properties

# Prefix for violation exclude marker in source code
c.exclude.marker=

# If true, the common file extensions for C/C++ will be used to choose between C and C++ grammars.
# C, cc, cpp, cxx, CPP, c++, cp, cxx: Use C++ grammar.
# c: Use C grammar.
# For .h files, C grammar will be used.
# If false, C grammar will be used.
c.checkExtension=${cpp.checkExtension}

# -------------- CPP -----------------
# If true, conditional preprocessing directives will be evaluated. If false, they are ignored.
# Setting to false improves parsing efficiency but may produce more parsing errors
cpp.process.conditional.directives=true

# If true, the common file extensions for C/C++ will be used to choose between C and C++ grammars.
# C, cc, cpp, cxx, CPP, c++, cp, cxx: Use C++ grammar.
# c: Use C grammar.
# For .h files, C++ grammar will be used.
# If false, C++ grammar will be used.
cpp.checkExtension=true

# Resolve external macros, recursively searching for their declarations in included header files
cpp.process.external.macros=true

# If true, preprocessor will replace digraphs and trigraphs.
# Digraphs and trigraphs are seldom used. If your installation does not use such feature, set this property
# to false for better performance.
# See http://tigcc.ticalc.org/doc/cpp.html for full details.
cpp.process.alternate.tokens=false

# If true, all known macro definitions will be used when preprocessor expands macros.
# This value may increase successful parsing percentage.
# Set to false for the standard macro expansion (could low the successful parsing rate).
cpp.use.all.known.macros=false

# If true, included code will be added to the source parser tree.
# When active, rules will process both source code and the (recursively) included code.
# When not active, rules will process only source code, without included code (but with macros replaced).
# Parsing throughput is reduced when this flag is true. For complex code, it is recommended to deactivate the flag.
cpp.include.headers=false

# PRO*C/C++ extensions
cpp.proc.extensions=pc

# Set to true for parsing Pro*C/C++ SQL/PLSQL statements and build an AST node under the EXEC SQL productions
cpp.process.sql=false

# Error recovery. If true, syntactic errors could be recovered. If false, no error recovery is tried.
# Set to true for higher successful parsing rates.
cpp.error.recovery=false

# Comma-separated directories (absolute or relative to source directories) where include files could be placed
cpp.header.includes=

# Comma-separated header file extensions
cpp.header.extensions=h,hh,hpp

# Comma-separated platforms for standard header files. Default: gcc (ANSI C headers), cpp (ISO C++ headers, stdc++ and STL)
cpp.header.platforms=gcc,cpp

# The resource where external defines (macros) are declared.
cpp.resource.external.defines=file\:${AGENT_HOME}/conf/cpp.macros.properties

# Prefix for violation exclude marker in source code
cpp.exclude.marker=

# Set to true for support of Microsoft extensions for C++ (CLI and CX)
cpp.dotnet=true

# ------------ CSHARP ----------------
# Default resource with predefined C# macros. A project/quality model csharp.macros.properties metafile will be used if exists.
csharp.macroFile=file\:${AGENT_HOME}/conf/csharp.macros.properties

# If true, conditional directives in C# code will be processed.
csharp.processConditionalDirectives=true

# If true, Razor .cshtml pages will be transformed to C# source code
csharp.processCshtml=true

# Prefix for violation exclude marker in source code
csharp.exclude.marker=

# ------------- COBOL ----------------
# If true, consider input files as free-format Cobol (no left/right margins)
cobol.transform.freeform=false

# The margin format for Cobol source files. Any of autodetect, no_margin, left_margin, right_margin, both_margin, already_transformed.
# The default is autodetect, which means that the transformation will try to detect the margins used heuristically.
cobol.transform.marginType=autodetect

# If true, pre-transform Pro*Cobol files before parsing
cobol.transform.procobol=true

# If true, comments beginning at first column are allowed
cobol.transform.firstcolumncomment=false

# Number of spaces replacing first tab (default: 1).
# Cobol compilers may support a certain a tab width.
# As spaces delimit margins used in cobol formats, this may be needed for proper parsing.
cobol.transform.firstTabSpaces=1

# Tab size to be used in Pro*Cobol transformation
cobol.transform.procobol.tabsize=8

# PRO*Cobol extension (transformation will be only applied to files matching these extensions)
cobol.transform.procobol.extensions=pco

# COPY resolution strategy. One of byFile, byPatterns, byDirectories
# byFile: Resolve COPYs relative to each analyzed file
# byPatterns: Resolve COPYs by patterns relative to a list of directories (by default, code directories)
# byDirectories: Resolve COPYs in a list of directories (by default, code directories)
cobol.copyResolution=byFile

# Comma-separated COPY extensions
cobol.copyResolution.extensions=cpy,copy

# Comma-separated list of search paths for COPYs (relative to current file under analysis)
cobol.copyResolution.byFile.relativePaths=.

# Comma-separated list of Ant patterns where COPYs will be searched, relative to analysis directories
cobol.copyResolution.byPatterns.patterns=**/copy,common/copy

# When cobol.copyResolution=byDirectories, look for matching COPY in subdirectories
cobol.copyResolution.byDirectories.recurseSubdirs=true

# If true, process included COPYs, and add parsed tree of the COPY below the COPY statement node
cobol.processCOPY=true

# If true, process EXEC SQL INCLUDE and add parsed tree of the included COPY below the EXEC SQL statement node
cobol.processExecSqlInclude=false

# If true, process SQL embedded in EXEC SQL statements, and include the parsed tree below the EXEC SQL statement node
cobol.processSQL=true

# The parser to use for embedded SQL; could be sql, sqldb2, sqlinformix, or a bean id.
# If not set, use the default for SQL technology (ls_sql_parser_chooser)
cobol.sql.parser=

# If true, process CICS code embedded in EXEC CICS statements, and include the parsed tree below the EXEC CICS statement node
cobol.processCICS=true

# Prefix for violation include marker in source code, or start and end markers separated by comma.
# Note that you have to escape whitespace characters.
cobol.include.marker=

# Prefix for violation exclude marker in source code
cobol.exclude.marker=

# If true, indicates that include and exclude markers enclose generated code.
cobol.markers.enclose.generated.code=false

# Strategy to choose in multiparser mode (e.g. deterministic, smart, filepath).
cobol.parser.choose.strategy=smart

# List of parsers to use when using multiparser mode (e.g. cobolibm, cobolmicrofocus, coboltandem, acucobol, rmcobol).
cobol.parser.valid.list=cobolibm,cobolmicrofocus,coboltandem,acucobol,rmcobol

# Regexp for Cobol 85 (default) parser when multiparser mode is filepath
# Avoid overlapping between different parsers' regexp, this can lead to unpredictably behavior.
cobol.parser.filepath.cobol85.regexp=

# Regexp for IBM Cobol parser when multiparser mode is filepath
# Avoid overlapping between different parsers' regexp, this can lead to unpredictably behavior.
cobol.parser.filepath.cobolibm.regexp=

# Regexp for MicroFocus Cobol parser when multiparser mode is filepath
# Avoid overlapping between different parsers' regexp, this can lead to unpredictably behavior.
cobol.parser.filepath.cobolmicrofocus.regexp=

# Regexp for Tandem Cobol parser when multiparser mode is filepath
# Avoid overlapping between different parsers' regexp, this can lead to unpredictably behavior.
cobol.parser.filepath.coboltandem.regexp=

# Regexp for RM/COBOL parser when multiparser mode is filepath
# Avoid overlapping between different parsers' regexp, this can lead to unpredictably behavior.
cobol.parser.filepath.rmcobol.regexp=

# If true, in multiparser mode when a file full path matches a parser's regexp just that parser will be used (without retries with other parsers).
cobol.parser.filepath.exclusive=false

# If true, tokens after dot and in same line are ignored. Some cobol compilers admit this.
cobol.parser.skipTokensAfterDot=false

# Timeout, in milliseconds, for control-flow graph building.
# Some very large cobol programs may take long time to process, this limits elapsed time during CFG building to avoid analysis timeouts.
cobol.controlflow.timeout=30000

# Comma-separated list with the names of user-defined macros. For example, EAERROR, EAENVIAR...
cobol.parser.user.macros=

# Path to PlanTable resource for the execution of DB2 Cobol rules
# After the 'file:///' prefix you can either encode an absolute path or a path relative to the analysis basedir (by using the @{src.dir} pattern)
cobol.db2.plantable.path=

# Path to Catalog resource for the execution of DB2 Cobol rules
# After the 'file:///' prefix you can either encode an absolute path or a path relative to the analysis basedir (by using the @{src.dir} pattern)
cobol.db2.catalog.path=

# Format definition for Catalog resource. Check product manual documentation for further information
cobol.db2.catalog.format=

# Format definition for PlanTable resource. Check product manual documentation for further information
cobol.db2.plantable.format=

# -------------- GO ------------------
# Prefix for violation exclude marker in source code
go.exclude.marker=

# ------------ GROOVY ----------------
# Prefix for violation exclude marker in source code
groovy.exclude.marker=

# ------------- HTML -----------------
# If true, embedded JavaScript code will be parsed, and its parsed tree will be placed below container script element.
html.processJavascript=true

# Prefix for violation exclude marker in source code
html.exclude.marker=

# ----------- INFORMIX ---------------
# Prefix for violation exclude marker in source code
informix.exclude.marker=

# ------------- JAVA -----------------
# Java source code version. For example, if >= 5, enum is considered a reserved word, and annotations are supported.
java.version=8

# If true, generate java class for each JSP page and analyze it with java rules.
# If false, any JSP page is not converted to a java servlet and not analyzed under java technology.
java.processJsp=true

# Prefix for violation exclude marker in source code
java.exclude.marker=

# Semi-colon separated list of directories where to find jars and classes to compile JSP files. The paths can be absolutes
# in Windows format (C:\\jarfiles), Unix format (/jarfiles) or relatives to basedir (jarfiles)
java.JSPCompiler.classpath=

# ----------- JAVASCRIPT -------------
# JavaScript source code version (from 1.0 to 1.8, or ES6).
javascript.version=ES6

# Prefix for violation exclude marker in source code
javascript.exclude.marker=

# --------------- JCL ----------------
# Prefix for violation exclude marker in source code
jcl.exclude.marker=

# --------------- JSP ----------------
# If true, included JSPs are parsed, and parsed AST is placed below its including element
jsp.parseIncludes=true

# If true, embedded JavaScript code in script tags is parsed, and parsed AST is placed below its including script element
jsp.parseJavascript=true

# Prefix for violation exclude marker in source code
jsp.exclude.marker=

# ------------- KOTLIN ---------------
# Prefix for violation exclude marker in source code
kotlin.exclude.marker=

# ------------- NATURAL --------------
# Prefix for violation exclude marker in source code
natural.exclude.marker=

# ----------- OBJECTIVE-C ------------
# Objective-C system version to consider (optional).
# If not given, version-specific rules will be active unconditionally.
# Use macos x.y (for OS X) or ios x.y (for iOS), where x.y is the system version for analysis.
objectivec.system.version=

# Objective-C memory model for the analyzed software (optional).
# Could be ARC (for Automatic Reference Count model) or MRR (for Manual Retain/Release model).
# If not specified, rules that operate on a specific memory model will be active unconditionally.
objectivec.memory.model=ARC

# Comma-separated list of Ant patterns for files that follow the opposite memory model as the one given by objectivec.memory.model.
# Could be empty. Only considered when objectivec.memory.model is not empty.
objectivec.memory.model.exceptions=

# Prefix for violation exclude marker in source code
objectivec.exclude.marker=

# --------------- PHP ----------------
# If true, PHP included files are parsed and inserted in the AST of the includer source
php.parseIncludes=true

# Prefix for violation exclude marker in PHP source code
php.exclude.marker=

# -------------- PL/SQL --------------
# Prefix for violation exclude marker in source code
plsql.exclude.marker=

# -------------- POWERSCRIPT ---------
# If true, process embedded SQL in PowerScript statements, and include the parsed tree below the statement node
powerscript.processSQL=true

# Prefix for violation exclude marker in source code
powerscript.exclude.marker=

# -------------- PYTHON --------------
# List of parsers to use when using multiparser mode (e.g. python3, python).
python.parser.valid.list=python,python3

# Prefix for violation exclude marker in source code
python.exclude.marker=

# Strategy to choose in multiparser mode (e.g. deterministic, smart, filepath).
python.parser.choose.strategy=

# Regexp for Python (2) parser when multiparser mode is filepath
# Avoid overlapping between different parsers' regexp, this can lead to unpredictably behavior.
python.parser.filepath.python.regexp=

# Regexp for Python3 parser when multiparser mode is filepath
# Avoid overlapping between different parsers' regexp, this can lead to unpredictably behavior.
python.parser.filepath.python3.regexp=

# If true, in multiparser mode when a file full path matches a parser's regexp just that parser will be used (without retries with other parsers).
python.parser.filepath.exclusive=false

# ----------- RPG/RPG IV -------------
# If true, process embedded SQL in RPG statements, and include the parsed tree below the statement node
rpg4.processSQL=true

# Prefix for violation exclude marker in source code
rpg4.exclude.marker=

# If true, process /COPY and /INCLUDE members in RPG statements, and include the parsed tree below the Copy node
rpg4.processCopy=true

rpg4.copyExtensions=rpg,rpg4,rpgle

# How to locate /copy and /include files: byFile, byPatterns, byDirectories
rpg4.copyResolution=byFile

# Relative paths to locate included files, from includer program. When copy resolution = byFile
rpg4.copyResolution.byFile.relativePaths=.

# Comma-separated Ant patterns where COPY directories will be searched, relative to analysis directories, when copy resolution = byPatterns
rpg4.copyResolution.byPatterns.patterns=**/copy,common/copy

# When copy resolution = byDirectories, look for matching copy in analysis subdirectories
rpg4.copyResolution.byDirectories.recurseSubdirs=true

# Size of the parsed copy files cache
rpg4.copy.cache=16

# --------------- SQL ----------------
# Encoding to use for loading files with SQL code
sql.encoding=${encoding}

# Comma-separated extensions for plain SQL files
sql.plain.extensions=sql,dml

# Comma-separated list of patterns for XML files with potential embedded SQL code to process
sql.xml.patterns=*.xml,**/*.xml

# XPath expression for selecting elements with embedded SQL code. May locate attributes as well.
sql.xml.xpath=//sql | //sqlexec

# Regexp for matching properties files potentially containing SQL code
sql.properties.regexp=properties

# Strategy to choose in multiparser mode (e.g. deterministic, smart, filepath).
sql.parser.choose.strategy=

# List of parsers to use when using multiparser mode (e.g. sqldb2, sqlinformix).
sql.parser.valid.list=

# Regexp for SQL (default) parser when multiparser mode is filepath
# Avoid overlapping between different parsers' regexp, this can lead to unpredictably behavior.
sql.parser.filepath.sql.regexp=

# Regexp for SQL DB2 parser when multiparser mode is filepath
# Avoid overlapping between different parsers' regexp, this can lead to unpredictably behavior.
sql.parser.filepath.sqldb2.regexp=

# Regexp for SQL Informix parser when multiparser mode is filepath
# Avoid overlapping between different parsers' regexp, this can lead to unpredictably behavior.
sql.parser.filepath.sqlinformix.regexp=

# If true, in multiparser mode when a file full path matches a parser's regexp just that parser will be used (without retries with other parsers).
sql.parser.filepath.exclusive=false

# Prefix for violation exclude marker in source code
sql.exclude.marker=

# ----------- TRANSACT-SQL -----------
# List of parsers to use when using multiparser mode (e.g. transactsql, sybase).
transactsql.parser.valid.list=transactsql,sybase

# Strategy to choose in multiparser mode (e.g. deterministic, smart, filepath).
transactsql.parser.choose.strategy=smart

# Prefix for violation exclude marker in source code
transactsql.exclude.marker=

# Regexp for Transact SQL (default) parser when multiparser mode is filepath
# Avoid overlapping between different parsers' regexp, this can lead to unpredictably behavior.
transactsql.parser.filepath.transactsql.regexp=

# Regexp for Sybase parser when multiparser mode is filepath
# Avoid overlapping between different parsers' regexp, this can lead to unpredictably behavior.
transactsql.parser.filepath.sybase.regexp=

# If true, in multiparser mode when a file full path matches a parser's regexp just that parser will be used (without retries with other parsers).
transactsql.parser.filepath.exclusive=false

# -------------- SWIFT --------------
# Prefix for violation exclude marker in source code
swift.exclude.marker=

# If true, in multiparser mode when a file full path matches a parser's regexp just that parser will be used (without retries with other parsers).
swift.parser.filepath.exclusive=false

# --------------- VB6 ----------------
# Prefix for violation exclude marker in source code
vb6.exclude.marker=

# -------------- VB.NET --------------
# Prefix for violation exclude marker in source code
vbnet.exclude.marker=

# --------------- XML ----------------
# Prefix for violation exclude marker in source code
xml.exclude.marker=

# ---------------------
# DUPLICATIONS ANALYZER
# ---------------------

abap.min.tokens=200
abap.ignore.literals=true
abap.ignore.identifiers=false

actionscript.min.tokens=200
actionscript.ignore.literals=true
actionscript.ignore.identifiers=false

aspnet.min.tokens=200
aspnet.ignore.literals=true
aspnet.ignore.identifiers=false

c.min.tokens=200
c.ignore.literals=true
c.ignore.identifiers=false

cobol.min.tokens=200
cobol.ignore.literals=true
cobol.ignore.identifiers=false

cpp.min.tokens=200
cpp.ignore.literals=true
cpp.ignore.identifiers=false

csharp.min.tokens=200
csharp.ignore.literals=true
csharp.ignore.identifiers=false

go.min.tokens=200
go.ignore.literals=true
go.ignore.identifiers=false

html.min.tokens=200
html.ignore.literals=true
html.ignore.identifiers=false

informix.min.tokens=200
informix.ignore.literals=false
informix.ignore.identifiers=false

java.min.tokens=200
java.ignore.literals=true
java.ignore.identifiers=false

javascript.min.tokens=200
javascript.ignore.literals=true
javascript.ignore.identifiers=false

jcl.min.tokens=200
jcl.ignore.literals=true
jcl.ignore.identifiers=false

jsp.min.tokens=200
jsp.ignore.literals=true
jsp.ignore.identifiers=false

kotlin.min.tokens=200
kotlin.ignore.literals=true
kotlin.ignore.identifiers=false

natural.min.tokens=200
natural.ignore.literals=true
natural.ignore.identifiers=false

objectivec.min.tokens=200
objectivec.ignore.literals=true
objectivec.ignore.identifiers=false

oracleforms.min.tokens=200
oracleforms.ignore.literals=false
oracleforms.ignore.identifiers=false

perl.min.tokens=200
perl.ignore.literals=true
perl.ignore.identifiers=true

php.min.tokens=200
php.ignore.literals=true
php.ignore.identifiers=false

plsql.min.tokens=200
plsql.ignore.literals=false
plsql.ignore.identifiers=false

powerscript.min.tokens=200
powerscript.ignore.literals=true
powerscript.ignore.identifiers=false

python.min.tokens=200
python.ignore.literals=true
python.ignore.identifiers=false

rpg4.min.tokens=200
rpg4.ignore.literals=true
rpg4.ignore.identifiers=false

ruby.min.tokens=200
ruby.ignore.literals=true
ruby.ignore.identifiers=false

scala.min.tokens=200
scala.ignore.literals=true
scala.ignore.identifiers=false

sqlscript.min.tokens=200
sqlscript.ignore.literals=true
sqlscript.ignore.identifiers=false

swift.min.tokens=200
swift.ignore.literals=true
swift.ignore.identifiers=false

transactsql.min.tokens=200
transactsql.ignore.literals=false
transactsql.ignore.identifiers=false

vb6.min.tokens=200
vb6.ignore.literals=true
vb6.ignore.identifiers=false

vbnet.min.tokens=200
vbnet.ignore.literals=true
vbnet.ignore.identifiers=false

