{"_id":"th","_rev":"8-3758d39e799c761467a72c5e5a73589c","name":"th","description":"th.en - make it painless to adapt between callbacks and promises","dist-tags":{"latest":"0.1.1"},"versions":{"0.1.1":{"name":"th","author":{"name":"AgileMD","email":"hello@agilemd.com"},"contributors":[{"name":"jden","email":"jason@denizac.org"}],"version":"0.1.1","description":"th.en - make it painless to adapt between callbacks and promises","keywords":["promises"],"main":"index.js","scripts":{"test":"node node_modules/mocha/bin/mocha"},"repository":{"type":"git","url":"git@github.com:agilemd/then.git"},"license":"MIT","devDependencies":{"chai":"~1.6.0","mocha":"~1.9.0"},"dependencies":{"q":"~0.9.6"},"bugs":{"url":"https://github.com/agilemd/then/issues"},"_id":"th@0.1.1","dist":{"shasum":"6146a024ff311b740d2fe25a275fbbbfe27c6182","tarball":"https://registry.npmjs.org/th/-/th-0.1.1.tgz","integrity":"sha512-v9/D/sn/M2enxohxbVEwfirBouaGoK5jeP4A6bd+hF/++DVZqySChJ3YJZSVoya8w0XP3Od7omGocp0+1LOxBQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCdnpIZgVw8+j0Zae9/u37NI5inLBn6IM/pUDoNt2qjFQIhAJJL3IGIkaUlxSxMSPgceRfL6qdbhorDOM9DPVCp0QJp"}]},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"jden","email":"jason@denizac.org"},"maintainers":[{"name":"jden","email":"jason@denizac.org"}],"directories":{}}},"readme":"# then\nmake it painless to adapt between callbacks and promises\n\n## usage\n\n`then` is like a magic portal to warp between Promised land and the firey depths of Callback hell.\n\n\n```js\nvar then = require('th')\nvar fs = require('fs')\n\nfs.readFile('./tmp', then())\nthen(function (file) {\n  console.log('file')\n}, function (err) {\n  console.log('errors!', err)\n})\n\n// although you may want to be using streaming file methods, anyhow\n\n```\n\nWhen we invoke `then()` the first time, it creates a callback to give to `fs.readFile`. When we call it the next time, it's like a Promises/A+ `then` method.\n\nImportantly, there are times when we want to go back from a chain of promises to a callback:\n\n```js\nfunction (err, nextCb) {\n  if (err) { return nextCb(err) }\n  var promise = myPromise()\n    .then(someStep)\n    .then(oneMoreThing)\n\n  then.callback(promise, nextCb)\n}\n```\n\n\n## api\n\n### `then : () => Promise | (resolved: Function, rejected: Function) => Promise`\nSee usage note above for behavior.\n\n### `then.callback(Promise<T>, Callback<T>) => void`\nRegisters the `callback` as a handler for promise `resolve` and `reject` events.\n\n\n## installation\n\n    $ npm install th\n\n\n## running the tests\n\nFrom package root:\n\n    $ npm install\n    $ npm test\n\n\n## contributors\n\n- jden <jason@denizac.org>\n\n\n## license\nMIT. (c) MMXIII AgileMD http://agilemd.com\n","maintainers":[],"time":{"modified":"2022-06-27T05:54:01.170Z","created":"2013-08-19T22:22:46.933Z","0.1.1":"2013-08-19T22:22:48.373Z"},"author":{"name":"AgileMD","email":"hello@agilemd.com"},"repository":{"type":"git","url":"git@github.com:agilemd/then.git"},"keywords":["promises"],"contributors":[{"name":"jden","email":"jason@denizac.org"}],"bugs":{"url":"https://github.com/agilemd/then/issues"},"license":"MIT","readmeFilename":"README.md"}