{"_id":"filestack","_rev":"1-dd9ef1ffb3d09526f605ab2c820c0252","name":"filestack","dist-tags":{"latest":"1.0.2"},"versions":{"1.0.2":{"name":"filestack","version":"1.0.2","description":"Angular module for filestack-js","scripts":{"ng":"ng","start":"ng serve","build":"ng build filestack-angular","test":"ng test filestack-angular --watch=false","test:watch":"ng test filestack-angular","lint":"ng lint","e2e":"ng e2e","release":"ng test filestack-angular --watch=false && ng build filestack-angular && standard-version","publishS3":"npx webpack","publish":"cd dist/filestack-angular/ && npm publish"},"dependencies":{"@angular/common":"~8.0.0","@angular/compiler":"~8.0.0","@angular/core":"~8.0.0","@angular/platform-browser":"~8.0.0","@angular/platform-browser-dynamic":"~8.0.0","rxjs":"~6.4.0","tslib":"^1.9.0","zone.js":"~0.9.1","filestack-js":"3.x.x"},"devDependencies":{"@angular-devkit/build-angular":"^0.803.22","@angular-devkit/build-ng-packagr":"^0.803.22","@angular/cli":"~8.0.2","@angular/compiler-cli":"~8.0.0","@angular/language-service":"~8.0.0","@types/jasmine":"~3.3.8","@types/jasminewd2":"~2.0.3","@types/node":"~8.9.4","codelyzer":"^5.0.0","jasmine-core":"~3.4.0","jasmine-spec-reporter":"~4.2.1","karma":"~4.4.1","karma-chrome-launcher":"~2.2.0","karma-coverage-istanbul-reporter":"~2.0.1","karma-jasmine":"~2.0.1","karma-jasmine-html-reporter":"^1.4.0","ng-packagr":"^5.1.0","protractor":"~5.4.0","standard-version":"^6.0.1","ts-node":"~7.0.0","tsickle":"^0.35.0","tslint":"~5.15.0","typescript":"~3.4.3","webpack":"^4.37.0","webpack-cli":"^3.3.6","webpack-s3-plugin":"^1.0.3"},"repository":{"type":"git","url":"git+https://github.com/filestack/filestack-angular.git"},"gitHead":"2232a92af34d87576e21aeaf6d2434cb626b6184","bugs":{"url":"https://github.com/filestack/filestack-angular/issues"},"homepage":"https://github.com/filestack/filestack-angular#readme","_id":"filestack@1.0.2","_nodeVersion":"13.8.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-zS4K5q6CjmlWF4Tx/5XutrzHL0lhK94oTFS2NM3Au6iKC2buHGpjnGRD4NM//9HmkZi3qveuUQvordsAVkuL/Q==","shasum":"0c9d80a3a80882dc9c8e25ab6b334995ea1c4bc7","tarball":"https://registry.npmjs.org/filestack/-/filestack-1.0.2.tgz","fileCount":46,"unpackedSize":79870,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeYiiKCRA9TVsSAnZWagAA8CwQAI56R6bUxOBGZwP0FN/V\nwNEWzAhoOkjV+NdXIKhhQ34TzONS1/j/giOO52ZMvgu/0ifZg0UWQt/STY+9\nahztzK9tofCzBPvptWcLLicXtAvLdRaX5Yr2PGfUD0Y00Ah3IfGfNARJv5tm\niE/BwGzx9iLo+4owI9vCM17FJX/UfkMiqwMNGwzr2wrVL9xvdmGzsdA02n5K\n2FQD+SsxRVJ7hpwYMuWfPI5kq/ElgYHhKsVgrlDg1W5vNLoDI5jFjd81PzSE\nx6hZ1GzEeM0en/GXojdzR5e5tVuiTTwlCr/6XGGEbp1PwbPm28OCHdLlprjc\nNHSwbqmcnQTkYfAtyuSUkk2vefMADYd+MdnTy2OstBKAjRAN8ftKqrwavw0o\nzopory1kBOfwFd06VyCjkXNyDm7nfGqAdTQmt7Z+V+EyNKUawSUuydJR/VhH\nzRF2pj5KqaAFDiOucvekOLVdRXeSrhCrr8xcUKhvh/eoo/mtY2fI4722whLA\n5LNBEc1lL00yQMZcYg5UgckMwj9MnUe3IVSn8jcMzCLTi9Gvw8FaCxC81txC\nPu99NMHvt4KBPaBUm3l4xtAXmFNlgN+e7XUah75AqJz0DKW+Kz4oWzjOyfsr\n0dKEs5CVVHASrdmaF1mT+WMR2caAobtyGtYhUrZ9phzECgzOHIIB6l4TuDOy\nrU50\r\n=NJ+b\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEX+vUpjegOLgGtuj5j7+MBg9efpctCPCQVwfp4udzDuAiBR90pu0G529ZzC2UK+qoVlP7/X0cXqc3bP9Dn6lmCW8g=="}]},"maintainers":[{"name":"mowilimi","email":"kamilll.grabowski@gmail.com"}],"_npmUser":{"name":"mowilimi","email":"kamilll.grabowski@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/filestack_1.0.2_1583491210335_0.22188341399145584"},"_hasShrinkwrap":false}},"time":{"created":"2020-03-06T10:40:10.334Z","1.0.2":"2020-03-06T10:40:10.501Z","modified":"2022-05-02T10:01:49.902Z"},"maintainers":[{"name":"mowilimi","email":"kamilll.grabowski@gmail.com"}],"description":"Angular module for filestack-js","homepage":"https://github.com/filestack/filestack-angular#readme","repository":{"type":"git","url":"git+https://github.com/filestack/filestack-angular.git"},"bugs":{"url":"https://github.com/filestack/filestack-angular/issues"},"readme":"<p align=\"center\"><img src=\"logo.svg\" align=\"center\" width=\"80\"/></p>\n<h1 align=\"center\">\n  filestack-angular\n</h1>\n<p align=\"center\">\n  Angular component library which allow you to easily integrate powerful filestack-api into your app.\n</p>\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/filestack/filestack-angular\">\n    <img src=\"https://travis-ci.org/filestack/filestack-angular.svg?branch=master\" />\n  </a>\n  <a href=\"https://www.npmjs.com/package/@filestack/angular\">\n    <img src=\"https://img.shields.io/npm/v/@filestack/angular.svg\" />\n  </a>\n  <img src=\"https://img.shields.io/bundlephobia/min/@filestack/angular.svg\" />\n  <br>\n  <img src=\"https://badges.herokuapp.com/browsers?labels=none&googlechrome=latest&firefox=latest&microsoftedge=latest&iexplore=11&safari=latest&iphone=latest\" />\n</p>\n<hr>\n\n**Table of Contents**\n- [Overview](#overview)\n- [Usage](#usage)\n  - [Installation](#installation)\n  - [CDN](#cdn)\n  - [Available inputs](#available-inputs)\n  - [Available outputs](#available-outputs)\n  - [FilestackService](#FilestackService)\n  - [Examples](#examples)\n- [Documentation](#documentation)\n- [Development](#development)\n- [Contributing](#contributing)\n\n## Overview\nfilestack-angular is a wrapper on [filestack-js](https://github.com/filestack/filestack-js) sdk which allow you to integrate with Filestack service in just a few lines of code. Almost all you are able to do with [filestack-js](https://filestack.github.io/filestack-js/index.html) you can also do using this component.\n\nThis repository a contains angular workspace with two projects:\n- `filestack-angular` library which contains `FilestackAngularModule` published via npm\n- `example` angular app to show examples of using `FilestackModule` features\n\n`FilestackAngularModule` consists of \n- **FilestackService** - wrapper for a filestack-js client class with added support for an observables\n- **FilestackTransformPipe** - Pipe for easily creating url with [transformations](https://www.filestack.com/docs/api/processing/)  in your template\n- **PickerOverlayComponent** - Filestack picker component that will open in overlay mode\n- **PickerInlineComponent** - Filestack picker component that will open in a provided html container\n- **PickerDropPaneComponent** - Filestack drop pane component that will open in a provided html container\nwhich can be also used independently if needed\n\n## Usage\n### Installation\nInstall it through NPM\n```bash\nnpm install filestack-js\nnpm install @filestack/angular\n```\nInclude ```FilestackModule``` in ```app.module.ts```\n```javascript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { FilestackModule } from '@filestack/angular';\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FilestackModule\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\nUse in .html file\n```html\n<ng-picker-overlay\n  apikey=\"YOUR_API_KEY\">\n</ng-picker-overlay>\n```\n### CDN\nThe compiled filestack angular module is also available through our cdn\n```\nhttps://static.filestackapi.com/filestack-angular/{MODULE_VERSION}/filestack-angular.umd.min.js\n```\nand map file to module\n```\nhttps://static.filestackapi.com/filestack-angular/{MODULE_VERSION}/filestack-angular.umd.min.js.map\n```\nwhere {MODULE_VERSION} is desired version of this package\n### Available inputs\n| Name                       | Type                                                                                  | Required                                            | Default  | Description                                                                                             |\n|----------------------------|---------------------------------------------------------------------------------------|-----------------------------------------------------|----------|---------------------------------------------------------------------------------------------------------|\n| apikey                     | String                                                                                | True                                                |          | Filestack api key                                                                                       |\n| options                    | Object                                                                                |                                                     |          | Check [pickerOptions](https://filestack.github.io/filestack-js/interfaces/pickeroptions.html)             |\n| clientOptions.cname        | String                                                                                |                                                     |          | Check [cname](https://filestack.github.io/filestack-js/interfaces/clientoptions.html#cname)               |\n| clientOptions.security     | Object([Security](https://filestack.github.io/filestack-js/interfaces/security.html))   |                                                     |          | Check [security](https://filestack.github.io/filestack-js/interfaces/clientoptions.html#security)         |\n| clientOptions.sessionCache | Boolean                                                                               |                                                     |          | Check [sessionCache](https://filestack.github.io/filestack-js/interfaces/clientoptions.html#sessioncache) |\n| file                        | [InputFile](https://filestack.github.io/filestack-js/globals.html#inputfile)       |     |                                                     |          | Use it to insert a file object for 'upload' action                                                                  |\n| source                     | String                                                                                |                                                     |          | Filestack handle or external url. Use it for 'transform', 'remove', 'metadata' or 'preview' action      |\n\n### Available outputs\n| Name                       | Type                                                                                  | Required | Default  | Description                                                                                                                                        |\n|----------------------------|---------------------------------------------------------------------------------------|----------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------|\n| uploadSuccess              | Subject<PickerResponse>                                                               |          |          | A subject that emits on uploadSuccess event                                                                                                              |\n| uploadError                | Subject<FilestackError>                                                               |          |          | A subject that emits on uploadError event   \n\n### FilestackService\nThe `FilestackService` is an adapter on filestack-js [client class](https://filestack.github.io/filestack-js/classes/client.html)\nand allows you to work with Observables instead of promises. \nMethods get the same input params as client class method.\n\n| method            | return                                                                                    | description                                                                  |\n|-------------------|-------------------------------------------------------------------------------------------|------------------------------------------------------------------------------|\n| init              | void                                                                                      | Init filestack client with your apikey                                        |\n| picker            | [PickerInstance](https://filestack.github.io/filestack-js/interfaces/pickerinstance.html)   | Open or close picker instance                                                |\n| transform         | string                                                                                    | Create a transformation url                                                  |\n| retrieve          | Observable                                                                                | Retrieve an info about a filestack handle                                     |\n| metadata          | Observable                                                                                | Access files via their Filestack handles                                      |\n| storeURL          | Observable                                                                                | Get info about a filestack handle metadata                                    |\n| upload            | Observable                                                                                | Upload a file to the Filestack                                                |\n| remove            | Observable                                                                                | Remove a file from the Filestack                                              |\n| removeMetadata    | Observable                                                                                | Remove a file only from the Filestack system. The file remains in storage.     |\n| preview           | HTMLIFrameElement | Window                                                                | Get preview of uploaded file (need additional addon in your Filestack account)|\n| logout            | Observable                                                                                | Clear cloud session from picker procviders                                   |\n| setClientInstance | [ClientInstance](https://filestack.github.io/filestack-js/classes/client.html)              | Put an existing client instance into filestack service                        |\n\n### Examples\nBelow you can find some basic examples.\n\nYou can also find and try these examples in `angular-filestack-example` app\n\nTo run it locally type\n\n```\nng serve filestack-angular-example\n```\nthen visit\n\n```\nhttp://localhost:4200/\n```\n\n#### Open picker directly after component initialization\n\n`component.ts`\n```typescript\nexport class AppComponent implements OnInit {\n  apikey: string;\n\n  ngOnInit() {\n    this.apikey = 'YOUR_API_KEY';\n  }\n}\n```\n\n`component.html`\n```html\n<ng-picker-overlay\n  [apikey]=\"apikey\">\n</ng-picker-overlay>\n```\n\n#### Open picker by clicking the custom button\n\n`component.ts`\n```typescript\nexport class AppComponent implements OnInit {\n  apikey: string;\n\n  ngOnInit() {\n    this.apikey = 'YOUR_API_KEY';\n    this.onSuccess = (res) => console.log('###onSuccess', res);\n    this.onError = (err) => console.log('###onErr', err);\n  }\n\n  onUploadSuccess(res: object) {\n    console.log('###uploadSuccess', res);\n  }\n\n  onUploadError(err: any) {\n    console.log('###uploadError', err);\n  }\n}\n```\n\n`component.html`\n```html\n<ng-picker-overlay\n  [apikey]=\"apikey\"\n  (uploadSuccess)=\"onUploadSuccess($event)\"\n  (uploadError)=\"onUploadError($event)\">\n  <button>Open picker</button>\n</ng-picker-overlay>\n```\n#### Open picker in inline mode\n\n`component.ts`\n```typescript\nexport class AppComponent implements OnInit {\n  apikey: string;\n\n  ngOnInit() {\n    this.apikey = 'YOUR_API_KEY';\n  }\n\n  onUploadSuccess(res: object) {\n    console.log('###uploadSuccess', res);\n  }\n\n  onUploadError(err: any) {\n    console.log('###uploadError', err);\n  }\n}\n```\n\n`component.html`\n```html\n<ng-picker-inline\n  [apikey]=\"apikey\"\n  (uploadSuccess)=\"onUploadSuccess($event)\"\n  (uploadError)=\"onUploadError($event)\">\n  <button>Open picker</button>\n</ng-picker-inline>\n```\n\n#### Open picker in drop pane mode\n\n`component.ts`\n```typescript\nexport class AppComponent implements OnInit {\n  apikey: string;\n\n  ngOnInit() {\n    this.apikey = 'YOUR_API_KEY';\n  }\n\n  onUploadSuccess(res: object) {\n    console.log('###uploadSuccess', res);\n  }\n\n  onUploadError(err: any) {\n    console.log('###uploadError', err);\n  }\n}\n```\n\n`component.html`\n```html\n<ng-picker-drop-pane\n  [apikey]=\"apikey\"\n  (uploadSuccess)=\"onUploadSuccess($event)\"\n  (uploadError)=\"onUploadError($event)\">\n</ng-picker-drop-pane>\n```\n#### Get transformed url using filestackTransform pipe\n\n`component.ts`\n```typescript\n...\nimport { TransformOptions } from 'filestack-js';\n\nexport class AppComponent implements OnInit {\n  transformOptions: TransformOptions;\n\n  constructor(private filestackService: FilestackService) {}\n\n  ngOnInit() {\n    this.transformOptions = {\n      resize: {\n        width: 400\n      },\n      sepia: {\n        tone: 80\n      }\n    }\n  }\n}\n```\n\n`component.html`\n```html\n  <img src=\"{{'5aYkEQJSQCmYShsoCnZN' | filestackTransform: transformOptions}}\">\n```\n#### Select file and upload using sdk client.upload()\n\n`component.ts`\n```typescript\nexport class AppComponent implements OnInit {\n  file: any;\n\n  constructor(private filestackService: FilestackService) {}\n\n  ngOnInit() {\n    this.filestackService.init('YOUR_API_KEY'); \n  }\n  fileChanged(e) {\n    this.file = e.target.files[0];\n  }\n  uploadFile() {\n    this.filestackService.upload(this.file)\n      .subscribe(res => console.log(res));\n  }\n}\n```\n\n`component.html`\n```html\n  <input type='file' (change)=\"fileChanged($event)\">\n  <button (click)=\"uploadFile()\">Upload file</button>\n```\n\n## Documentation\nYou can find necessary info about avalaible options for actions (Client class methods) at https://filestack.github.io/filestack-js/\n\n## Development\nAfter adding changes to `FilestackAngularModule` in /projects/filestack-angular/src \n\nyou need to build this module\n\n```\nng build filestack-angular\n```\n\nthis command will produce /dist which conatins ready to use filestack module\n\nyou can check correctness of it by checking examples from `example` app:\n\n1. Update api key in `/projects/example/src/app/app.component.ts`\n\n2. start app locally\n```\nng serve example\n```\n3. visit [http://localhost:4200/](http://localhost:4200/)\n\n## Contributing\nAny of your contributions or ideas are more than welcome. Please consider that we follow the conventional commits specification to ensure consistent commit messages and changelog formatting.","readmeFilename":"README.md"}