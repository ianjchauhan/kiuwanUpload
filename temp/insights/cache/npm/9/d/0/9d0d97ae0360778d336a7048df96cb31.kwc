{"_id":"ug","_rev":"10-1b4a120bbd4eb8907b8d7e6906d55fae","name":"ug","description":"UnitGraph - Lightweight Graph Library for iojs","dist-tags":{"latest":"0.0.8"},"versions":{"0.0.0":{"name":"ug","version":"0.0.0","description":"UnitGraph - Graph Library for nodejs","author":{"name":"Keith Horwood"},"main":"module.js","engines":{"iojs":"2.2.1"},"dependencies":{},"devDependencies":{"chai":"~2.3.0","mocha":"~2.2.4"},"scripts":{"test":"mocha ./test/runner.js --harmony_classes","check":"node ./test/check.js --harmony_classes"},"license":"MIT","_id":"ug@0.0.0","_shasum":"ffe0626b7ba23415a167ccebc42562e430aaf1d5","_from":".","_npmVersion":"2.11.0","_nodeVersion":"2.2.1","_npmUser":{"name":"keithwhor","email":"keithwhor@gmail.com"},"maintainers":[{"name":"keithwhor","email":"keithwhor@gmail.com"}],"dist":{"shasum":"ffe0626b7ba23415a167ccebc42562e430aaf1d5","tarball":"https://registry.npmjs.org/ug/-/ug-0.0.0.tgz","integrity":"sha512-zxAd6S+mn2apJ5rE++/jnVle6KOJksVpTBpoyM8FEpsXsZwt1DtGAW4OYa0rXFsB31HfBpQ8beSPQKuKQ9mXlA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAqOjM4bP46v2KkZ98tL73/U8GXZkcTaEHOLJWJb3KZBAiEAmyd8EOmgczbgfz1yxrQm9J+lPcZNW78FR/VdWXiQEQQ="}]}},"0.0.1":{"name":"ug","version":"0.0.1","description":"UnitGraph - Graph Library for nodejs","author":{"name":"Keith Horwood"},"main":"module.js","engines":{"iojs":"2.2.1"},"dependencies":{},"devDependencies":{"chai":"~2.3.0","mocha":"~2.2.4"},"scripts":{"test":"mocha ./test/runner.js --harmony_classes","check":"node ./test/check.js --harmony_classes"},"license":"MIT","gitHead":"4a58ccfe46bab0f9a18b49d2abaccc08827a9016","_id":"ug@0.0.1","_shasum":"463b014911ac485c5476a9968164d3bb75e68c1b","_from":".","_npmVersion":"2.11.0","_nodeVersion":"2.2.1","_npmUser":{"name":"keithwhor","email":"keithwhor@gmail.com"},"maintainers":[{"name":"keithwhor","email":"keithwhor@gmail.com"}],"dist":{"shasum":"463b014911ac485c5476a9968164d3bb75e68c1b","tarball":"https://registry.npmjs.org/ug/-/ug-0.0.1.tgz","integrity":"sha512-zn6PjbPjhSy4dPOOY1WnwpixCmC8ohIgrpuRKeW5EBGlFh01DAywohq8LmhrnE1/RKeemjPoADAmdDP3Y1heSw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDulUMsx0wjV766NwFycy9nljZHYbqKYT0YFKJe69ODigIhAJ0MXM8x/o7lb5e5ptIjyJf1I8Jaax3UkcgtBVfNlXd2"}]}},"0.0.2":{"name":"ug","version":"0.0.2","description":"UnitGraph - Graph Library for nodejs","author":{"name":"Keith Horwood"},"main":"module.js","engines":{"iojs":"2.2.1"},"dependencies":{},"devDependencies":{"chai":"~2.3.0","mocha":"~2.2.4"},"scripts":{"test":"mocha ./test/runner.js --harmony_classes","check":"node ./test/check.js --harmony_classes"},"license":"MIT","gitHead":"a444957753ae9846b452c298900a42ada54eb47c","_id":"ug@0.0.2","_shasum":"8ed67ff3a37d05895cce38ee34de488334461f20","_from":".","_npmVersion":"2.11.0","_nodeVersion":"2.2.1","_npmUser":{"name":"keithwhor","email":"keithwhor@gmail.com"},"maintainers":[{"name":"keithwhor","email":"keithwhor@gmail.com"}],"dist":{"shasum":"8ed67ff3a37d05895cce38ee34de488334461f20","tarball":"https://registry.npmjs.org/ug/-/ug-0.0.2.tgz","integrity":"sha512-5M6oT5/X3oXxGppw4e4OyqnOw5V8x06OcmE7U4qeRiiUT6k92SgPJLczUSJUZVFkt8dr2svMTN+zdQSgUgg7rQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGDUONcgrweAG2AuqQ3OpJMx66Q4x5lRvB2cjKY/N0TVAiAAqGCPK4dgJPTe7mNbGV02awT3Kaj7RrL8obpDlrWRJQ=="}]}},"0.0.3":{"name":"ug","version":"0.0.3","description":"UnitGraph - Graph Library for nodejs","author":{"name":"Keith Horwood"},"main":"module.js","engines":{"iojs":"2.2.1"},"dependencies":{},"devDependencies":{"chai":"~2.3.0","mocha":"~2.2.4"},"scripts":{"test":"mocha ./test/runner.js --harmony_classes","check":"node ./test/check.js --harmony_classes"},"license":"MIT","gitHead":"b5653b0d1236a46d286f6f5879da6fad704ff068","_id":"ug@0.0.3","_shasum":"8bfd91547b33ecba86977fa152fe6b8527f5fbeb","_from":".","_npmVersion":"2.11.0","_nodeVersion":"2.2.1","_npmUser":{"name":"keithwhor","email":"keithwhor@gmail.com"},"maintainers":[{"name":"keithwhor","email":"keithwhor@gmail.com"}],"dist":{"shasum":"8bfd91547b33ecba86977fa152fe6b8527f5fbeb","tarball":"https://registry.npmjs.org/ug/-/ug-0.0.3.tgz","integrity":"sha512-Fier6GLZfEQavo5vB1L8eGVw/TsYJ1XkfeL2w16RGC8vwRzeXA2Mozfmnq6nKm2iEbF5wiCHesJA5soZ8VAQzg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDKOc4clbEb5ij+m80iXpV0uYJwSUmHGxF3k8p67FHJSAIgX5+xOZSE2XdFaeCICdCPgaxC8JygMmuQc+pE9NbVLYA="}]}},"0.0.4":{"name":"ug","version":"0.0.4","description":"UnitGraph - Graph Library for nodejs","author":{"name":"Keith Horwood"},"main":"module.js","engines":{"iojs":"2.2.1"},"dependencies":{},"devDependencies":{"chai":"~2.3.0","mocha":"~2.2.4"},"scripts":{"test":"mocha ./test/runner.js --harmony_classes","check":"node ./test/check.js --harmony_classes"},"license":"MIT","gitHead":"86c6587de796877e0eabda7e5e557ff71c79b0b0","_id":"ug@0.0.4","_shasum":"e551b9c89f6d75f108f6252b191978bb2c203687","_from":".","_npmVersion":"2.11.0","_nodeVersion":"2.2.1","_npmUser":{"name":"keithwhor","email":"keithwhor@gmail.com"},"maintainers":[{"name":"keithwhor","email":"keithwhor@gmail.com"}],"dist":{"shasum":"e551b9c89f6d75f108f6252b191978bb2c203687","tarball":"https://registry.npmjs.org/ug/-/ug-0.0.4.tgz","integrity":"sha512-PZrN0EeKpKbQ0EEjaKtrjd/11HSO/BaIUp38hOYGeo1AggPMankqkWj3mSJhntVHejdcmyBRVU/eZmRxCNYJhw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCyeSId1fjd8netn09VlcDoFFOsBln6pMTruRETYeERXgIhAPWDmruTR7p5iuEI0PcxCMSrA6qJ9diwDmF7CJPDJOlA"}]}},"0.0.5":{"name":"ug","version":"0.0.5","description":"UnitGraph - Graph Library for nodejs","author":{"name":"Keith Horwood"},"main":"module.js","engines":{"iojs":"2.2.1"},"dependencies":{},"devDependencies":{"chai":"~2.3.0","mocha":"~2.2.4"},"scripts":{"test":"mocha ./test/runner.js --harmony_classes","check":"node ./test/check.js --harmony_classes"},"license":"MIT","gitHead":"7d88f0ba5b603bdc691be87a5f69ac331ea47664","_id":"ug@0.0.5","_shasum":"700a7e0ffd358ce8afe6df2797cca543689d56a0","_from":".","_npmVersion":"2.11.0","_nodeVersion":"2.2.1","_npmUser":{"name":"keithwhor","email":"keithwhor@gmail.com"},"maintainers":[{"name":"keithwhor","email":"keithwhor@gmail.com"}],"dist":{"shasum":"700a7e0ffd358ce8afe6df2797cca543689d56a0","tarball":"https://registry.npmjs.org/ug/-/ug-0.0.5.tgz","integrity":"sha512-JJHllyNktEKmDvbPw6ESbUSVr0mgBJzxCFBwqIiFeBMMoUMjDZkmipZJIRA7/Au/D1yjhVdAsn9FE8CSd1qwHQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDgq6H09gQG5pNV/rDv1qBoHNmhVodhZF1sme4mnCUXLAIgesYkoryLT/lOP9Kymue6MeJPRCI68mG8U14xHoaF4JE="}]}},"0.0.7":{"name":"ug","version":"0.0.7","description":"UnitGraph - Lightweight Graph Library for iojs","author":{"name":"Keith Horwood"},"main":"module.js","engines":{"iojs":"2.2.1"},"dependencies":{},"devDependencies":{"chai":"~2.3.0","mocha":"~2.2.4"},"scripts":{"test":"mocha ./test/runner.js --harmony_classes","check":"node ./test/check.js --harmony_classes"},"repository":{"type":"git","url":"git+https://github.com/keithwhor/UnitGraph.git"},"license":"MIT","gitHead":"a8393082743e6dce13ef59a12b344854bd22a133","bugs":{"url":"https://github.com/keithwhor/UnitGraph/issues"},"homepage":"https://github.com/keithwhor/UnitGraph#readme","_id":"ug@0.0.7","_shasum":"4f879e5123cee060610edbc4ae9539aa26548b00","_from":".","_npmVersion":"2.11.0","_nodeVersion":"2.2.1","_npmUser":{"name":"keithwhor","email":"keithwhor@gmail.com"},"maintainers":[{"name":"keithwhor","email":"keithwhor@gmail.com"}],"dist":{"shasum":"4f879e5123cee060610edbc4ae9539aa26548b00","tarball":"https://registry.npmjs.org/ug/-/ug-0.0.7.tgz","integrity":"sha512-ERnSHHerpdT3qTTVthr/tunP/Gus6eGxCQMb/sjcXJDP3Z990RBu0YC7z61SyZdftd10ASxyL9PmgpYvcIRhfQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGEWHJKnrRuztd6USrcRWkSOHR53oku2GQY5zpPp1BIQAiEAjT3IiuPLtIR93xYVrfrzMmN05S8IapJEW08z7FbMztI="}]}},"0.0.8":{"name":"ug","version":"0.0.8","description":"UnitGraph - Lightweight Graph Library for iojs","author":{"name":"Keith Horwood"},"main":"module.js","engines":{"iojs":"2.2.1"},"dependencies":{},"devDependencies":{"chai":"~2.3.0","mocha":"~2.2.4"},"scripts":{"test":"mocha ./test/runner.js --harmony_classes","check":"node ./test/check.js --harmony_classes"},"repository":{"type":"git","url":"git+https://github.com/keithwhor/UnitGraph.git"},"license":"MIT","gitHead":"bcef9248ca0f61828c6edd3673aeff08dbe832cb","bugs":{"url":"https://github.com/keithwhor/UnitGraph/issues"},"homepage":"https://github.com/keithwhor/UnitGraph#readme","_id":"ug@0.0.8","_shasum":"8b558b3f6ae3dde684fcce7a2ccbfb08d48606a9","_from":".","_npmVersion":"2.11.0","_nodeVersion":"2.2.1","_npmUser":{"name":"keithwhor","email":"keithwhor@gmail.com"},"maintainers":[{"name":"keithwhor","email":"keithwhor@gmail.com"}],"dist":{"shasum":"8b558b3f6ae3dde684fcce7a2ccbfb08d48606a9","tarball":"https://registry.npmjs.org/ug/-/ug-0.0.8.tgz","integrity":"sha512-ZrvNBgy8/vT0NQIGJznDrRKBr0iPkgVMnR5xM3iXcwnd+1WIR357NfR+dqdafijIrO0IvN6a8s6wW1g1uszxpw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDmjOH2mLpKkZdc1eUjWhAT1GuSNJ9NHmbH//pLzli5fgIgao3gjwC+3uqqdXXvReRbI7HfkNme+OmQvk4eAYh7cig="}]}}},"readme":"# UnitGraph\n\n[![Build Status](https://travis-ci.org/keithwhor/UnitGraph.svg?branch=master)](https://travis-ci.org/keithwhor/UnitGraph)\n\nUnitGraph is a simple Graph traversal library for io.js. It is intended for\nquick, synchronous in-memory traversals including route tracing and finding\nclosest nodes to a target.\n\n## Installation\n\nUnitGraph is available via npm. Simply run `npm install ug` and then:\n\n```javascript\nlet ug = require('ug');\n```\n\nTo use the package. :)\n\n## Examples\n\n### Find all nodes of type 'person' with name matching 'ae'\n\n```javascript\nlet ug = require('ug');\nlet graph = new ug.Graph();\n\ngraph.createNode('person', {name: 'Rachael'});\ngraph.createNode('person', {name: 'Stephanie'});\ngraph.createNode('person', {name: 'Michael'});\ngraph.createNode('person', {name: 'Donovan'});\n\ngraph.nodes('person').query().filter({name__ilike: 'ae'}).units();\n\n// [ Node (person {name: Rachael}), Node (person {name: Michael}) ]\n```\n\n### Find the shortest path between two nodes\n\n```javascript\nlet ug = require('ug');\nlet graph = new ug.Graph();\n\nlet civilian = graph.createNode('person', {name: 'Clark Kent'});\nlet superman = graph.createNode('superhero', {name: 'Superman'});\ngraph.createEdge('wears_glasses').link(superman, civilian);\n\ngraph.trace(\n  graph.nodes('person').query().filter({name: 'Clark Kent'}).first(),\n  graph.nodes('superhero').query().filter({name: 'Superman'}).first()\n);\n// Path: Node (person {name: \"Clark Kent\"}) << Edge (wears_glasses {}) << Node (superhero {name: 'Superman'})\n```\n\n### Find all closest nodes, ordered by distance, of a certain type\n\n```javascript\nlet ug = require('ug');\nlet graph = new ug.Graph();\n\nlet classification = graph.createNode('classification', {name: 'Sharing Economy'});\n\nlet corps = {\n  uber: graph.createNode('corporation', {name: 'Uber'}),\n  storefront: graph.createNode('corporation', {name: 'Storefront'}),\n  airbnb: graph.createNode('corporation', {name: 'AirBnB'})\n};\n\nlet industries = {\n  vc: graph.createNode('industry', {name: 'Venture Capital'}),\n  hospitality: graph.createNode('industry', {name: 'Hospitality'}),\n  taxi: graph.createNode('industry', {name: 'Taxi'})\n};\n\ngraph.createEdge('business_model').link(corps.uber, classification);\ngraph.createEdge('business_model').link(corps.airbnb, classification);\ngraph.createEdge('business_model').link(corps.storefront, classification);\ngraph.createEdge('emotion', {type: 'happy'}).link(industries.vc, classification);\ngraph.createEdge('emotion', {type: 'sad'}).link(industries.hospitality, classification);\ngraph.createEdge('emotion', {type: 'sad'}).link(industries.taxi, classification);\n\ngraph.closest(\n  graph.nodes('classification').query().first(), // grab Sharing Economy node\n  {\n    compare: function(node) {\n      // forget industries and uber!\n      return node.entity !== 'industry' && node.get('name') !== 'Uber';\n    },\n    direction: -1 // only track nodes that feed in to this one\n  }\n);\n\n// returns two paths, one from Sharing Economy << (business_model) << AirBnB\n//    and Sharing Economy << business_model << Storefront,\n//    ordered by their distance\n```\n\n## Documentation\n\n### Graph\n\n```javascript```\nGraph()\n```\n\nConstructor. Part of the `ug` namespace. Use with `new` keyword, i.e.\n\n```javascript\nlet Graph = require('ug').Graph;\nlet graph = new Graph();\n```\n\n#### Graph#unit\n\n```\nunit( [Number] uniqid )\n  returns [Unit] ([Node] or [Edge])\n```\n\nGrabs a unit (node or edge) by their unique id (automatically assigned by\n  their parent Graph object).\n\n#### Graph#nodeCount\n\n```\nnodeCount()\n  returns [Number]\n```\n\nReturns the total number of nodes that belong to the graph.\n\n#### Graph#edgeCount\n\n```\nedgeCount()\n  returns [Number]\n```\n\nReturns the total number of edges that belong to the graph.\n\n#### Graph#createNode\n\n```\ncreateNode( [String] entity, [Object] properties )\n  returns [Node]\n```\n\nCreates a node belonging to the parent graph, with entity type `entity` and\ncalls `Unit#load` to attach `properties` to the node.\n\nAutomatically creates a `NodeCollection` of type `entity` belonging to the\nparent graph if one does not yet exist.\n\n#### Graph#createEdge\n\n```\ncreateEdge( [String] entity, [Object] properties )\n  returns [Edge]\n```\n\nCreates an edge belonging to the parent graph, with entity type `entity` and\ncalls `Unit#load` to attach `properties` to the edge.\n\nAutomatically creates an `EdgeCollection` of type `entity` belonging to the\nparent graph if one does not yet exist.\n\n#### Graph#nodes\n\n```\nnodes( [String] entity )\n  returns [NodeCollection]\n```\n\nReturns the parent graph's `NodeCollection` object of the specified `entity`.\nInvoking this method will create a `NodeCollection` if one does not yet exist.\n\n#### Graph#edges\n\n```\nedges( [String] entity )\n  returns [EdgeCollection]\n```\n\nReturns the parent graph's `EdgeCollection` object of the specified `entity`.\nInvoking this method will create a `EdgeCollection` if one does not yet exist.\n\n#### Graph#trace\n\n```\ntrace( [Node] fromNode, [Node] toNode, [Number] direction )\n  returns [Path]\n```\n\nFinds the shortest distance `Path` from `fromNode` to `toNode`. If there are\nmultiple paths of the same distance, it will return the first one it finds.\n\n`direction` can be `-1` (incoming nodes only), `0` (doesn't matter) or `1`\n(outgoing nodes only).\n\nYou should not depend on this method to always return the same `Path`.\n\nFor finding all paths of a specific distance, use `Graph#closest`.\n\n#### Graph#closest\n\n```\nclosest( [Node] node, [Object] options )\n  returns [Array] of [Path]\n```\n\nFinds all closest nodes to `node` and returns their `Path`s in an array, ordered\nby total distance. Nodes are filtered based on the parameters passed in\n`options`.\n\nThese include:\n\n`options.compare`: A function containing a comparison constraint for the node.\n\nShould return `true` for an inclusion of the target node, and `false` to\nignore it.\n\nExample:\n\n```javascript\nlet options = {\n  compare: function(node) {\n    return node.entity === 'person';\n  }\n}\n```\n\nThis will make sure only nodes with the entity `'person'` are included in your\nresults.\n\n`options.count`: A number indicating the amount of results to return. 0 will\nreturn all results.\n\n`options.direction`: Which direction can we traverse the graph in?\nCan be `-1` (incoming nodes only), `0` (doesn't matter) or `1`\n(outgoing nodes only).\n\n`options.minDepth`: The minimum distance from our target at which to start\ncounting nodes in our result set.\n\n`options.maxDepth`: The maximum distance from our target at which we can finish\ncounting nodes in our result set.\n\n#### Graph#toJSON\n\n```\ntoJSON()\n  returns [String]\n```\n\nCreates a JSON string representation of our graph using the `toJSON` of graph\nconsituents.\n\n#### Graph#fromJSON\n\n```\nfromJSON( [String] json )\n  returns [self: Graph]\n```\n\nSynchronously prepares a graph from a `json` string representation.\n\n#### Graph#save\n\n```\nsave( [String] filename, [Function] callback )\n  returns [self: Graph]\n```\n\nSave the current graph to a file, asynchronously. Specify full path in `filename`.\n\n`callback` is of the form `function(err) {}`.\n\n#### Graph#load\n\n```\nload( [String] filename, [Function] callback )\n  returns [self: Graph]\n```\n\nLoad the current graph to a file, asynchronously, from `filename`.\n\n`callback` is of the form `function(err) {}`.\n\n---\n\n### Unit\n\n```\nUnit()\n```\n\n*Inaccessible* constructor. Base prototype for `Node` and `Edge`.\n\n#### Unit#load\n\n```\nload( [Object] properties )\n  returns [self: Unit]\n```\n\nLoad all properties for the `Unit` from `properties`. Creates a shallow copy\nof the object provided.\n\n#### Unit#set\n\n```\nset( [String] property, [Any] value )\n  returns [Any]\n```\n\nSet a specific property of the `Unit`. Returns the set property value.\n\n#### Unit#unset\n\n```\nunset( [String] property )\n  returns [Boolean]\n```\n\nUnsets `property` of the `Unit`. Returns `true` on success, `false` on failure.\n\n#### Unit#has\n\n```\nhas( [String] property )\n  returns [Boolean]\n```\n\nReturns `true` if `Unit` has property `property`, otherwise returns `false`.\n\n#### Unit#get\n\n```\nget( [String] property )\n  returns [Any]\n```\n\nReturns the associated property value of `Unit`.\n\n#### Unit#toString\n\n```\ntoString()\n  returns [String]\n```\n\nReturns a string representation of the `Unit`.\n\n#### Unit#valueOf\n\n```\nvalueOf()\n  returns [String]\n```\n\nSee: `Unit#toString`.\n\n---\n\n### Node\n\n```\nNode()\n  extends [Unit]\n```\n\n*Inaccessible* constructor. Inherits from `Unit`.\n\nUse `Graph#createNode` to invoke this constructor.\n\n#### Node#unlink\n\n```\nunlink()\n  returns true\n```\n\nDe-references all connected edges from itself, and itself from all connected\nedges.\n\n---\n\n### Edge\n\n```\nEdge()\n  extends [Unit]\n```\n\n*Inaccessible* constructor. Inherits from `Unit`.\n\nUse `Graph#createEdge` to invoke this constructor.\n\n#### Edge#link\n\n```\nlink( [Node] fromNode, [Node] toNode, [Boolean] duplex )\n  returns [self: Edge]\n```\n\nLinks two nodes directionally (`fromNode` to `toNode`) or bi-directionally\nif `duplex` is set to `true`.\n\n#### Edge#unlink\n\n```\nunlink()\n  returns true\n```\n\nDe-references both connected nodes from itself, and itself from both connected\nnodes.\n\n#### Edge#setDistance\n\n```\nsetDistance( [Number] distance )\n  returns [self: Edge]\n```\n\nSets the distance (length) of the edge.\n\n#### Edge#setWeight\n\n```\nsetWeight( [Number] weight )\n  returns [self: Edge]\n```\n\nSets the distance (length) of the edge to 1 / weight.\n\n#### Edge#oppositeNode\n\n```\noppositeNode( [Node] node )\n  returns [Node]\n```\n\nReturns the node opposite to the one provided (if provided node is connected to\n  the edge). Otherwise returns `undefined`.\n\n---\n\n### Collection\n\n```\nCollection()\n```\n\n*Inaccessible* constructor. Base prototype for `NodeCollection` and `EdgeCollection`.\n\n#### Collection#name\n\n```\nname()\n  returns [String]\n```\n\nReturns the entity name of the collection.\n\n#### Collection#indices\n\n```\nindices()\n  returns [Array] of [String]\n```\n\nProvides an array of all indexed fields in the collection\n\n#### Collection#createIndex\n\n```\ncreateIndex( [String] field )\n  returns [self: Collection]\n```\n\nAdds `field` as an index on the collection. Useful for `Collection#find` and\n`Collection#destroy`.\n\n#### Collection#createIndices\n\n```\ncreateIndex( [Array] fieldList )\n  returns [self: Collection]\n```\n\nAdds each `fieldList` entry as an index on the collection.\nUseful for `Collection#find` and `Collection#destroy`.\n\n#### Collection#find\n\n```\nfind( [String or Number] id )\nfind( [String] index, [String or Number] id )\n  returns [Unit] ([Node or Edge])\n```\n\nReturns the `Unit` (node or edge) associated with the supplied `index` and `id`.\n\nIf no `index` is provided, it will use the first index added to the Collection.\n\n#### Collection#destroy\n\n```\ndestroy( [String or Number] id )\ndestroy( [String] index, [String or Number] id )\n  returns [Unit] ([Node or Edge])\n```\n\nRemoves the `Unit` (node or edge) associated with the supplied `index` and `id`\nfrom the collection and returns it.\n\nIf no `index` is provided, it will use the first index added to the Collection.\n\n#### Collection#query\n\n```\nquery()\n  returns [Query]\n```\n\nCreates a new `Query` object with all units in the collection.\n\n---\n\n### NodeCollection\n\n```\nNodeCollection()\n  extends [Collection]\n```\n\n*Inaccessible* constructor. Inherits from `Collection`.\n\nUse `Graph#nodes(entity)` to invoke this constructor automatically.\n\n---\n\n### EdgeCollection\n\n```\nEdgeCollection()\n  extends [Collection]\n```\n\n*Inaccessible* constructor. Inherits from `Collection`.\n\nUse `Graph#edges(entity)` to invoke this constructor automatically.\n\n---\n\n### Query\n\n```\nQuery()\n  extends [Collection]\n```\n\n*Inaccessible* constructor. Inherits from `Collection`.\n\nUse `Collection#query` to instantiate this object.\n\n#### Query#filter\n\n```\nfilter( [Array] filtersObjects )\nfilter( [Object] filters_1, ..., [Object] filters_n )\n  returns [Query]\n```\n\nReturns a `Query` object containing a subset of `units` that has been filtered\nbased on supplied `filtersObjects`. Can be passed in as an array or separate\narguments.\n\nSee [DataCollection.js examples](https://github.com/thestorefront/DataCollection.js#more-examples)\nfor a better idea of how these filters work. Note: the implementations are not\ncompletely identical.\n\nSupported filters for UnitGraph's `Query` object are currently:\n\n```\nis\nnot\ngt\nlt\ngte\nlte\nilike\nlike\nin\nnot_in\n```\n\n#### Query#exclude\n\n```\nexclude( [Array] filtersObjects )\nexclude( [Object] filters_1, ..., [Object] filters_n )\n  returns [Query]\n```\n\nReturns the complementary set of units when compared to `Query#filter`.\n(Excludes instead of includes filter values).\n\n#### Query#first\n\n```\nfirst()\n  returns [Unit] ([Node or Edge])\n```\n\nReturns the first unit in the query set.\n\n#### Query#last\n\n```\nlast()\n  returns [Unit] ([Node or Edge])\n```\n\nReturns the last unit in the query set.\n\n#### Query#units\n\n```\nunits()\n  returns [Array] of [Unit] ([Node or Edge])\n```\n\nReturns all units in the query set.\n\n---\n\n### Path\n\n```\nPath()\n```\n\n*Inaccessible* constructor. Returned from `Graph#trace` and `Graph#closest`.\n\n#### Path#start\n\n```\nstart()\n  returns [Node]\n```\n\nReturns the first node in the path.\n\n#### Path#end\n\n```\nend()\n  returns [Node]\n```\n\nReturns the last node in the path.\n\n#### Path#length\n\n```\nlength()\n  returns [Number]\n```\n\nReturns an integer indicating the number of edges in the path.\n\n#### Path#distance\n\n```\ndistance()\n  returns [Number]\n```\n\nReturns a number indicating the total distance of the path.\n\n#### Path#prettify\n\n```\nprettify()\n  returns [String]\n```\n\nProvides a human-readable string representation of the path.\n\n#### Path#toString\n\n```\ntoString()\n  returns [String]\n```\n\nAlias for `Path#prettify`.\n\n## About\n\nUnitGraph is MIT licenced, so have fun with it!\n\nReach me on Twitter, [@keithwhor](http://twitter.com/keithwhor).\n\nCheck out my personal website [keithwhor.com](http://keithwhor.com).\n","maintainers":[{"name":"keithwhor","email":"keithwhor@gmail.com"}],"time":{"modified":"2022-06-28T03:05:52.703Z","created":"2015-06-17T21:28:33.155Z","0.0.0":"2015-06-17T21:28:33.155Z","0.0.1":"2015-06-18T00:17:21.027Z","0.0.2":"2015-06-19T23:05:16.686Z","0.0.3":"2015-06-22T23:55:56.497Z","0.0.4":"2015-06-24T20:54:37.870Z","0.0.5":"2015-06-24T22:27:30.364Z","0.0.7":"2015-07-23T01:28:14.390Z","0.0.8":"2015-09-08T18:33:06.327Z"},"author":{"name":"Keith Horwood"},"license":"MIT","readmeFilename":"README.md","homepage":"https://github.com/keithwhor/UnitGraph#readme","repository":{"type":"git","url":"git+https://github.com/keithwhor/UnitGraph.git"},"bugs":{"url":"https://github.com/keithwhor/UnitGraph/issues"}}