{"_id":"et","_rev":"11-5485557e6a01009d6ed10e9283e26b71","name":"et","description":"effortlessness, et al.","dist-tags":{"latest":"0.0.4"},"versions":{"0.0.1":{"name":"et","description":"effortlessness, et al.","version":"0.0.1","author":{"name":"nomilous"},"contributors":[{"name":"nomilous","email":"nomilous@gmail.com"}],"dependencies":{"restify":"1.4.4"},"devDependencies":{"express":"*","coffee-script":"1.4.0","jasmine-node":"*","should":"1.2.1","which":"*","watchit":"*"},"keywords":["rest"],"repository":{"type":"git","url":"git@github.com:nomilous/et.git"},"main":"./lib/et","bin":{},"scripts":{"build":"cake build","test":"cake test"},"engines":{"node":"*"},"readme":"et\n==\n\neffortlessness <i>et al.</i>\n\nUsage\n-----\n\n\n### thing.coffee\n\n```coffee\nclass Thing\n\n    @get: (id) -> \n\n        the: 'route /things/:id was defined'\n        because: 'the model defined get(id)'\n        uTodo: \"get thing:#{id} from db\"\n\nmodule.exports = Thing\n```\n\n\n### server.coffee\n\n```coffee\napp  = require('express')()\nrest = require('et').Rest\n\napp.use rest.config\n    app: app\n    models:\n        things: require './thing'\n\napp.listen 3000\n```\n\n\n### result\n\n<pre>\n$ coffee server\n...\n$ curl http://localhost:3001/things/1234\n\n{\n  \"the\": \"route /things/:id was defined\",\n  \"because\": \"the model defined get(id)\",\n  \"uTodo\": \"get thing:1234 from db\"\n}\n\n</pre>\n\n\nChangelog\n---------\n\n### 2012-12-09 (0.0.1)\n\n* Added support for http GET to Ebb.Rest\n* Transparently plugin to [express'](https://github.com/visionmedia/express) routing\n\n","readmeFilename":"README.md","_id":"et@0.0.1","dist":{"shasum":"409f594566a3a765010c0c2557887102d36debe9","tarball":"https://registry.npmjs.org/et/-/et-0.0.1.tgz","integrity":"sha512-amRvbIIvHQOAG/mXcq94U1YTmt7nKvy7ipdQmr77KQ9gVPbfnG0TPpJmeBGLYi42L1Kfgw8HUedkTdyZw0M0JQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDYcRtOjvOVu5P+HU/Sk8lNBSmUjX3iUUCFFUXadXAk6AiEAkP8cQGVnPldGVU24Wn7jjd1G39iBxlR30SD0DjDtvVE="}]},"_npmVersion":"1.1.65","_npmUser":{"name":"nomilous","email":"nomilous@gmail.com"},"maintainers":[{"name":"nomilous","email":"nomilous@gmail.com"}]},"0.0.2":{"name":"et","description":"effortlessness, et al.","version":"0.0.2","author":{"name":"nomilous","email":"nomilous@gmail.com"},"contributors":[{"name":"nomilous","email":"nomilous@gmail.com"}],"dependencies":{"redis":"~0.8.2","passport":"~0.1.15","passport-local":"~0.1.6","connect-redis":"~1.4.5","connect":"~2.7.1"},"devDependencies":{"which":"~1.0.5","watchit":"0.0.4","should":"~1.2.1","coffee-script":"~1.4.0","jasmine-node":"~1.0.28","express":"~3.0.4"},"keywords":["effortless","rest"],"repository":{"type":"git","url":"git@github.com:nomilous/et.git"},"main":"./lib/et","bin":{},"scripts":{"build":"cake build","test":"cake test"},"engines":{"node":"*"},"readme":"et\n==\n\neffortlessness, serverside <i>et al.</i>\n\nUsage\n-----\n\nThis example uses [jugglingdb](https://github.com/1602/jugglingdb) to provide schema based database access\n\n### thing.coffee\n\n```coffee\n\nmodule.exports = \n\n    config: (opts) -> \n\n        opts.resource.database1.define 'things'\n\n            id: Number\n            name: String\n            location: String\n\n    get: (req, res) ->\n\n        Thing = req._et.resource.database1.models.thing\n\n        Thing.find req.params.id, (arg1, data, arg3) -> \n\n            res.send data\n\n\n```\n\n\n### server.coffee\n\n```coffee\n\napp     = require('express')()\net      = require('et')\nSchema  = require('jugglingdb').Schema\n\napp.use et.al\n\n    resource:\n\n        database1: new Schema 'postgres'\n\n            host: 'db.domain.com',\n            database: 'dbname',\n            username: 'dbuser',\n            password: 'passrod'\n\n    models:\n\n        things: require './thing'\n\n\napp.listen 3001\n\n\n```\n\n\n### result\n\n```coffee\n\n$ coffee server\n...\n$ curl http://localhost:3001/things/1\n\n{\n    \"id\": 1\n    \"name\": \"Venus of Hohle Fels\"\n    \"location\": \"Schelklingen, Germany\"\n}\n\n```\n\n\nChangelog\n---------\n\n\n* Added call to model.config (if present), to configure resources at startup\n* Added opts.resource available at startup and on req._et.resource\n* Added basic local auth using [passport](http://passportjs.org/) \n* Added basic redis session using [connect.session](http://www.senchalabs.org/connect/session.html) (very defaulty! See TODO in src/session)\n* Added et.al() all encompasser\n\n### 2012-12-09 (0.0.1)\n\n* Added support for http GET to et\n* Transparently plugin to [express'](https://github.com/visionmedia/express) routing\n\n","readmeFilename":"README.md","_id":"et@0.0.2","dist":{"shasum":"606048b5a35298c5b2692ad8699cb889510edc9b","tarball":"https://registry.npmjs.org/et/-/et-0.0.2.tgz","integrity":"sha512-5zQpAawF7MHmT1pZApnitRV8O1zSurjys2KDhleNDE3ML45Q0ZHu66su5JG0CmS0Cp7QnAipbGCaRJRTkuoIag==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIF1IKMfHzb5brh2D74+z8EuJbpR65Gn1G89rp2LLgz0jAiEA1/P7W9uw32+AagLQzJl9c0f6gBMnE4Hb1NV++So9xFc="}]},"_npmVersion":"1.1.65","_npmUser":{"name":"nomilous","email":"nomilous@gmail.com"},"maintainers":[{"name":"nomilous","email":"nomilous@gmail.com"}]},"0.0.3":{"name":"et","description":"effortlessness, et al.","version":"0.0.3","author":{"name":"nomilous","email":"nomilous@gmail.com"},"contributors":[{"name":"nomilous","email":"nomilous@gmail.com"}],"dependencies":{"redis":"~0.8.2","passport":"~0.1.15","passport-local":"~0.1.6","connect-redis":"~1.4.5","connect":"~2.7.1","restify":"~2.0.4"},"devDependencies":{"should":"~1.2.1","coffee-script":"~1.4.0","hound":"~1.0.4","mocha":"~1.7.4","request":"~2.12.0"},"keywords":["effortless","rest"],"repository":{"type":"git","url":"git@github.com:nomilous/et.git"},"main":"./lib/et","bin":{},"scripts":{"dev":"cake dev","build":"cake build","spec":"cake spec"},"engines":{"node":"*"},"readme":"et\n==\n\neffortlessness, serverside <i>et al.</i>\n\n\n    $ npm install et\n    \n\n\n\nUsage\n-----\n\nThis example uses [jugglingdb](https://github.com/1602/jugglingdb) as a `resource` to provide schema based database access\n\n### thing.coffee\n\n```coffee\n\nmodule.exports = \n\n    config: (opts) -> \n\n        #\n        # config() is called when the server starts up\n        # to allow for things like schema definitions\n        # \n\n        opts.resource.database1.define 'things'\n\n            id: Number\n            name: String\n            location: String\n\n    get: (req, res) ->\n\n        #\n        # The presence of a get() method here causes the \n        # automatic creation of the rest endpoint '/things/:id' \n        #\n\n        Thing = req.et.resource.database1.models.thing\n\n        Thing.find req.params.id, (arg1, data, arg3) -> \n\n            #\n            # apologies, have not looked into what args1&3 are...\n            #\n\n            res.send data\n\n\n```\n\n\n### server.coffee\n\n```coffee\n\net      = require('et')\nSchema  = require('jugglingdb').Schema\n\nserver  = et.al\n\n    port: 3001\n\n    resource:\n\n        #\n        # resources become available in the models\n        # (see above)\n        #\n\n        database1: new Schema 'postgres'\n\n            host: 'db.domain.com',\n            database: 'dbname',\n            username: 'dbuser',\n            password: 'passrod'\n\n    models:\n\n        #\n        # link 'thing.coffee' as a 'model'\n        #\n\n        things: require './thing'\n\n\n\n```\n\n\n### result\n\n```coffee\n\n$ coffee server\n...\n$ curl http://localhost:3001/things/1\n\n{\n    \"id\": 1\n    \"name\": \"Venus of Hohle Fels\"\n    \"location\": \"Schelklingen, Germany\"\n}\n\n```\n\nDevelop\n-------\n\n### 2013-01-?? (0.0.4)\n\n* TODO Added middleware config `opts.use.before` and `opts.use.after`\n\n\n\nChangelog\n---------\n\n### 2013-01-04 (0.0.3)\n\n* Added auto spawn a restify server if no `opts.app` provided\n* `et.al( opts )` returns the running server\n* Switched specs to mocha\n\n### 2012-12-12 (0.0.2)\n\n* Added call to model.config (if present), to configure resources at startup\n* Added opts.resource available at startup and on req._et.resource\n* Added basic local auth using [passport](http://passportjs.org/) \n* Added basic redis session using [connect.session](http://www.senchalabs.org/connect/session.html) (very defaulty! See TODO in src/session)\n* Added et.al() all encompasser\n\n### 2012-12-09 (0.0.1)\n\n* Added support for http GET to et\n* Transparently plugin to [express'](https://github.com/visionmedia/express) routing\n\n","readmeFilename":"README.md","_id":"et@0.0.3","dist":{"shasum":"96931650cc16c6c732b02a5dacdf79432b595f77","tarball":"https://registry.npmjs.org/et/-/et-0.0.3.tgz","integrity":"sha512-ZMZlxwRuNfViIth5HH546RuXTct8Qwyks4guYpTbEZ1HH6hYjSV4ehwgEHjogrDZ4WXQWKj5mEugNN1+s/kgdQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDd1TmU10BydBZOcI1X2ReKci2dicRwnkKdoRIjwIFuJAIhALH9UFW1TtpTqV9uLkU7my8D803sWfZmNv0WQZdjbRkx"}]},"_npmVersion":"1.1.65","_npmUser":{"name":"nomilous","email":"nomilous@gmail.com"},"maintainers":[{"name":"nomilous","email":"nomilous@gmail.com"}]},"0.0.4":{"name":"et","description":"effortlessness, et al.","version":"0.0.4","author":{"name":"nomilous","email":"nomilous@gmail.com"},"contributors":[{"name":"nomilous","email":"nomilous@gmail.com"}],"dependencies":{"redis":"~0.8.2","passport":"~0.1.15","passport-local":"~0.1.6","connect-redis":"~1.4.5","connect":"~2.7.1","restify":"~2.0.4","node-static":"~0.6.7","bunyan":"~0.18.2"},"devDependencies":{"should":"~1.2.1","coffee-script":"~1.4.0","hound":"~1.0.4","mocha":"~1.7.4","request":"~2.12.0","sinon":"~1.5.2"},"keywords":["effortless","rest"],"repository":{"type":"git","url":"git@github.com:nomilous/et.git"},"main":"./lib/et","bin":{},"scripts":{"dev":"cake dev","build":"cake build","spec":"cake spec"},"engines":{"node":"*"},"readme":"et\n==\n\neffortlessness, serverside <i>et al.</i>\n\n\n    $ npm install et\n    \n\n\n\nUsage\n-----\n\nThis example uses [jugglingdb](https://github.com/1602/jugglingdb) as a `resource` to provide schema based database access\n\n### thing.coffee\n\n```coffee\n\nmodule.exports = \n\n    config: (opts) -> \n\n        #\n        # config() is called when the server starts up\n        # to allow for things like schema definitions\n        # \n\n        opts.resource.database1.define 'things'\n\n            id: Number\n            name: String\n            location: String\n\n    get: (req, res) ->\n\n        #\n        # The presence of a get() method here causes the \n        # automatic creation of the rest endpoint '/things/:id' \n        #\n\n        Thing = req.et.resource.database1.models.thing\n\n        Thing.find req.params.id, (arg1, data, arg3) -> \n\n            #\n            # apologies, have not looked into what args1&3 are...\n            #\n\n            res.send data\n\n    #\n    # although called a model, this is more precisely a combination\n    # of model and controller\n    # \n    #   ie. a \"controdel\"\n    # \n\n\n\n```\n\n\n### server.coffee\n\n```coffee\n\net      = require('et')\nSchema  = require('jugglingdb').Schema\n\nserver  = et.al\n\n    port: 3001\n\n    resource:\n\n        #\n        # resources become available in the models\n        # (see above)\n        #\n\n        database1: new Schema 'postgres'\n\n            host: 'db.domain.com',\n            database: 'dbname',\n            username: 'dbuser',\n            password: 'passrod'\n\n    models:\n\n        #\n        # link 'thing.coffee' as a 'model'\n        #\n\n        things: require './thing'\n\n    static:\n\n        scripts:\n\n            #\n            # key (above) must match last path element (below)\n            #\n\n            path: __dirname + '/nested/path/to/scripts'\n\n\n\n```\n\n\n### result\n\n```coffee\n\n$ coffee server\n...\n$ curl http://localhost:3001/things/1\n\n{\n    \"id\": 1\n    \"name\": \"Venus of Hohle Fels\"\n    \"location\": \"Schelklingen, Germany\"\n}\n\n```\n\nDevelop\n-------\n\n### 2013-02-?? (0.0.5)\n\n* TODO Added post() to enable http POST endpoints\n* TODO Configurables for redis session store (eg. redis:hostname:port:password)\n\n\nChangelog\n---------\n\n### 2013-02-01 (0.0.4)\n\n* Added middleware config `opts.before` and `opts.use` callbacks\n* Added use of env vars APP_NAME, APP_VERSION, APP_PORT, APP_LOGLEVEL (if present)\n* Added use of restify app name and version\n* Added overideable request logger, first into the connect stack\n* Added configurable [bunyan](https://github.com/trentm/node-bunyan) logger \n* Added auto serve static assets from `opts.static.key.path (if present)\n\n### 2013-01-04 (0.0.3)\n\n* Added auto spawn a restify server if no `opts.app` provided\n* `et.al( opts )` returns the running server\n* Switched specs to mocha\n\n### 2012-12-12 (0.0.2)\n\n* Added call to model.config (if present), to configure resources at startup\n* Added opts.resource available at startup and on req._et.resource\n* Added basic local auth using [passport](http://passportjs.org/) \n* Added basic redis session using [connect.session](http://www.senchalabs.org/connect/session.html) (very defaulty! See TODO in src/session)\n* Added et.al() all encompasser\n\n### 2012-12-09 (0.0.1)\n\n* Added support for http GET to et\n* Transparently plugin to [express'](https://github.com/visionmedia/express) routing\n\n","readmeFilename":"README.md","_id":"et@0.0.4","dist":{"shasum":"2e856c3c2f45e132962dac94a9088c485ac605b2","tarball":"https://registry.npmjs.org/et/-/et-0.0.4.tgz","integrity":"sha512-ZEGUBTgNE5knPGVPBDyJOoDBx+z+sqbO4GoEu5anMI69RhYEvUmbz97mbYYUTXSQ5i4YJ5ntRhyg2ompENx2VA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAZmQv+F4PnEP70yO5UgdhwJ3LcNr9sxKPUmA71ySb6EAiEA/zoQvKXD8QEsytuMVl5ZWyEcMc1HEI8GIB0Pab302iA="}]},"_npmVersion":"1.1.65","_npmUser":{"name":"nomilous","email":"nomilous@gmail.com"},"maintainers":[{"name":"nomilous","email":"nomilous@gmail.com"}]}},"readme":"et\n==\n\neffortlessness <i>et al.</i>\n\nUsage\n-----\n\n\n### thing.coffee\n\n```coffee\nclass Thing\n\n    @get: (id) -> \n\n        the: 'route /things/:id was defined'\n        because: 'the model defined get(id)'\n        uTodo: \"get thing:#{id} from db\"\n\nmodule.exports = Thing\n```\n\n\n### server.coffee\n\n```coffee\napp  = require('express')()\nrest = require('et').Rest\n\napp.use rest.config\n    app: app\n    models:\n        things: require './thing'\n\napp.listen 3000\n```\n\n\n### result\n\n<pre>\n$ coffee server\n...\n$ curl http://localhost:3001/things/1234\n\n{\n  \"the\": \"route /things/:id was defined\",\n  \"because\": \"the model defined get(id)\",\n  \"uTodo\": \"get thing:1234 from db\"\n}\n\n</pre>\n\n\nChangelog\n---------\n\n### 2012-12-09 (0.0.1)\n\n* Added support for http GET to Ebb.Rest\n* Transparently plugin to [express'](https://github.com/visionmedia/express) routing\n\n","maintainers":[{"name":"nomilous","email":"nomilous@gmail.com"}],"time":{"modified":"2022-06-17T20:59:55.623Z","created":"2012-12-09T01:03:25.820Z","0.0.1":"2012-12-09T01:03:52.549Z","0.0.2":"2012-12-12T19:23:40.104Z","0.0.3":"2013-01-04T21:33:52.145Z","0.0.4":"2013-01-31T22:09:19.764Z"},"author":{"name":"nomilous","email":"nomilous@gmail.com"},"repository":{"type":"git","url":"git@github.com:nomilous/et.git"}}