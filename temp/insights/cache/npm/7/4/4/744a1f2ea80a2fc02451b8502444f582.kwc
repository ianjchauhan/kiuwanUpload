{"_id":"fo","_rev":"8-20e8e5613976e95587086edea3f191ef","name":"fo","description":"Overloaded operators for Fantasy Land compatible JavaScript.","dist-tags":{"latest":"0.1.1"},"versions":{"0.1.0":{"name":"fo","version":"0.1.0","description":"Overloaded operators for Fantasy Land compatible JavaScript.","main":"fo.js","dependencies":{"emu":"~0.0.2","nodeunit":"~0.8.0"},"devDependencies":{"nodeunit":"~0.8.0","emu":"0.0.2"},"scripts":{"test":"node_modules/.bin/nodeunit test.js"},"repository":{"type":"git","url":"git://github.com/puffnfresh/fo.git"},"keywords":["syntax","operator","overloading"],"author":{"name":"Brian McKenna"},"license":"MIT","readmeFilename":"README.md","bugs":{"url":"https://github.com/puffnfresh/fo/issues"},"readme":"# Fo (Fantasy Overloading)\n\nOverloaded operators for [Fantasy\nLand](https://github.com/puffnfresh/fantasy-land) compatible\nJavaScript:\n\n  * `>=` Monad chain:\n\n        fo()(\n            Option.Some(1) >= function(x) {\n                return x < 0 ? Option.None : Option.Some(x + 2);\n            }\n        ).getOrElse(0) == 3;\n\n  * `<` Monad sequence:\n\n        fo()(\n            Option.Some(1) < Option.Some(2)\n        ).getOrElse(0) == 2;\n\n  * `%` Functor map:\n\n        bilby.fo()(\n            bilby.some(1) % add(2)\n        ).getOrElse(0) == 3;\n\n  * `*` Applicative ap(ply):\n\n        fo()(\n            Option.Some(add) * Option.Some(1) * Option.Some(2)\n        ).getOrElse(0) == 3;\n\n  * `<<` Compose:\n\n        fo()(\n            add(1) << times(2)\n        )(3) == 7;\n\n  * `>>` Compose reverse:\n\n        fo()(\n            add(1) >> times(2)\n        )(3) == 8;\n\n  * `+` Semigroup concat:\n\n        fo()(\n            Option.Some([1, 2]) + Option.Some([3, 4])\n        ).getOrElse([]) == [1, 2, 3, 4];\n\n  * `-` Group minus:\n\n        fo()(\n            Option.Some(1) - Option.Some(2)\n        ).getOrElse(0) == -1;\n\n## fo()(a)\n\nCreates a new syntax scope. The `a` expression is allowed multiple\nusages of a single operator per `fo` call.\n\nFor most operations, the associated name will be called on the\noperands. for example:\n\n    fo()(Option.Some([1, 2]) + Option.Some([3, 4]))\n\nDesugars into:\n\n    Option.Some([1, 2]).concat(Option.Some([3, 4]))\n\nThe exceptions are `andThen`, `sequence` and `minus`. They are\nderived from Compose, Monad and Group, respectively.\n\n## fo.setValueOf(proto)\n\nUsed to mutate the `valueOf` property on `proto`. Necessary for\nthe `fo` block's operator overloading. Falls back to the objects\nexisting `valueOf` if not in a `fo` block.\n\n**Caution:** this mutates `proto`. The new `valueOf` tries to use\nthe original behaviour when not in a `fo` block but may not be\nsafe.\n","_id":"fo@0.1.0","dist":{"shasum":"5cbee4466ec8e8f5190c3263f36d113c39dc655a","tarball":"https://registry.npmjs.org/fo/-/fo-0.1.0.tgz","integrity":"sha512-5yLrTED7+sf+BMP5D/Mipuyc2MeBigZK6MePnak/5D1V8l2APuSNYfDBaV5EKH3Hd3iIjvK6rHHcZwEy+x0SQQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC5imSd9hHhNbRl/gm9YafiaOfxHPoX9VjbPAb5kK7sFwIgI3Rrvz2Tp8GHbwoZu1+kz1gbKH2rRC2vZWndRIFPZqs="}]},"_from":".","_npmVersion":"1.2.23","_npmUser":{"name":"puffnfresh","email":"brian@brianmckenna.org"},"maintainers":[{"name":"puffnfresh","email":"brian@brianmckenna.org"}]},"0.1.1":{"name":"fo","version":"0.1.1","description":"Overloaded operators for Fantasy Land compatible JavaScript.","main":"fo.js","dependencies":{},"devDependencies":{"nodeunit":"~0.8.0","emu":"0.0.2"},"scripts":{"test":"node_modules/.bin/nodeunit test.js"},"repository":{"type":"git","url":"git://github.com/puffnfresh/fo.git"},"keywords":["syntax","operator","overloading"],"author":{"name":"Brian McKenna"},"license":"MIT","readmeFilename":"README.md","bugs":{"url":"https://github.com/puffnfresh/fo/issues"},"readme":"# Fo (Fantasy Overloading)\n\nOverloaded operators for [Fantasy\nLand](https://github.com/puffnfresh/fantasy-land) compatible\nJavaScript:\n\n  * `>=` Monad chain:\n\n        fo()(\n            Option.Some(1) >= function(x) {\n                return x < 0 ? Option.None : Option.Some(x + 2);\n            }\n        ).getOrElse(0) == 3;\n\n  * `<` Monad sequence:\n\n        fo()(\n            Option.Some(1) < Option.Some(2)\n        ).getOrElse(0) == 2;\n\n  * `%` Functor map:\n\n        fo()(\n            Option.Some(1) % add(2)\n        ).getOrElse(0) == 3;\n\n  * `*` Applicative ap(ply):\n\n        fo()(\n            Option.Some(add) * Option.Some(1) * Option.Some(2)\n        ).getOrElse(0) == 3;\n\n  * `<<` Compose:\n\n        fo()(\n            add(1) << times(2)\n        )(3) == 7;\n\n  * `>>` Compose reverse:\n\n        fo()(\n            add(1) >> times(2)\n        )(3) == 8;\n\n  * `+` Semigroup concat:\n\n        fo()(\n            Option.Some([1, 2]) + Option.Some([3, 4])\n        ).getOrElse([]) == [1, 2, 3, 4];\n\n  * `-` Group minus:\n\n        fo()(\n            Option.Some(1) - Option.Some(2)\n        ).getOrElse(0) == -1;\n\n## fo()(a)\n\nCreates a new syntax scope. The `a` expression is allowed multiple\nusages of a single operator per `fo` call.\n\nFor most operations, the associated name will be called on the\noperands. for example:\n\n    fo()(Option.Some([1, 2]) + Option.Some([3, 4]))\n\nDesugars into:\n\n    Option.Some([1, 2]).concat(Option.Some([3, 4]))\n\nThe exceptions are `andThen`, `sequence` and `minus`. They are\nderived from Compose, Monad and Group, respectively.\n\n## fo.unsafeSetValueOf(proto)\n\nUsed to mutate the `valueOf` property on `proto`. Necessary for\nthe `fo` block's operator overloading. Falls back to the objects\nexisting `valueOf` if not in a `fo` block.\n\n**Caution:** this mutates `proto`. The new `valueOf` tries to use\nthe original behaviour when not in a `fo` block but may not be\nsafe.\n","_id":"fo@0.1.1","dist":{"shasum":"50ac7e9a1be4f46b89dcc4638b664632ec7b1d9d","tarball":"https://registry.npmjs.org/fo/-/fo-0.1.1.tgz","integrity":"sha512-6CMsvydHo4yd1/7nUYfv9mT7GPiKkpLnmS1U+5u8KIKTldu8x94Ui+pdeFwkXqIXRwTyppIX9n+kPPa3WnVLFQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDp24ETMQQQFBBTOxSbVt2zZFNJOpk9FkUlRSHrzajSzAiEAkqMJQXR+KQUUuqUMjhyhcX4RX0gQA9os//Bh/67H6PA="}]},"_from":".","_npmVersion":"1.2.23","_npmUser":{"name":"puffnfresh","email":"brian@brianmckenna.org"},"maintainers":[{"name":"puffnfresh","email":"brian@brianmckenna.org"}]}},"readme":"# Fo (Fantasy Overloading)\n\nOverloaded operators for [Fantasy\nLand](https://github.com/puffnfresh/fantasy-land) compatible\nJavaScript:\n\n  * `>=` Monad chain:\n\n        fo()(\n            Option.Some(1) >= function(x) {\n                return x < 0 ? Option.None : Option.Some(x + 2);\n            }\n        ).getOrElse(0) == 3;\n\n  * `<` Monad sequence:\n\n        fo()(\n            Option.Some(1) < Option.Some(2)\n        ).getOrElse(0) == 2;\n\n  * `%` Functor map:\n\n        bilby.fo()(\n            bilby.some(1) % add(2)\n        ).getOrElse(0) == 3;\n\n  * `*` Applicative ap(ply):\n\n        fo()(\n            Option.Some(add) * Option.Some(1) * Option.Some(2)\n        ).getOrElse(0) == 3;\n\n  * `<<` Compose:\n\n        fo()(\n            add(1) << times(2)\n        )(3) == 7;\n\n  * `>>` Compose reverse:\n\n        fo()(\n            add(1) >> times(2)\n        )(3) == 8;\n\n  * `+` Semigroup concat:\n\n        fo()(\n            Option.Some([1, 2]) + Option.Some([3, 4])\n        ).getOrElse([]) == [1, 2, 3, 4];\n\n  * `-` Group minus:\n\n        fo()(\n            Option.Some(1) - Option.Some(2)\n        ).getOrElse(0) == -1;\n\n## fo()(a)\n\nCreates a new syntax scope. The `a` expression is allowed multiple\nusages of a single operator per `fo` call.\n\nFor most operations, the associated name will be called on the\noperands. for example:\n\n    fo()(Option.Some([1, 2]) + Option.Some([3, 4]))\n\nDesugars into:\n\n    Option.Some([1, 2]).concat(Option.Some([3, 4]))\n\nThe exceptions are `andThen`, `sequence` and `minus`. They are\nderived from Compose, Monad and Group, respectively.\n\n## fo.setValueOf(proto)\n\nUsed to mutate the `valueOf` property on `proto`. Necessary for\nthe `fo` block's operator overloading. Falls back to the objects\nexisting `valueOf` if not in a `fo` block.\n\n**Caution:** this mutates `proto`. The new `valueOf` tries to use\nthe original behaviour when not in a `fo` block but may not be\nsafe.\n","maintainers":[{"name":"puffnfresh","email":"brian@brianmckenna.org"}],"time":{"modified":"2022-06-18T02:41:40.066Z","created":"2013-06-03T17:06:55.741Z","0.1.0":"2013-06-03T17:06:56.542Z","0.1.1":"2013-06-03T19:50:10.901Z"},"author":{"name":"Brian McKenna"},"repository":{"type":"git","url":"git://github.com/puffnfresh/fo.git"},"users":{"rockymadden":true}}