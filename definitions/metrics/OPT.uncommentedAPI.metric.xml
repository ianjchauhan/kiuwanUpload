<?xml version="1.0" encoding="UTF-8"?>

<metric-definition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.optimyth.com/schema/definitions/metric" 
    version="1.1">

  <metric id="OPT.uncommentedAPI" unit="" aggregation="sum" aggregationScope="program">

    <!-- Criteria values: better is, scopes, language parsers, etc. -->
    <criteria-values>
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_TYPE.SIZE" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_HIERARCHY.SIZE.CODE" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.BETTER_IS.LOWER" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.SYSTEM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.PROGRAM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET" />
    </criteria-values>

    <!-- Valid range -->
    <range>
      <minimum value="0" included="true" />
      <maximum value="+inf" included="false" />
    </range>

    <!-- Metric thresholds (up to three) -->
    <thresholds />

    <!-- Metric parameters (applies to implementations that reference them) -->
    <parameters />

    <!-- Metric implementations for each language parser -->
    <implementations>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
        <internal-name id="OPT.ABAP.SIZE.UNCOMMENTED_API" />
        <java-class>com.als.abap.metrics.PublicMethodsWoutCommentsAbapMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <internal-name id="OPT.COBOL.SIZE.UNCOMMENTED_API" />
        <java-class>com.als.cobol.metrics.PublicMethodsWoutCommentsCobolMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
        <internal-name id="OPT.CSHARP.SIZE.UNCOMMENTED_API" />
        <java-class>com.optimyth.csharp.metrics.PublicMethodsWoutCommentsCsharpMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
        <internal-name id="OPT.CPP.SIZE.UNCOMMENTED_API" />
        <java-class>com.als.cpp.metrics.PublicMethodsWoutCommentsCppMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
        <internal-name id="OPT.JAVA.SIZE.UNCOMMENTED_API" />
        <java-class>com.als.java.metrics.PublicMethodsWoutCommentsJavaMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
        <internal-name id="OPT.JS.UNCOMMENTED_API" />
        <java-class>com.optimyth.qaking.javascript.metrics.PublicMethodsWoutCommentsJavaScriptMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
        <internal-name id="OPT.OBJECTIVEC.SIZE.UNCOMMENTED_API" />
        <java-class>com.optimyth.qaking.objectivec.metrics.PublicMethodsWoutCommentsMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
        <internal-name id="OPT.PLSQL.SIZE.UNCOMMENTED_API" />
        <java-class>com.als.plsql.metrics.PublicMethodsWoutCommentsPlsqlMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
        <internal-name id="OPT.VB6.SIZE.UNCOMMENTED_API" />
        <java-class>com.optimyth.qaking.vb6.metrics.PublicMethodsWoutCommentsVB6MetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
        <internal-name id="OPT.VBNET.SIZE.UNCOMMENTED_API" />
        <java-class>com.optimyth.vbnet.metrics.PublicMethodsWoutCommentsVBnetMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      
      <reference><![CDATA[Optimyth (http://www.optimyth.com)]]></reference>
    </implementations>

    <!-- Code examples for each language parser -->
    <code-examples>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
        <code-example name="metricCodeExampleAbap" result-value="1">
<![CDATA[
CLASS cl_bcm_sdn_holiday_model DEFINITION
  PUBLIC
  INHERITING FROM cl_bsp_model
  FINAL
  CREATE PUBLIC.

PUBLIC SECTION.

  types:
    begin of T_HOLIDAY,
          start type D,
          end   type D,
          days  type I,
          comment type string,
         end of T_HOLIDAY .
  types:
    T_HOLIDAYS TYPE STANDARD TABLE OF T_HOLIDAY .

  data HOLIDAYS_TAKEN type T_HOLIDAYS .
  data HOLIDAY_START type D .
  data HOLIDAY_END type D .
  data HOLIDAY_DAYS type I .
  data HOLIDAY_COMMENT type STRING .
  data HOLIDAY_AVAILABLE type I .

  METHODS constructor.
ENDCLASS.


CLASS cl_bcm_sdn_holiday_model IMPLEMENTATION.

METHOD constructor.                                  "1

  FIELD-SYMBOLS: <holiday> LIKE LINE OF me->holidays_taken.

  APPEND INITIAL LINE TO me->holidays_taken ASSIGNING <holiday>.
  <holiday>-start   = '20040102'.
  <holiday>-end     = '20040109'.
  <holiday>-days    = 6.
  <holiday>-comment = 'Extended Christmas'.

  APPEND INITIAL LINE TO me->holidays_taken ASSIGNING <holiday>.
  <holiday>-start   = '20040203'.
  <holiday>-end     = '20040203'.
  <holiday>-days    = 1.
  <holiday>-comment = 'Birthday!'.

  APPEND INITIAL LINE TO me->holidays_taken ASSIGNING <holiday>.
  <holiday>-start   = '20040419'.
  <holiday>-end     = '20040423'.
  <holiday>-days    = 5.
  <holiday>-comment = 'Kindergarten closed :('.

  APPEND INITIAL LINE TO me->holidays_taken ASSIGNING <holiday>.
  <holiday>-days    = 19.
  <holiday>-comment = 'Available Holiday'.

  me->holiday_available = 19.

ENDMETHOD.

ENDCLASS.


]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <code-example name="metricCodeExampleCobol" result-value="1">
<![CDATA[
       IDENTIFICATION DIVISION.        * 1
       PROGRAM-ID. B480K004.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
          DECIMAL-POINT IS COMMA.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
       PROCEDURE DIVISION.
           EXEC SQL
             select * from t1
           END-EXEC
           IF SQLCODE = -911 OR SQLCODE = -913 OR SQLCODE = -904
              EXIT
           END-IF
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
        <code-example name="metricCodeExampleCsharp" result-value="2">
<![CDATA[
public class ExampleClass  {

  /*
   * Default constructor
   */
  public ExampleClass() {
   initialize();
  }

  public ExampleClass(string name) {     // 1
    initialize(name);
  }

  // method comment
  public void method1() {
    doSomething();
  }

  public void method2() {               // 2
    doSomething();
  }

}
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
        <code-example name="metricCodeExampleCpp" result-value="1">
<![CDATA[
** --> ActivityData.h <-- **

  class ActivityData : public SimpleData {

    protected:
      virtual void send_def();

    public:
      ActivityData();
      void read();
  };

** --> ActivityData.cpp <-- **

  /**
   * Comments
   */
  ActivityData::ActivityData()
      : read_only(FALSE), single_execution(FALSE) {
  }

  void ActivityData::send_def() {
    doSomething();
  }

  void ActivityData::read(){     // 1
    doSomething();
  }
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
        <code-example name="metricCodeExampleJava" result-value="2">
<![CDATA[
public class ExampleClass  {

  /*
   * Default constructor
   */
  public ExampleClass() {
   initialize();
  }

  public ExampleClass(String name) {     // 1
    initialize(name);
  }

  // method comment
  public void method1() {
    doSomething();
  }

  public void method2() {                // 2
    doSomething();
  }

}
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
        <code-example name="metricCodeExampleJavaScript" result-value="3">
<![CDATA[
function methodOne(var) {                             // 1
  // do something
}

document.getElementsBySelector = function(selector) { // 2
  // do something
}

addLoadEvent: function(func) {                        // 3
  // do something
}
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
        <code-example name="metricCodeExampleObjectiveC" result-value="1">
<![CDATA[
@interface QAMyProgram

@property (nonatomic,readonly) BOOL initialized;

//Initializer with string value
- (id)initWithValue:(NSString *)initialValue;

@end   
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
        <code-example name="metricCodeExamplePlSql" result-value="2">
<![CDATA[
CREATE OR REPLACE PACKAGE BODY DebugUtils AS

  PROCEDURE proc_name(var INTEGER, var2 INTEGER) IS   -- 1
    v_len INTEGER;
    v_pos INTEGER;
    v_string VARCHAR2(50);
  BEGIN
    -- do something
  END proc_name;

  FUNCTION get_note RETURN REFCURSOR IS               -- 2
    result REFCURSOR;
  BEGIN
    -- do something
  END;

END DebugUtils;
/
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
        <code-example name="metricCodeExampleVb6" result-value="2">
<![CDATA[
Public Sub Form_Activate()               ' 1
    ' do something
End Sub

Public Function Form_Check() As Boolean  ' 2
  ' do something
End Function
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
        <code-example name="metricCodeExampleVbNet" result-value="3">
<![CDATA[
Public Class AutoClass

    Public Sub New(value As String)      ' 1
        MyBase.New()
        InitializeComponent()
    End Sub

    Public Overrides Sub Finalize()
      MyBase.Finalize()
    End Sub

    Public Sub Method(ByVal varB As Boolean)       ' 2
      ' do something
    End Sub

    Public Function ValidateMethod() As Boolean    ' 3
      ' do something
    End Function

End Class
]]>
        </code-example>
      </language-parser>

    </code-examples>

    <!-- Internationalizations for each human language -->
    <i18ns>
    <i18n ref="OPT.LANGUAGE.SPANISH">
      <name><![CDATA[API sin documentar]]></name>
      
      <description>
<![CDATA[
API sin comentarios.
]]></description>

      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
<![CDATA[
Métodos y constructores definidos como public en la declaración de la clase, los form (procedimientos) y las funciones que no tienen comentarios en las tres líneas de código previas al inicio del elemento.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
Programas cobol sin documentar; aquellos que no tienen comentarios en las tres líneas de código previas al inicio de la 'Identification Division' o en las tres líneas posteriores al final de esta misma sección.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
<![CDATA[
Métodos y constructores (no destructores, que no son invocables) con el modificador public pero no el abstract, que no tienen comentarios en las tres líneas de código previas al inicio del elemento.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
<![CDATA[
Número de funciones (no pertenecientes a clases), constructores (no destructores, que no son invocables) y  métodos public, independientemente de los modificadores adicionales (static, final, etc...) implementados en un mismo fichero, que no tienen comentarios en las tres líneas de código previas al inicio del método.

NOTA: En C++ los modificadores de acceso (public, private, etc) se encuentran normalmente sólo en los ficheros de cabecera, dentro de las clases, junto con las definiciones de los métodos y no siempre  pueden encontrarse en los ficheros que implementan esos métodos. Por lo tanto, la métrica solo funcionará correctamente si está configurado el preprocesador de C++ de forma que el código de los ficheros de cabecera se embeba al analizar los ficheros .cpp. De esta forma, si la configuración del preprocesador es incorrecta, o no se encuentran los ficheros de cabecera, o no se pueden parsear, no se podrán contar correctamente el número de métodos públicos implementados.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
<![CDATA[
Métodos y constructores con el modificador public pero no el abstract, que no tienen comentarios en las líneas de código previas al inicio del elemento. Los métodos de las clases internas también se incluyen. No se tienen en cuenta las interfaces.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
<![CDATA[
Funciones definidas en un mismo fichero que no tienen documentación en las tres líneas de código previas al inicio del método. Solo se tienen en cuenta las funciones de primer nivel, nunca las anidadas, o pasadas como parametro de otras o similar.
]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
<![CDATA[
Propiedades y métodos definidos en un protocolo o en el interfaz de una clase que no tienen documentación en las tres líneas de código previas a la declaración.

Las propiedades y métodos definidas en extensiones de clases no se contabilizan.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
<![CDATA[
Funciones y procedimientos públicos implementados en un mismo fichero que no tienen documentación en las tres líneas de código previas al inicio del método.

NOTA:
Todo procedimiento declarado en la Especificación del paquete tiene carácter público.
Todo procedimiento declarado y desarrollado en el Cuerpo del paquete tiene carácter privado y es sólo visible por los miembros del paquete.

Buscaremos funciones y procedimientos implementados en el cuerpo y declarados en la especificación. Si la especificación se encuentra en un fichero aparte, no será posible detectar que se trata de una función/procedimiento público (no se realiza análisis global).
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
<![CDATA[
Métodos (Sub y Function) definidos en todas las clases (fichero .cls) y funciones (Sub y Function) definidas fuera de clases (ficheros no .cls), con el modificador "Public" que no tienen documentación en las tres líneas de código previas al inicio del método.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
<![CDATA[
Métodos y constructores (no destructores, que no son invocables) con el modificador Public pero no el MustOverride, que no tienen comentarios en las tres líneas de código previas al inicio del elemento.
]]>
        </implementation-description>

      </implementation-descriptions>
      <parameters />
    </i18n>

    <i18n ref="OPT.LANGUAGE.ENGLISH">
      <name><![CDATA[Not documented API]]></name>
      
      <description>
<![CDATA[
API without comments.
]]></description>

      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
<![CDATA[
Methods and constructors defined as public in the class declaration, form (procedures) and functions without comments in the three lines of code above the element's first line.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
Cobol programs without documentation, those that do not have comments in the three lines above the begin of the 'Identification Division' or in the three lines below the ending of the same section.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
<![CDATA[
Methods and constructors (not destructors, which are not callable) with "public" modifier but not "abstract", without comments in the three lines of code above the element's first line.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
<![CDATA[
Number of functions (not belonging to classes), constructors (not destructors, which are not callable) and public methods, regardless additonal modifiers (static, final, etc...), implemented in the same file, without comments in the three lines of code above the element's first line.

NOTE: Access modifiers in C++ (public, private, etc...) are usually located in header files, inside classes alongside methods definitions, so sometimes it is not possible to find them in the files where the methods are implemented. The metric will only work properly if the C++ preprocessor is enabled, so the header files code is embedded in the .cpp files analysis. On this way, if the preprocessor configuration is incorrect, or the header files can not be found or parsed, then it will not be possible to count the number of public implemented methods properly.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
<![CDATA[
Methods and constructors with the "public" modifiers but not the "abstract", without comments in the lines of code above the element's first lines. Methods of inner classes are also counted. Interfaces are not taken into account.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
<![CDATA[
Functions defined in the same file without comments in the three lines of code above the element's first lines. Only counts first level functions, not the nested ones or passed as parameter of others or similar cases.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
<![CDATA[
Properties and methods defined in protocols or class interfaces without comments in the three lines of code above the declaration.

Properties and methods defined in class extensions are ignored. 
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
<![CDATA[
Public Functions and Procedures implemented in the same file without comments in the three lines of code above the element's first line

NOTE:
Any procedure declared in the package specification is public.
Any procedure declared and implemented in the package body is private and only visible by the package members.

The metric looks for functions and procedures implemented in the body and declared in the specification. If the specification is located in a separeted file, it will not be possible to check if the function/procedure is a public one (not performing global analysis).
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
<![CDATA[
Methods (Sub and Function) defined in classes (.cls files) and functions (Sub and Function) defined outside classes (not .cls files) with the "Public" modifier without comments in the three lines of code above the element's first line.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
<![CDATA[
Methods and constructors (not destructors, which are not callable) with the "Public" modifer, but not the "MustOverride", without comments in the three lines of code above the element's first line.
]]>
        </implementation-description>

      </implementation-descriptions>

      <parameters />
    </i18n>
    </i18ns>
  </metric>
</metric-definition>
