<?xml version="1.0" encoding="UTF-8"?>

<metric-definition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.optimyth.com/schema/definitions/metric" 
    version="1.1">

  <metric id="OPT.execSql" unit="" aggregation="sum" aggregationScope="program">

    <!-- Criteria values: better is, scopes, language parsers, etc. -->
    <criteria-values>
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_TYPE.COUPLING" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_HIERARCHY.COUPLING" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.BETTER_IS.NA" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.SYSTEM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.PROGRAM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL" />
    </criteria-values>

    <!-- Valid range -->
    <range>
      <minimum value="0" included="true" />
      <maximum value="+inf" included="false" />
    </range>

    <!-- Metric thresholds (up to three) -->
    <thresholds />

    <!-- Metric parameters (applies to implementations that reference them) -->
    <parameters />

    <!-- Metric implementations for each language parser -->
    <implementations>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <internal-name id="OPT.COBOL.COUPLING.EXECS" />
        <java-class>com.als.cobol.metrics.ExecsMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      
      <reference><![CDATA[Optimyth (http://www.optimyth.com)]]></reference>
    </implementations>

     <!-- Code examples for each language parser -->
    <code-examples>
    <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <code-example name="metricCodeExampleCobol" result-value="1">
<![CDATA[
      ******************************************************************        
      * PROCESS                                                        *        
      ******************************************************************        
      * A SELECT OF THE TABLE OF USERS CARRIES OUT FOR THE CDUSUARIO   *        
      * PAST HOW PARAMETER. IT PICKS UP THE ADDITIONAL INFORMATION OF  *        
      * THE ONE                                                        *        
      * USER AND IT RETURNS THEM HOW MESSAGE RETURN.                   *        
      *                                                                *        
      ******************************************************************        
       2000-PROCESS.                                                            
           EXEC SQL                                                      EXEC 1                                              
               SELECT *                                                         
                 INTO :WT-TABLE-USE                                             
                 FROM KAETS1T                                                   
                WHERE (CDUSUAR = :WT-CDUSUAR) AND                               
                      (CDEMPRES = :WT-CDEMPRES)                                 
           END-EXEC.                                                            
           IF (SQLCODE = WN-SQLCODE-OK)                                         
              PERFORM 2100-RETURN-RECORD                                        
                 THRU 2100-RETURN-RECORD-EXIT                                   
           ELSE                                                                 
              IF (SQLCODE = WN-SQLCODE-NTFND)                                   
                  PERFORM 2200-NTFND-RECORD                                     
                     THRU 2200-NTFND-RECORD-EXIT                                
              ELSE                                                              
                  PERFORM 9999-MANAGEM-ERRORS                                   
                     THRU 9999-MANAGEM-ERRORS-EXIT                              
              END-IF                                                            
           END-IF.                                                              
                                                                                                                                                              
]]>
        </code-example>
      </language-parser>
    </code-examples>

    <!-- Internationalizations for each human language -->
    <i18ns>
    <i18n ref="OPT.LANGUAGE.SPANISH">
      <name><![CDATA[Operaciones 'EXEC SQL']]></name>
      
      <description>
<![CDATA[
Número de exec SQL por programa. Una métrica que da una idea de qué programas están referenciando más consultas a base de datos (la métrica no mide el comportamiento "dinámico" en lo que respecta a consultas lanzadas en tiempo de ejecución).

Una práctica convencional es modularizar ejecuciones SQL en "programas de acceso a base de datos", y dejar que la capa de negocio invoque a los programas de acceso a base de datos mediante sentencias CALL, pero la mejor estrategia para desacoplar la lógica de negocio de la lógica de base de datos pertenece a la arquitectura del sistema.
]]>
      </description>

      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
Contabiliza EXEC SQL en un programa.
NOTA: cuenta tanto declaraciones INCLUDE (sentencias EXEC en la WORKING-STORAGE SECTION) como sentencias EXEC (en la PROCEDURE DIVISION).
            ]]>
            </implementation-description>

      </implementation-descriptions>
      <parameters />
    </i18n>

    <i18n ref="OPT.LANGUAGE.ENGLISH">
      <name><![CDATA[Operations 'EXEC SQL']]></name>
      
      <description>
<![CDATA[
Number of exec SQL per program. A metric that gives an indication of which programs are referencing more SQL operation (the metric does not measure the "dynamic" behaviour of the program with respect to database queries executed at runtime).

A conventional practice is to modularize SQL execution in "database access programs", and let the business Cobol programs invoke the database access programs via CALL statements, but the best strategy to decouple business logic from database logic belongs to system architecture.
]]>
      </description>

      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
Counts EXEC SQL in a program.
NOTE: counts both INCLUDED declarations (EXEC statements in WORKING-STORAGE SECTION) and real EXEC statements (in PROCEDURE DIVISION)
]]>
            </implementation-description>

      </implementation-descriptions>
      <parameters />
    </i18n>
    </i18ns>
  </metric>
</metric-definition>
