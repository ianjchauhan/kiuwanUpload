<?xml version="1.0" encoding="UTF-8"?>

<metric-definition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.optimyth.com/schema/definitions/metric" 
    version="1.1">

  <metric id="OPT.ccn" unit="" aggregation="sum" aggregationScope="program">

    <!-- Criteria values: better is, scopes, language parsers, etc. -->
    <criteria-values>
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_TYPE.COMPLEXITY" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_HIERARCHY.COMPLEXITY" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.BETTER_IS.LOWER" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.SYSTEM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.PROGRAM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.FUNCTION" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP" />
      <!-- GMetrics-0.3.jar is not compatible with groovy-all-1.5.6.jar, so CCN Groovy metrics fails 
           uncomment when groovy library updates 
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.GROOVY" />     
      -->
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PYTHON" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQLSCRIPT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SWIFT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG4" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET" />
    </criteria-values>

    <!-- Valid range -->
    <range>
      <minimum value="0" included="true" />
      <maximum value="+inf" included="false" />
    </range>

    <!-- Metric thresholds (up to three) -->
    <thresholds>
      <criterium-value>
        <threshold from="0.00" to="10.00" meaning="good" />
        <threshold from="10.00" to="20.00" meaning="regular" />
        <threshold from="20.00" to="+inf" meaning="bad" />
      </criterium-value>
    </thresholds>

    <!-- Metric parameters (applies to implementations that reference them) -->
    <parameters />

    <!-- Metric implementations for each language parser -->
    <implementations>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
        <internal-name id="OPT.ABAP.COMPLEXITY.CCN" />
        <java-class>com.als.abap.metrics.CyclomaticComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
        <internal-name id="OPT.C.COMPLEXITY.CCN" />
        <java-class>com.als.cpp.metrics.CyclomaticComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>      

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
        <internal-name id="OPT.CSHARP.COMPLEXITY.CCN" />
        <java-class>com.optimyth.csharp.metrics.CyclomaticComplexityCsharpMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
        <internal-name id="OPT.CPP.COMPLEXITY.CCN" />
        <java-class>com.als.cpp.metrics.CyclomaticComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <internal-name id="OPT.COBOL.COMPLEXITY.CCN" />
        <java-class>com.als.cobol.metrics.CyclomaticComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <!-- GMetrics-0.3.jar is not compatible with groovy-all-1.5.6.jar, so CCN Groovy metrics fails 
           uncomment when groovy library updates 
           
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.GROOVY">
        <internal-name id="OPT.GROOVY.COMPLEXITY.CCN" />
        <java-class>com.optimyth.qaking.groovy.metrics.CyclomaticComplexityGroovyMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>      
       -->
       
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
        <internal-name id="OPT.JCL.COMPLEXITY.CCN" />
        <java-class>com.als.jcl.metrics.CyclomaticComplexityJclMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
        <internal-name id="OPT.JAVA.COMPLEXITY.CCN" />
        <java-class>com.als.java.metrics.CyclomaticComplexityJavaMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
        <internal-name id="OPT.JS.CCN" />
        <java-class>com.optimyth.qaking.javascript.metrics.CyclomaticComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
        <internal-name id="OPT.NATURAL.COMPLEXITY.CCN" />
        <java-class>com.optimyth.qaking.natural.metrics.CyclomaticComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
        <internal-name id="OPT.OBJECTIVEC.CCN" />
        <java-class>com.optimyth.qaking.objectivec.metrics.CyclomaticComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
        <internal-name id="OPT.ORACLEFORMS.CCN" />
        <java-class>com.optimyth.qaking.oracleforms.metrics.CyclomaticComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
        <internal-name id="OPT.PHP.CCN" />
        <java-class>com.optimyth.qaking.php.metrics.CyclomaticComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
        <internal-name id="OPT.PLSQL.COMPLEXITY.CCN" />
        <java-class>com.als.plsql.metrics.CyclomaticComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
        <internal-name id="OPT.POWERSCRIPT.COMPLEXITY.CCN" />
        <java-class>com.optimyth.qaking.powerscript.metrics.CyclomaticComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PYTHON">
        <internal-name id="OPT.PYTHON.COMPLEXITY.CCN" />
        <java-class>com.optimyth.python.metrics.CyclomaticComplexityPythonMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>  

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQLSCRIPT">
        <internal-name id="OPT.SQLSCRIPT.COMPLEXITY.CCN" />
        <java-class>com.optimyth.qaking.hana.metrics.CyclomaticComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SWIFT">
        <internal-name id="OPT.SWIFT.COMPLEXITY.CCN" />
        <java-class>com.optimyth.qaking.swift.metrics.CyclomaticComplexitySwiftMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>          
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG">
        <internal-name id="OPT.RPG.COMPLEXITY.CCN" />
        <java-class>com.optimyth.rpg.metrics.CyclomaticComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG4">
        <internal-name id="OPT.RPG4.COMPLEXITY.CCN" />
        <java-class>com.optimyth.rpg4.metrics.CyclomaticComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
        <internal-name id="OPT.VB6.COMPLEXITY.CCN" />
        <java-class>com.optimyth.qaking.vb6.metrics.CyclomaticComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
        <internal-name id="OPT.VBNET.COMPLEXITY.CCN" />
        <java-class>com.optimyth.vbnet.metrics.CyclomaticComplexityVBnetMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      
      <reference><![CDATA[Optimyth (http://www.optimyth.com)]]></reference>

    </implementations>

    <!-- Code examples for each language parser -->
    <code-examples>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
        <code-example name="metricCodeExampleAbap" result-value="7">
<![CDATA[
* Cyclomatic complexity by function: 1 + count(CCNsenteces)
* Cyclomatic complexity by file: sum(functionCCN)

*&--------------------------------------------------------------------*
*& Form output
*&--------------------------------------------------------------------*
FORM OUTPUT.                                                       " FUNCTION CCN = 2
 WRITE / SY-ULINE(66).
 LOOP AT IT_LDBN.                                                  " CCN
  WRITE: / SY-VLINE,
   IT_LDBN-CHECK AS CHECKBOX,
   SY-VLINE,
   (15) IT_LDBN-STRUCTURE,
   SY-VLINE,
   (40) IT_LDBN-NODETEXT,
   SY-VLINE.
 ENDLOOP.
 WRITE / SY-ULINE(66).
ENDFORM. "output

FUNCTION Z_IDOC_INBOUND_ASYNCHRONOUS.                              " FUNCTION CCN = 5
data e1edp16 type e1edp16.
loop at idoc_control_rec_40                                        " CCN
  where mestyp = 'DELINS'.
  loop at IDOC_DATA_REC_40                                         " CCN
      where docnum = idoc_control_rec_40-docnum and                " CCN
  segnam = 'E1EDP16'.
    move IDOC_DATA_REC_40-sdata to e1edp16.
    IF not E1EDP16-PRGRS CA 'DWMI'.                                " CCN
      delete IDOC_DATA_REC_40.
    ENDIF.
  endloop.
endloop.
CALL FUNCTION 'IDOC_INBOUND_ASYNCHRONOUS'
  TABLES
    idoc_control_rec_40       = IDOC_CONTROL_REC_40
    idoc_data_rec_40  = IDOC_DATA_REC_40.
ENDFUNCTION.
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
        <code-example name="metricCodeExampleC" result-value="2.0"><![CDATA[
#include <stdio.h>
#define LAST 10

int main()
{
  int i, sum = 0;
   
  for ( i = 1; i <= LAST; i++ ) {
    sum += i;
  }
  
  printf("sum = %d\n", sum);
  return 0;
}
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
        <code-example name="metricCodeExampleCsharp" result-value="9">
<![CDATA[
// Cyclomatic complexity by function: 1 + count(CCNsenteces)
// Cyclomatic complexity by file: sum(functionCCN)

using System;
class Stress {

    static void generate_emision ()                                     // FUNCTION CCN = 3
    {
        foreach (string type in types){                                 // CCN
            w ("\tstatic void probe_" + type + "()\n\t{\n");
            var (type, "zero", "0");
            var (type, "min", type + ".MinValue");
            var (type, "max", type + ".MaxValue");
            wl ("");

            wl ("\t\tConsole.WriteLine (\"Testing: " + type + "\");\n");
            foreach (string t in types){                                // CCN
                wl ("\t\tConsole.WriteLine (\"   arg: " + t + " (" + type + ")\");\n");
                call (t, "zero");
                call (t, "min");
                call (t, "max");
            }
            w ("\t}\n\n");
        }
    }

    static void Main (string [] args)                              // FUNCTION CCN = 6
    {
        foreach (string arg in args){                              // CCN
            if (arg == "-h" || arg == "--help"){                   // CCN (2)
                Console.WriteLine ("-h, --help     Shows help");
                Console.WriteLine ("-c, --checked  Generate checked contexts");
                return;
            }
            if (arg == "--checked" || arg == "-c"){                // CCN (2)
                mode = "checked";
                continue;
            }
        }
        wl ("using System;\nclass Test {\n");

        generate_receptors ();
        generate_emision ();

        generate_main ();
        wl ("}\n");
    }
}
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
        <code-example name="metricCodeExampleCpp" result-value="4">
<![CDATA[
// Cyclomatic complexity by function: 1 + count(CCNsenteces)
// Cyclomatic complexity by file: sum(functionCCN)

typedef map< SOCKET, LZHL_SOCKET > GlobalMapType;

static void _putInt( BYTE*& p, unsigned int val ) {   // FUNCTION CCN = 4

    if ( val <= 127 ) {                             //CCN
      *p++ = (BYTE)val;
      break;

    }
    if (val > 200)  {                               //CCN
      *p++ = (BYTE)( 0x80 | ( val & 0x7F ) );
      val >>= 7;
      break;
    }
     while ((c = *p) != 0) {                        //CCN
      val >>= 7;
        break;
        }
}
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <code-example name="metricCodeExampleCobol" result-value="5">
<![CDATA[
      * Cyclomatic complexity by function: 1 + count(CCNsenteces)
      * Cyclomatic complexity by file: sum(functionCCN)

      ******************************************************************
      *              2110-BUSCAR-DESCRIPCION                           *
      ******************************************************************
       2110-SEARCH-DES.                                                           * PARAGRAPH CCN = 4
            CALL ROUTINE-LIST-TC USING MESSAGE-GO-TC,
                                         MESSAGE-BACK-TC
                ON EXCEPTION                                                      * CCN
                   MOVE WN-ERROR-PROG       TO CDERR
                   MOVE ROUTINE-LIST-TC     TO DSARGU1
                   MOVE WC-EXCEPTION-ERR    TO DSARGU2

                PERFORM 9999-MANAGEM-ERRORS
                   THRU 9999-MANAGEM-ERRORS-EXIT

            END-CALL.
              IF (SQLCODE = WN-SQLCODE-NTFND)                                     * CCN
                  PERFORM 2200-NTFND-RECORD
                     THRU 2200-NTFND-RECORD-EXIT
              END-IF
            EVALUATE CDERROR OF KAELVC00 OF MESSAGE-BACK-TC                       * CCN
               WHEN WN-OK
                      MOVE RECORD-DSELEMEN OF KTCLVCGE TO
                                     GROUPPFL-DSGRUPER OF KAELVSAC
               WHEN OTHER
                      MOVE CDERROR OF KAELVC00 OF MESSAGE-BACK-TC
                                               TO CDERR OF KAELCWER
                      MOVE ROUTINE-LIST-TC   TO DSARGU1 OF KAELCWER
                      PERFORM 9999-MANAGEM-ERRORS
                        THRU  9999-MANAGEM-ERRORS-EXIT
            END-EVALUATE.
       2110-SEARCH-DES-EXIT.                                                       * PARAGRAPH CCN = 1
]]>
        </code-example>
      </language-parser>
      
     <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.GROOVY">
        <code-example name="metricCodeExampleGroovy" result-value="2">
<![CDATA[
    /*
    * Block comment
    */
    File includes = new File((String)properties.basedir, 'includes')

    includes.eachDir{File platform ->
      if(platform.name=='CVS') return
      File indexFile = new File(platform, "index.list")
      int count = 0;

      //  inline comment
      indexFile.withPrintWriter { PrintWriter w ->
        int p = platform.absolutePath.length()+1
        platform.eachFileRecurse { File header ->
          if(!header.file) return;
          String headerName = header.absolutePath.substring(p).replace('\\', '/')
          if(headerName.startsWith('CVS')) return;
          w.println("${headerName}")
          count++;
        }
      }
      // inline comment
      println "Found ${count} header files for platform ${platform.name}. Index ${indexFile} generated."
    }
]]>
       </code-example>
      </language-parser> 
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
        <code-example name="metricCodeExampleJcl" result-value="4">
<![CDATA[
//CPJD0100 JOB (0000),'JARE',                                                   //CCN INIT
// CLASS=A,
// MSGCLASS=X,
// MSGLEVEL=(1,1),
// REGION=0M,
//CP704520 EXEC PGM=IOACND ,COND=(4,LT)
//CPG704510 EXEC PGM=IDCAMS ,COND=(4,LT)
//CPG704511 EXEC PGM=IDCAMS ,COND=(4,LT)
// IF CP704530.RC EQ 04 OR CP7589 EQ 05 THEN                                  //CCN + 2  IF OR
//CPG704500 EXEC PGM=SORT
// ELSE                                                                       //CCN +1
//CP704520 EXEC PGM=IOACND ,COND=(4,LT)
// ENDIF
]]>
        </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
        <code-example name="metricCodeExampleJava" result-value="8">
<![CDATA[
// Cyclomatic complexity by function: 1 + count(CCNsenteces)
// Cyclomatic complexity by file: sum(functionCCN)

class MyClase {

  public String metodo1 (){                                         // FUNCTION CCN = 8
    String myVar;
    boolean boolVar;
    this.var3 = "var3";
    myVar.add(var);
    otherVar = myVar;
    int suma = uno + dos;
    int multiplicacion = tres * cuatro;
    otroMetodo(myClase);
    otherVar.myMetodo(objClase);
    otherVar = myMetodo(var2);
    otherVar = myMetodo().otroMetodo(var4);
    otherVar = (myMetodo()).otroMetodo(var4);
    otherVar = metodo().otroMetodo().anotherMethod().field;
    otherVar = metodo().otroMetodo().anotherMethod(field);
    boolVar = (bVar || true);                                         //CCN
    if (bVar2 == true){                                               //CCN
    }
    if (bVar3.equalsIgnoreCase("cadena")){                            //CCN
    }
    if (flag){                                                        //CCN
    }
    for(int i=0; i<max; i++){                                         //CCN
    }
    while(bandera){                                                   //CCN
    }
    do {                                                              //CCN
    }while(flag2);
    return fin;
  }

}
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
        <code-example name="metricCodeExampleJavascript" result-value="8">
<![CDATA[
// Cyclomatic complexity by function: 1 + count(CCNsenteces)
// Cyclomatic complexity by file: sum(functionCCN)

function ahvnumber() {                                           // FUNCTION CCN = 8
 var ahvstring = "";
 var numZeropad1 = document.getElementById(TEXT_AHV_NO).value;
 var numZeropad = numZeropad1 + '';
 if(numZeropad.length > 0 && numZeropad1 > 0)                    // CCN (2)
  {
   while(numZeropad.length < count) {                            // CCN
     numZeropad = "0" + numZeropad;
   }

 ahvstring =  numZeropad.value;

 document.getElementById(TEXT_AHV_NO).value=ahvfinal;

 switch (mediainfo.toLowerCase())
 {
   case "not_ready":                                             // CCN
    mediaControl_StatusIcon.style.visibility = "visible";
    mediaControl_StatusIcon.src = serverContextPath + '/images/cc/redball.gif';
   case "ready":                                                 // CCN
   case "busy_ready":                                            // CCN
    mediaControl_StatusIcon.style.visibility = "visible";
    mediaControl_StatusIcon.src = serverContextPath + '/images/cc/greenball.gif';
    break;
   default:                                                      // CCN
    break;
  }
 }
}
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
        <code-example name="metricCodeExampleNatural" result-value="4">
<![CDATA[

      ** Cyclomatic complexity by function: 1 + count(CCNsenteces)
      ** Cyclomatic complexity by file: sum(functionCCN)

0350 DEFINE DATA
0360 LOCAL
0370 1 ICUBMDAT-VIEW VIEW OF ICUBMDAT
0380   2 BM-COD-PROVINCI
0390   2 BM-NUM-INVENTA
0400   2 BM-DEL-DESCRIP
0410   2 BM-COD-CUENTAGR
0420   2 BM-IMP-VALAQIVA
0430   2 BM-IMP-AMORACU
0440   2 BM-COD-ESTAMOFV
0450   2 BM-COD-TIPAMOFV
0460   2 BM-NUM-EXPAMOFV
0470   2 BM-IMP-AMORNUEV

0510 1 P-COD-ESTADO (N2)
0520 1 P-COD-TIPO  (A1)
0530 1 P-NUM-EXPDTE (A13)

0570 1 REGISTRO              (A108)
0580 1 REDEFINE REGISTRO
0590   2 R-COD-CUENTAGR             (A4)
0600   2 R-COD-PROVINCI             (N2)
0610   2 R-NUM-INVENTA              (N7)
0620   2 R-DEL-DESCRIP              (A50)
0630   2 R-IMP-VALAQIVA             (N13,2)
0640   2 R-IMP-AMORACU-ANT          (N13,2)
0650   2 R-IMP-AMORACU-NUE          (N13,2)

0690 1 W-SPD-ESTTIPEX            (A25)
0700 1 REDEFINE W-SPD-ESTTIPEX
0710   2 W-COD-ESTADO                (N2)
0720   2 W-COD-TIPO                  (A1)
0730   2 W-NUM-EXPDTE                (A13)
0740 *
0750 END-DEFINE

0790 INPUT P-COD-ESTADO
0800 INPUT P-COD-TIPO
0810 INPUT P-NUM-EXPDTE

0850 RESET W-SPD-ESTTIPEX
0860 *
0870 MOVE P-COD-ESTADO      TO W-COD-ESTADO
0880 MOVE P-COD-TIPO        TO W-COD-TIPO
0890 MOVE P-NUM-EXPDTE      TO W-NUM-EXPDTE
0900 *
0910 RE1. READ ICUBMDAT-VIEW WITH BM-SPD-ESTTIPEX EQ W-SPD-ESTTIPEX
0920 *
0930   IF  BM-COD-ESTAMOFV      NE W-COD-ESTADO OR                         --> CCN
0940       BM-COD-TIPAMOFV      NE W-COD-TIPO   OR                         --> CCN
0950       BM-NUM-EXPAMOFV      NE W-NUM-EXPDTE                            --> CCN
0960     ESCAPE BOTTOM
0970   END-IF
0980 *
0990   RESET REGISTRO
1000   MOVE  BM-COD-PROVINCI      TO R-COD-PROVINCI
1010   MOVE  BM-NUM-INVENTA       TO R-NUM-INVENTA
1020   MOVE  BM-DEL-DESCRIP       TO R-DEL-DESCRIP
1030   MOVE  BM-COD-CUENTAGR      TO R-COD-CUENTAGR
1040   MOVE  BM-IMP-VALAQIVA      TO R-IMP-VALAQIVA
1050   MOVE  BM-IMP-AMORACU       TO R-IMP-AMORACU-ANT
1060   MOVE  BM-IMP-AMORNUEV      TO R-IMP-AMORACU-NUE
1070   WRITE WORK FILE 01 REGISTRO
1080 END-READ
1090 *
1100 END
]]>
        </code-example>
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
        <code-example name="metricCodeExampleObjectiveC" result-value="2">
<![CDATA[
@implementation QAMyProgram

@synthesize initialized = _initialized;

- (id)initWithValue:(NSString *)initialValue
{
    if ((self = [super init])) 
    {
        _initialized = NO;
    }
    
    return self;
}

@end
]]>
        </code-example>
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
        <code-example name="metricCodeExampleOracleForms" result-value="5">
<![CDATA[
<?xml version = '1.0' encoding = 'UTF-8'?>
<Module version="101020002" xmlns="http://xmlns.oracle.com/Forms">
   <FormModule>
      <ProgramUnit Name="CARGAR_LISTAS" ProgramUnitType="Procedimiento" ProgramUnitText="PROCEDURE CARGAR_LISTAS IS&amp;#10;BEGIN&amp;#10;	:BLACTUPLANCO01.T_TIPCUENTA  := '*';		&amp;#10;	:BLACTUPLANCO01.T_TIPIVA     := '*';		&amp;#10;	--:BLACTUPLANCO02.T_TIPCUENTA  := '*';		&amp;#10;	:BLACTUPLANCO02.T_TIPCUENTA  := null;		&amp;#10;	:BLACTUPLANCO02.T_TIPIVA     := '*';   	&amp;#10;END;"/>
      <ProgramUnit Name="ACTIVAR_ITEM" ProgramUnitType="Procedimiento" ProgramUnitText="Procedure ACTIVAR_ITEM ( Bloque In Varchar2,&amp;#10;                         Item   In Varchar2,&amp;#10;                         SiNo   In Boolean ) Is&amp;#10;  BloqueItem     Varchar2(50) := Bloque||'.'||Item;                         &amp;#10;Begin	&amp;#10;  If Get_Item_Property(BloqueItem, Insert_Allowed) = 'TRUE' And Not SiNo Then&amp;#10;  	Set_Item_Property(BloqueItem, Insert_Allowed, Property_False);&amp;#10;  	Set_Item_Property(BloqueItem, Update_Allowed, Property_False);&amp;#10;  	Set_Item_Property(BloqueItem, Navigable     , Property_False);&amp;#10;  ElsIf Get_Item_Property(BloqueItem, Insert_Allowed) = 'FALSE' And SiNo Then	                                                          &amp;#10;  	Set_Item_Property(BloqueItem, Insert_Allowed, Property_True);&amp;#10;  	Set_Item_Property(BloqueItem, Update_Allowed, Property_True);&amp;#10;  	Set_Item_Property(BloqueItem, Navigable     , Property_True);&amp;#10;  End If;&amp;#10;End;"/>
      <ProgramUnit Name="BACKGROUND_ITEM" ProgramUnitType="Procedimiento" ProgramUnitText="Procedure BACKGROUND_ITEM ( Bloque In Varchar2,&amp;#10;                            Item   In Varchar2,&amp;#10;                            Color  In Varchar2 ) Is&amp;#10;  /* r225g225b225 Gray12 &amp;#10;     r255g255b255 White  */                            &amp;#10;  BloqueItem     Varchar2(50) := Bloque||'.'||Item;                         &amp;#10;Begin	&amp;#10;  If Get_Item_Property(BloqueItem, BackGround_Color) = 'r225g225b225' And Color = 'r255g255b255' Then&amp;#10;  	Set_Item_Property(BloqueItem, Visual_Attribute, 'ATT_WHITE');  	  	&amp;#10;  ElsIf Get_Item_Property(BloqueItem, BackGround_Color) = 'r255g255b255' And Color = 'r225g225b225' Then&amp;#10;  	Set_Item_Property(BloqueItem, Visual_Attribute, 'ATT_GRAY12');   	&amp;#10;  End If;&amp;#10;End;"/>
   </FormModule>
</Module>
]]>
        </code-example>
      </language-parser>

<language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
        <code-example name="metricCodeExamplePhp" result-value="4">
<![CDATA[
<?php
class Singleton
{
    private static $uniqueInstance = NULL;

    protected function __construct()
    {
    }

    private final function __clone()
    {
    }

    public static function getInstance()
    {
        if (self::$uniqueInstance === NULL) {
            self::$uniqueInstance = new Singleton;
        }

        return self::$uniqueInstance;
    }
}

]]>
        </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
        <code-example name="metricCodeExamplePlsql" result-value="2">
<![CDATA[
-- Cyclomatic complexity by function: 1 + count(CCNsenteces)
-- Cyclomatic complexity by file: sum(functionCCN)

CREATE OR REPLACE FUNCTION FACTURACION.FN_SAP_IT (  -- FUNCTION CCN = 2
   e_nrowid_in   ROWID
)
   RETURN NUMBER
AS
BEGIN
 BEGIN
  SELECT csap
   INTO k_ccodsap
   FROM txcodsap
   WHERE ctipocod = 'A'
    AND cipf = ee_cipfemb
    AND cdocumen = ee_cdocuemb
    AND brsch = ee_brsch;
 EXCEPTION
   WHEN NO_DATA_FOUND                                 -- CCN
      THEN
       k_ccodsap := NULL;
 END;
END fn_sap_it;
/
]]>
        </code-example>
      </language-parser>

     <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
        <code-example name="metricCodeExamplePowerscript" result-value="1">
<![CDATA[
$PBExportHeader$n_application_globalparameter.sru
forward
global type n_application_globalparameter from n_globalparameter
end type
end forward

global type n_application_globalparameter from n_globalparameter
end type
global n_application_globalparameter n_application_globalparameter

on n_application_globalparameter.create
call super::create
end on

on n_application_globalparameter.destroy
call super::destroy
end on

event ue_decimal_separator_changed;call super::ue_decimal_separator_changed;/*////////////////////////////////////////////////////////
 Event   :  n_application_globalparameter.ue_Decimal_separator_changed
 Scope: <ACCESS>public</ACCESS>
 Returns: <RETURN>(None)</RETURN>
 Parameters:  <ARGS>
          String as_new_decimal_separator:  El nuevo separador decimal del Sistema operativo y de la aplicación
 </ARGS>
 Description: <DESC>  Llamamos a la funcion global que comprueba si 
 si el separador decimal coincide con el definidio en la userdll</DESC>
//////////////////////////////////////////////////////////
 01/12/2004 Initial version by <AUTH> JMN </AUTH>
////////////////////////////////////////////////////////// */
string ls_type = "FRAME"
post gf_test_decimal_separator(ls_type)
end event
]]>
       </code-example>
      </language-parser>
      
     <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PYTHON">
        <code-example name="metricCodeExamplePython" result-value="7">
<![CDATA[
class SJISDistributionAnalysis(CharDistributionAnalysis):
    def __init__(self):
        CharDistributionAnalysis.__init__(self)
        self._mCharToFreqOrder = JISCharToFreqOrder
        self._mTableSize = JIS_TABLE_SIZE
        self._mTypicalDistributionRatio = JIS_TYPICAL_DISTRIBUTION_RATIO

    def get_order(self, aBuf):
        # for sjis encoding, we are interested
        #   first  byte range: 0x81 -- 0x9f , 0xe0 -- 0xfe
        #   second byte range: 0x40 -- 0x7e,  0x81 -- oxfe
        # no validation needed here. State machine has done that
        first_char, second_char = wrap_ord(aBuf[0]), wrap_ord(aBuf[1])
        if (first_char >= 0x81) and (first_char <= 0x9F):
            order = 188 * (first_char - 0x81)
        elif (first_char >= 0xE0) and (first_char <= 0xEF):
            order = 188 * (first_char - 0xE0 + 31)
        else:
            return -1
        order = order + second_char - 0x40
        if second_char > 0x7F:
            order = -1
        return order
]]>
       </code-example>
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQLSCRIPT">
        <code-example name="metricCodeExamplePython" result-value="0">
        </code-example>
      </language-parser>      
      
     <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SWIFT">
        <code-example name="metricCodeExampleSwift" result-value="11">
<![CDATA[
open class LoadingButton: UIButton {

  func wrapperAttributedString(_ attributedString: NSMutableAttributedString, node: XPathObject) {
   
        repeat {
            responder = nextResponder
            nextResponder = nextResponder?.next
            
        } while !(responder.isKind(of: UIViewController.self))      
        
        while (xsuperView != nil && foundSuperView == nil) {        
            
            if xsuperView.self is T {                               
                foundSuperView = xsuperView
            } else {
                xsuperView = xsuperView.superview
            }
        }           
   
         for file in fileArr {                                                   
            let path = FileManager.caches.appendingPathComponent(file)
            do {                                                                 
                let floder = try FileManager.default.attributesOfItem(atPath: path)
                for (abc, bcd) in floder {                                        
                    if abc == FileAttributeKey.size {                             
                        size += (bcd as AnyObject).integerValue
                    }
                }
            } catch {
                print(error)
            }
        }
        
      if tagName == "text", let content = ele.content, content.isNotEmpty {         
        doSomething()            
      } else if tagName == "img", let imageSrc = ele["src"] {                     
        let imageAttachment = wrapperImageAttachment(URL(string: imageSrc))
        attributedString.append(imageAttachment)   
      }   
  }  

}
]]>
       </code-example>
      </language-parser>            
      
     <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG">
        <code-example name="metricCodeExampleRPG" result-value="3">
<![CDATA[
      *
      * For a subroutine, positions 7 and 8 can be blank or contain SR.
      *
     C                         :
     C                         :
     C                     EXSR      SUBRTB
     C                         :
     C                         :
     C                          :
     CL2                   EXSR      SUBRTA
     C                         :
     C                         :
     C                         :
     C     SUBRTA          BEGSR
     C                         :
     C                         :
     C                         :
      *
      *  One subroutine can call another subroutine.
      *
     C                     EXSR      SUBRTC
     C                         :
     C                         :
     C                         :
     C                     ENDSR
     C     SUBRTB          BEGSR
     C                         :
     C                         :
     C                         :
      *
      *
      *  GOTO and TAG operations can be used within a subroutine.
      *
     C     START           TAG
     C                         :
     C                         :
     C                         :
     C   23                GOTO      END
     C                         :
     C                         :
     C                         :
     C   24                GOTO      START
     C     END             ENDSR
     C     SUBRTC          BEGSR
     C                         :
     C                         :
     C                         :
     C                     ENDSR
      *
]]>
       </code-example>
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG4">
        <code-example name="metricCodeExampleRPG" result-value="5">
<![CDATA[
      * This program is comparing two files

     F*Filename+IPEASFRlen+LKlen+AIDevice+.Keywords+++++++++++++++++++++++++
     FFILE1     IF   E             DISK
     FFILE2     IF   E             DISK

      * Loop until either FILE1 or FILE2 has reached end-of-file
      /FREE
         DOU %EOF(FILE1) OR %EOF(FILE2);
            // Read a record from each file and compare the records
            READ REC1;
            READ REC2;
            IF %EOF(FILE1) AND %EOF(FILE2);
               // Both files have reached end-of-file
               EXSR EndCompare;
             ELSEIF %EOF(FILE1);
               // FILE1 is shorter than FILE2
               EXSR F1Short;
             ELSEIF %EOF(FILE2);
               // FILE2 is shorter than FILE1
               EXSR F2Short;
             ELSE;
               // Both files still have records to be compared
               EXSR CompareRecs;
            ENDIF;
         ENDDO;
       // ...
      /END-FREE
]]>
       </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
        <code-example name="metricCodeExampleVb6" result-value="3">
<![CDATA[
' Cyclomatic complexity by function: 1 + count(CCNsenteces)
' Cyclomatic complexity by file: sum(functionCCN)

VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Option Explicit 'Control de locx vbalGrid
Public obG As vbalGrid
Public Function RowMatch(ByVal p_vaSearch As Variant, p_svClauColumna As String) As Long    ' FUNCTION CCN = 3
    Dim i As Long
    Dim j As Long

    With Me.obG
        j = .ColumnIndex(p_svClauColumna)
        For i = 1 To .Rows                            ' CCN
            If .CellText(i, j) = p_vaSearch Then      ' CCN
                RowMatch = i
                Exit Function
            End If
        Next i
    End With
End Function
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
        <code-example name="metricCodeExampleVbnet" result-value="13">
<![CDATA[
' Cyclomatic complexity by function: 1 + count(CCNsenteces)
' Cyclomatic complexity by file: sum(functionCCN)

Imports System
Namespace DesignLibrary

   Class History

      Friend Sub AddToHistory(uriString As String)                         ' FUNCTION CCN = 1
      End Sub

      Friend Sub AddToHistory(uriType As Uri)                              ' FUNCTION CCN = 1
      End Sub

   End Class

   Public Class Browser

      Dim uriHistory As New History()

      Sub ErrorProne()                                                      ' FUNCTION CCN = 1
         uriHistory.AddToHistory("http://www.adventure-works.com")
      End Sub

      Sub SaferWay()                                                        ' FUNCTION CCN = 1
         Try
            Dim newUri As New Uri("http://www.adventure-works.com")
            uriHistory.AddToHistory(newUri)
         Catch uriException As UriFormatException
         End Try
      End Sub

      Protected Sub validarTipo(ByVal nombre As String, ByVal tipo As String, ByVal valor As String)  ' FUNCTION CCN = 9

        Select Case tipo
            Case "Cadena"                                                   ' CCN
                Me.ValidarCampoCadena(nombre, valor)
            Case "Entidad"                                                  ' CCN
                Me.ValidarCampoEntidad(nombre, valor)
            Case "Entidad múltiple"                                         ' CCN
                Me.ValidarCampoEntidadMultiple(nombre, valor)
            Case "Número"                                                   ' CCN
                Me.ValidarCampoNumero(nombre, valor)
            Case "Fecha"                                                    ' CCN
                Me.ValidarCampoFecha(nombre, valor)
            Case "Usuario"                                                  ' CCN
                Me.ValidarCampoUsuario(nombre, valor)
            Case "Usuario múltiple"                                         ' CCN
                Me.ValidarCampoUsuarioMultiple(nombre, valor)
            Case "Booleano"                                                 ' CCN
                Me.ValidarCampoBooleano(nombre, valor)
        End Select
    End Sub
   End Class

End Namespace
]]>
        </code-example>
      </language-parser>
    </code-examples>

    <!-- Internationalizations for each human language -->
    <i18ns>
    <i18n ref="OPT.LANGUAGE.SPANISH">
      <name><![CDATA[Complejidad ciclomática]]></name>
      <description>
<![CDATA[
Desarrollada por Thomas McCabe, se usa para medir la complejidad de un programa. Mide directamente el número de caminos linealmente independientes a través del código fuente de un programa.

La fórmula para calcular la métrica se corresponde con la suma del número de condiciones y el número de retornos o salidas, donde el número de salidas nunca descenderá de 1.

Funciones/métodos separados se tratan como componentes no conexos, independientes, del grafo de control de flujo del programa. La métrica se puede agregar sumando (para una clase, sumar la complejidad ciclomática de sus métodos de instancia o clase; para un paquete/namespace, sumar la de las clases que pertenezcan a él; etc.).

De esta métrica se pueden derivar otros significados:
- Que su valor es un límite inferior del número de caminos posibles dentro del grafo de control de flujo del programa.
- Que su valor es un límite superior del número de casos de prueba necesarios para conseguir una cobertura por rama completa.
]]>
      </description>
      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
<![CDATA[
Incrementa en uno el valor de cnn por cada aparición de las instrucciones "if", "else", "elseif", "do", "while", "loop", las instrucciones "catch" y catch para excepciones del sistema, los eventos "on change", "at last", "at new" y "at end" y las intrucciones "and" y "or".
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
<![CDATA[
Incrementa en uno el valor de cnn por cada aparición de las instrucciones "if", "else if", "case", "switch", bucles "while", "do-while", "for", condiciones que incluyan los operadores || y && y el operador ternario e instrucciones etiquetadas.
]]>
        </implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
<![CDATA[
Incrementa en uno el valor de cnn por cada aparición de las instrucciones "if", "else", "else if", bucles "while", "do", "for", "foreach" y "switch", aparición operadores &, &&, ||, |, ?.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
<![CDATA[
Incrementa en uno el valor de cnn por cada aparición de las instrucciones "if", "else if", "case", "switch", bucles "while", "do-while", "for", condiciones que incluyan los operadores || y && y el operador ternario e instrucciones etiquetadas.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
Contabiliza las instrucciones "if", "perform time", "perform until clause", "evaluate phrase", "on size error", "overflow", "exception", "invalid", "at end statement", "depending", "search when", condiciones que incluyan los operadores "and" y "or". El else if como tal no existe sería un else que contendría un if e incrementaría en uno ccn.
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.GROOVY">
<![CDATA[
Incrementa en uno el valor de cnn por cada aparición de las instrucciones "if", "else if", "case", "switch", "while", "do-while", "for", "catch", aparición de los operadores "||" y "&&" y el operador ternario e instrucciones etiquetadas.
]]>
        </implementation-description>        

       <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
<![CDATA[
Incrementa en uno el valor de cnn por cada aparición de las instrucciones "if", "else" y aparición de los operadores "AND" y "OR".
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
<![CDATA[
Incrementa en uno el valor de cnn por cada aparición de las instrucciones "if", "else if", "case", "switch", "while", "do-while", "for", "catch", aparición de los operadores "||" y "&&" y el operador ternario e instrucciones etiquetadas.

NOTA: No se calcula en métodos "abstract", "native", ni cualquier método que haya sido declarado en una interfaz.
NOTA: Cuando se ejecuta esta métrica sobre código JSP, se devuelve un valor para el método artificial llamado 'jspService'. Este método contiene todo el código Java definido en los scriptlets <% ...%> y la evaluación de todas las expresion JSP <%= ... %>
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
<![CDATA[
Contabiliza el  número de sentencias "if", "else if", "case", "while", "do", "for", "for in", "for var", "for var in", "conditional expressions", "catch", así como de operadores and (&&) y or (||).
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
<![CDATA[
Contabiliza instrucciones if, ifselect, DecideOn y DecideFor, bucles for y repeat, instrucciones read, find, histogram y accept Reject. También las sentencias para controlar condiciones at start of data, at end of data, before break processing, at top of page y at end of page.

NOTA: Tenga en cuenta que en Natural se pueden tener instruciones at break, lanzamiento de excepciones "on error", "escape", "terminate" y "SuspendIdenticalSuppress" fuera de subrutinas. Por lo tanto, el valor que se muestra en program no es la suma del de las funciones sino el del fichero completo para evitar perder información.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
<![CDATA[
Contabiliza sentencias IF, ELSE IF, ?:, CASE, DO-WHILE, WHILE, FOR, FOREACH, CATCH y los operadores lógicos && y ||
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
<![CDATA[
Tiene en cuenta sólo el código PlSql embebido. Contabiliza sentencias FOR, IF y WHEN. La instrucción ELSEIF no incrementa el valor de la métrica ccn.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
<![CDATA[
Contabiliza sentencias if, else if, ?:, case, do-while, while, for, foreach, catch y los operadores lógicos && y ||
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
<![CDATA[
Contabiliza sentencias FOR, IF y WHEN. La instrucción ELSEIF no incrementa el valor de la métrica ccn.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
<![CDATA[
Contabiliza sentencias "if", "doLoop" y "For Next".
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PYTHON">
<![CDATA[
Contabiliza sentencias "for", "return", "continue", "break", "try except", "with", "if", "while" y operadores AND y OR.
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQLSCRIPT">
<![CDATA[
Complejidad ciclomática en HANA SQLScript.
]]>
        </implementation-description>        
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SWIFT">
<![CDATA[
Contabiliza sentencias "for", "do-cath", "while", "repeat-while, "if", "guard", "switch" y operadores AND y OR.
]]>
        </implementation-description>               

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG">
<![CDATA[
Contabiliza sentencias IF, ELSE IF, DO y FOR en modo free form, o sentencias IF, ELSE IF, DO, FOR y GO TO en caso contrario.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG4">
<![CDATA[
Contabiliza sentencias IF, ELSE IF, DO y FOR en modo free form, o sentencias IF, ELSE IF, DO, FOR y GO TO en caso contrario.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
<![CDATA[
Contabiliza instrucciones on ("resume", "error", "next", "goto", "minus"), "if", "else", "do while", "while end", "for each", "for", "else if", instrucciones que contengan los operadores ("and", "xor", "or", "imp", "eqv"). La instrucción "ELSEIF" no incrementa el valor de la métrica ccn.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
<![CDATA[
Contabiliza las instrucciones "if", "else", "elseif", if en una línea, "while", "do loop", "for", "case", "andalso", "orelse", "and", "or", "xor".
]]>
        </implementation-description>

      </implementation-descriptions>
      <parameters />
    </i18n>

    <i18n ref="OPT.LANGUAGE.ENGLISH">
      <name><![CDATA[Cyclomatic complexity]]></name>
      <description>
<![CDATA[
Developed by Thomas McCabe, is used to measure the complexity of a program. It directly measures the number of linearly independent paths through a program's source code.

The formula for calculating the metric corresponds to the sum of the number of conditions and the number of returns or exits, where the number of exists never descend 1.

Separate functions/methods are treated as being independent, disconnected components of the program's control flow graph. The metric can be summed-up (for a class, summing-up the cyclomatic complexity of its instance/class methods; for a package/namespace, summing-up the cyclomatic complexity of the classes belonging to that package/namespace, etc.).

Other meanings that could be derived from this metric:
- Its value is a lower bound for the number of possible paths through the control flow graph.
- Its value is an upper bound for the number of test cases that are necessary to achieve a complete branch coverage.
]]>
      </description>

      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
<![CDATA[
It increases in one the value of cnn for every appearance of instructions "if" and "elseif",  loops "do", "while" and "loop", the instructions "catch" and "catch" for system exceptions, the events "on change", "at last" , "at new" and "at end" and the instructions "and" and "or".
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
<![CDATA[
It increases in one the value of cnn for every appearance of instructions "if", "else if", "case", "switch", loops "while", "do-while", "for", conditions that include operators || and &&, the ternary operator and labeled instructions.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
<![CDATA[
It increases in one the value of cnn for every appearance of instructions "if", "else", "else if", loops "while", "do", "for", "foreach" and "switch" and appearance of operators &, &&, ||, |, ?.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
<![CDATA[
It increases in one the value of cnn for every appearance of instructions "if", "else if", "case", "switch", loops "while", "do-while", "for", conditions that include operators || and &&, the ternary operator and labeled instructions.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
Counts instructions "if", "perform time", "until perform clause", "evaluate phrase", "on size error", "overflow", "exception", "invalid", "at end statement", "depending", "search when", conditions including operators "and" and "or". The else if as such does not exist it would be an else that would contain an if and would increase in one ccn.
]]>
        </implementation-description>

       <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.GROOVY">
<![CDATA[
It increases in one the value of cnn for every appearance of instructions "if", "else if", "case", "switch", loops "while", "do-while", "for", "catch", conditions that include operators || and && , the ternary operator and labeled instructions.
]]>
        </implementation-description>                
        
       <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
<![CDATA[
It increases in one the value of cnn for every appearance of instructions "if", "else" and conditions that includes "AND" and "OR" operators.
]]>
        </implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
<![CDATA[
It increases in one the value of cnn for every appearance of instructions "if", "else if", "case", "switch", loops "while", "do-while", "for", "catch", conditions that include operators || and && , the ternary operator and labeled instructions.

NOTE: Do not calculate in abstract, native o any other methods declared in an interface.
NOTE: When execute this metric over JSP code, it returns value for an artificial method called 'jspService'. This method contains all the Java code embedded in the scriptlets <% ... %> and the evaluation of all the JPS expressions <%= ... %>
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
<![CDATA[
Counts the number of "if", "else if", "case", "while", "do", "for", "for in", "for var", "for var in", "conditional expressions", "catch", and operators "and" (&&) and "or" (||).
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
<![CDATA[
Counts instructions "if", "ifselect", "DecideOn" and "DecideFor", loops "for" and "repeat", instructions "read", "find", "histogram" and "Accept-Reject". Also counts sentences to control conditions "at start of data", "at end of data", "break before processing", "at top of page" and "at end of page".

NOTE: In Natural you can have instructions "at break", throwing exceptions "on error", "escape", "terminate" y "SuspendIdenticalSuppress"  not contained in any subroutine. Therefore, the value that appears in program is not the sum of the one in functions but it is the one of the complete file to avoid to lose information.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
<![CDATA[
Counts instructions if, else if, ?:, case, do-while, while, for, foreach, catch and the logical operators && and ||
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
<![CDATA[
It just measure PlSql embedded code. Counts FOR, IF and WHEN statements. The instruction ELSEIF does not increase the value of the metrics ccn.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
<![CDATA[
Counts instructions IF, ELSEIF, ?:, CASE, DO-WHILE, WHILE, FOR, FOREACH, CATCH and the logical operators && and ||
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
<![CDATA[
Counts FOR, IF and WHEN statements. The instruction ELSEIF does not increase the value of the metrics ccn.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
<![CDATA[
Counts "if", "doLoop" and "For Next" statements.
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PYTHON">
<![CDATA[
Counts "for", "return", "continue", "break", "try except", "with", "if", "while" statements, plus AND and OR operators.
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQLSCRIPT">
<![CDATA[
Cyclomatic complexity for HANA SQLScript.
]]>
        </implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SWIFT">
<![CDATA[
Counts "for", "do-cath", "while", "repeat-while, "if", "guard", "switch" statements, plus AND and OR operators.
]]>
        </implementation-description>        
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG">
<![CDATA[
Counts IF, ELSE IF, DO and FOR statements in free form mode, otherwise IF, ELSE IF, DO, FOR and GO TO statements.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG4">
<![CDATA[
Counts IF, ELSE IF, DO and FOR statements in free form mode, otherwise IF, ELSE IF, DO, FOR and GO TO statements.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
<![CDATA[
Counts instructions "on" (resume, error, next, goto, minus), "if", "do while", "end while", "for each", "for", "else if" statements containing the operators "and", "xor", "or", "imp" and "eqv". The instruction ELSEIF does not increase the value of the metrics ccn.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
<![CDATA[
Counts instructions "if", "else", "elseif", "if" in line, "while", "do loop", "for", "case", "andalso", "orelse", "and" , "or", "xor".
]]>
      </implementation-description>

      </implementation-descriptions>
      <parameters />
    </i18n>
    </i18ns>
  </metric>
</metric-definition>
