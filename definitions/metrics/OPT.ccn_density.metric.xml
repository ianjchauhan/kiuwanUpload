<?xml version="1.0" encoding="UTF-8"?>

<metric-definition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.optimyth.com/schema/definitions/metric" 
    version="1.1">

  <metric id="OPT.ccn_density" unit="" aggregation="avg" aggregationScope="program">

    <!-- Criteria values: better is, scopes, language parsers, etc. -->
    <criteria-values>
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_TYPE.COMPLEXITY" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_HIERARCHY.COMPLEXITY" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.BETTER_IS.NA" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.SYSTEM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.PROGRAM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQLSCRIPT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET" />
    </criteria-values>

    <!-- Valid range -->
    <range>
      <minimum value="0" included="true" />
      <maximum value="+inf" included="false" />
    </range>

    <!-- Metric thresholds (up to three) -->
    <thresholds />

    <!-- Metric parameters (applies to implementations that reference them) -->
    <parameters>
      <parameter id="sizeMetric">
        <default-value><![CDATA[sentences]]></default-value>
      </parameter>
    </parameters>

    <!-- Metric implementations for each language parser -->
    <implementations>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
        <internal-name id="OPT.ABAP.COMPLEXITY.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters ref-list="sizeMetric" />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
        <internal-name id="OPT.C.COMPLEXITY.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters ref-list="sizeMetric" />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <internal-name id="OPT.COBOL.COMPLEXITY.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters ref-list="sizeMetric" />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
        <internal-name id="OPT.CPP.COMPLEXITY.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters ref-list="sizeMetric" />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
        <internal-name id="OPT.CSHARP.COMPLEXITY.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters ref-list="sizeMetric" />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
        <internal-name id="OPT.JAVA.COMPLEXITY.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters ref-list="sizeMetric" />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
        <internal-name id="OPT.JS.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters ref-list="sizeMetric" />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
        <internal-name id="OPT.JCL.COMPLEXITY.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters ref-list="sizeMetric" />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
        <internal-name id="OPT.NATURAL.COMPLEXITY.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters ref-list="sizeMetric" />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
        <internal-name id="OPT.OBJECTIVEC.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters ref-list="sizeMetric" />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
        <internal-name id="OPT.PHP.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters ref-list="sizeMetric" />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
        <internal-name id="OPT.PLSQL.COMPLEXITY.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters ref-list="sizeMetric" />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
        <internal-name id="OPT.POWERSCRIPT.COMPLEXITY.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQLSCRIPT">
        <internal-name id="OPT.SQLSCRIPT.COMPLEXITY.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
        <internal-name id="OPT.VB6.COMPLEXITY.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters ref-list="sizeMetric" />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
        <internal-name id="OPT.VBNET.COMPLEXITY.CCNDENSITY" />
        <java-class>com.als.core.metric.CyclomaticDensityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters ref-list="sizeMetric" />
      </language-parser>

      
      <reference><![CDATA[Optimyth (http://www.optimyth.com)]]></reference>

    </implementations>

   <!-- Code examples for each language parser -->
    <code-examples>
    <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
        <code-example name="metricCodeExampleAbap" result-value="0.55">
<![CDATA[
*&--------------------------------------------------------------------*
*& Form output
*&--------------------------------------------------------------------*
FORM OUTPUT.    
 WRITE / SY-ULINE(66).
 LOOP AT IT_LDBN.
  WRITE: / SY-VLINE,
   IT_LDBN-CHECK AS CHECKBOX,
   SY-VLINE,
   (15) IT_LDBN-STRUCTURE,
   SY-VLINE,
   (40) IT_LDBN-NODETEXT,
   SY-VLINE.
 ENDLOOP.
 WRITE / SY-ULINE(66).
ENDFORM. "output

FUNCTION Z_IDOC_INBOUND_ASYNCHRONOUS.    
data e1edp16 type e1edp16.
loop at idoc_control_rec_40
  where mestyp = 'DELINS'.
  loop at IDOC_DATA_REC_40
      where docnum = idoc_control_rec_40-docnum and
  segnam = 'E1EDP16'.
    move IDOC_DATA_REC_40-sdata to e1edp16.
    IF not E1EDP16-PRGRS CA 'DWMI'.
      delete IDOC_DATA_REC_40.
    ENDIF.
  endloop.
endloop.
CALL FUNCTION 'IDOC_INBOUND_ASYNCHRONOUS'
  TABLES
    idoc_control_rec_40       = IDOC_CONTROL_REC_40
    idoc_data_rec_40  = IDOC_DATA_REC_40.
ENDFUNCTION.
]]>
      </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
        <code-example name="metricCodeExampleC" result-value="0.4"><![CDATA[
#include <stdio.h>
#define LAST 10

int main()
{
  int i, sum = 0;
   
  for ( i = 1; i <= LAST; i++ ) {
    sum += i;
  }
  
  printf("sum = %d\n", sum);
  return 0;
}
]]>
        </code-example>
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
        <code-example name="metricCodeExampleCpp" result-value="0.4">
<![CDATA[
typedef map< SOCKET, LZHL_SOCKET > GlobalMapType;
static void _putInt( BYTE*& p, unsigned int val ) {
  
    if ( val <= 127 ) {
      *p++ = (BYTE)val;
      break;

    } 
    if (val > 200)  {
      *p++ = (BYTE)( 0x80 | ( val & 0x7F ) );
      val >>= 7;
      break;
    }
     while ((c = *p) != 0) {
      val >>= 7;
        break;
        }
}
]]>
      </code-example>
      </language-parser>
   <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <code-example name="metricCodeExampleCobol" result-value="0.42">
<![CDATA[
      ******************************************************************        
      *              2110-BUSCAR-DESCRIPCION                           *        
      ******************************************************************        
       2110-SEARCH-DES.                                                         
            CALL ROUTINE-LIST-TC USING MESSAGE-GO-TC,                           
                                         MESSAGE-BACK-TC                        
                ON EXCEPTION                                                    
                   MOVE WN-ERROR-PROG       TO CDERR                            
                   MOVE ROUTINE-LIST-TC     TO DSARGU1                          
                   MOVE WC-EXCEPTION-ERR    TO DSARGU2                          
                                                                                
                PERFORM 9999-MANAGEM-ERRORS                                     
                   THRU 9999-MANAGEM-ERRORS-EXIT                                
                                                                                
            END-CALL.                                                           
              IF (SQLCODE = WN-SQLCODE-NTFND)                                   
                  PERFORM 2200-NTFND-RECORD                                     
                     THRU 2200-NTFND-RECORD-EXIT                                
              END-IF                                                            
            EVALUATE CDERROR OF KAELVC00 OF MESSAGE-BACK-TC                     
               WHEN WN-OK                                                       
                      MOVE RECORD-DSELEMEN OF KTCLVCGE TO                       
                                     GROUPPFL-DSGRUPER OF KAELVSAC              
               WHEN OTHER                                                       
                      MOVE CDERROR OF KAELVC00 OF MESSAGE-BACK-TC               
                                               TO CDERR OF KAELCWER             
                      MOVE ROUTINE-LIST-TC   TO DSARGU1 OF KAELCWER             
                      PERFORM 9999-MANAGEM-ERRORS                               
                        THRU  9999-MANAGEM-ERRORS-EXIT                          
            END-EVALUATE.                                                       
       2110-SEARCH-DES-EXIT.                                                    
]]>
      </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
        <code-example name="metricCodeExampleCsharp" result-value="0.346">
<![CDATA[
// Cyclomatic complexity by function: 1 + count(CCNsenteces)
// Cyclomatic complexity by file: sum(functionCCN)

using System;
class Stress {

    static void generate_emision ()                                     // FUNCTION CCN = 3
    {
        foreach (string type in types){                                 // CCN
            w ("\tstatic void probe_" + type + "()\n\t{\n");
            var (type, "zero", "0");
            var (type, "min", type + ".MinValue");
            var (type, "max", type + ".MaxValue");
            wl ("");

            wl ("\t\tConsole.WriteLine (\"Testing: " + type + "\");\n");
            foreach (string t in types){                                // CCN
                wl ("\t\tConsole.WriteLine (\"   arg: " + t + " (" + type + ")\");\n");
                call (t, "zero");
                call (t, "min");
                call (t, "max");
            }
            w ("\t}\n\n");
        }
    }

    static void Main (string [] args)                              // FUNCTION CCN = 6
    {
        foreach (string arg in args){                              // CCN
            if (arg == "-h" || arg == "--help"){                   // CCN (2)
                Console.WriteLine ("-h, --help     Shows help");
                Console.WriteLine ("-c, --checked  Generate checked contexts");
                return;
            }
            if (arg == "--checked" || arg == "-c"){                // CCN (2)
                mode = "checked";
                continue;
            }
        }
        wl ("using System;\nclass Test {\n");

        generate_receptors ();
        generate_emision ();

        generate_main ();
        wl ("}\n");
    }
}
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
        <code-example name="metricCodeExampleJava" result-value="0.444">
<![CDATA[
// Cyclomatic complexity by function: 1 + count(CCNsenteces)
// Cyclomatic complexity by file: sum(functionCCN)

class MyClase {

  public String metodo1 (){                                         // FUNCTION CCN = 8
    String myVar;
    boolean boolVar;
    this.var3 = "var3";
    myVar.add(var);
    otherVar = myVar;
    int suma = uno + dos;
    int multiplicacion = tres * cuatro;
    otroMetodo(myClase);
    otherVar.myMetodo(objClase);
    otherVar = myMetodo(var2);
    otherVar = myMetodo().otroMetodo(var4);
    otherVar = (myMetodo()).otroMetodo(var4);
    otherVar = metodo().otroMetodo().anotherMethod().field;
    otherVar = metodo().otroMetodo().anotherMethod(field);
    boolVar = (bVar || true);                                         //CCN
    if (bVar2 == true){                                               //CCN
    }
    if (bVar3.equalsIgnoreCase("cadena")){                            //CCN
    }
    if (flag){                                                        //CCN
    }
    for(int i=0; i<max; i++){                                         //CCN
    }
    while(bandera){                                                   //CCN
    }
    do {                                                              //CCN
    }while(flag2);
    return fin;
  }

}
]]>
        </code-example>
      </language-parser>

   <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
        <code-example name="metricCodeExampleJavascript" result-value="0.67">
<![CDATA[
function ahvnumber() {    
     var ahvstring = "";    
     var numZeropad1 = document.getElementById(TEXT_AHV_NO).value;      
     var numZeropad = numZeropad1 + ''; 
     if(numZeropad.length > 0 && numZeropad1 > 0)                    X2
       {
       while(numZeropad.length < count) {                                 
        numZeropad = "0" + numZeropad; 
       }
    
     ahvstring =  numZeropad.value;

     document.getElementById(TEXT_AHV_NO).value=ahvfinal;               
 
       switch (mediainfo.toLowerCase())
      {
      case "not_ready":                                               
         mediaControl_StatusIcon.style.visibility = "visible";
         mediaControl_StatusIcon.src = serverContextPath + '/images/cc/redball.gif';                      
      case "ready":                                                  
       case "busy_ready":                                            
          mediaControl_StatusIcon.style.visibility = "visible";
          mediaControl_StatusIcon.src = serverContextPath + '/images/cc/greenball.gif';       
             break;                                                  
        default:                                                     
              break;                                                 
                }
}
}
]]>
      </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
        <code-example name="metricCodeExampleJcl" result-value="0.308">
<![CDATA[
//CPJD0100 JOB (0000),'JARE',                                                   //CCN INIT
// CLASS=A,
// MSGCLASS=X,
// MSGLEVEL=(1,1),
// REGION=0M,
//CP704520 EXEC PGM=IOACND ,COND=(4,LT)
//CPG704510 EXEC PGM=IDCAMS ,COND=(4,LT)
//CPG704511 EXEC PGM=IDCAMS ,COND=(4,LT)
// IF CP704530.RC EQ 04 OR CP7589 EQ 05 THEN                                  //CCN + 2  IF OR
//CPG704500 EXEC PGM=SORT
// ELSE                                                                       //CCN +1
//CP704520 EXEC PGM=IOACND ,COND=(4,LT)
// ENDIF
]]>
        </code-example>
      </language-parser>

   <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
        <code-example name="metricCodeExampleNatural" result-value="0.57">
<![CDATA[
 3600 DEFINE SUBROUTINE CARGAR-ANO-TABLA                                                                                             
 3650 DECIDE FOR FIRST CONDITION                                                                                                     
 3660   WHEN TAR(WI) EQ 625                                                                                                          
 3670     MOVE 2002                   TO WANO-AUX                                                                                    
 3680     FOR I=1 TO 20                                                                                                              
 3690       MOVE WANO-AUX TO ANO-625(I)                                                                                              
 3700       ADD 1 TO WANO-AUX                                                                                                        
 3710       IF ANO-625(I) EQ WANO                                                                                                    
 3720         ESCAPE BOTTOM                                                                                                          
 3730       END-IF                                                                                                                   
 3740     END-FOR                                                                                                                    
 3750   WHEN TAR(WI) EQ 651                                                                                                          
 3760     MOVE 2002                   TO WANO-AUX                                                                                    
 3770     FOR I=1 TO 20                                                                                                              
 3780       MOVE WANO-AUX TO ANO-651(I)                                                                                              
 3790       ADD 1 TO WANO-AUX                                                                                                        
 3800       IF ANO-651(I) EQ WANO                                                                                                    
 3810         ESCAPE BOTTOM                                                                                                          
 3820       END-IF                                                                                                                   
 3830     END-FOR                                                                                                                    
 4110   WHEN NONE                                                                                                                    
 4120     IGNORE                                                                                                                     
 4130 END-DECIDE                                                                                                                     
 
 4140 END-SUBROUTINE                                                                                                                 
 4150 ************************************************************************                                                       
 4160 END     /* -------------   FIN DEL PROGRAMA   -------------------------                                                        
 4170 ************************************************************************                                                       
]]>
      </code-example>
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
        <code-example name="metricCodeExampleObjectiveC" result-value="0.5">
<![CDATA[
@implementation QAMyProgram

@synthesize initialized = _initialized;

- (id)initWithValue:(NSString *)initialValue
{
    if ((self = [super init])) 
    {
        _initialized = NO;
    }
    
    return self;
}

@end
]]>
        </code-example>
      </language-parser> 
      
   <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
        <code-example name="metricCodeExamplePhp" result-value="0.08">
<![CDATA[
<?php

  const MYCONSTANT = 'Hello World';                 // OK 
  const MYCONSTANT2 = 'Hello World';                // OK
  const MYCONSTANT_FOO = 'Hello World';             // OK 
  
  const myconstant = 'Hello World';                 // VIOLATION 
  const myconstant2 = 'Hello World';                // VIOLATION
  const myconstant_FOO = 'Hello World';             // VIOLATION 

  define("FOO",     "something");                  // OK 
  define("FOO2",    "something else");             // OK 
  define("FOO_BAR", "something more");             // OK 
  define("2FOO",    "something");                  // VIOLATION

  define("foo",     "something");                  // VIOLATION
  define("foO2",    "something else");             // VIOLATION
  define("FOO_var", "something more");             // VIOLATION
  
 
  
?>
]]>
      </code-example>
      </language-parser>      
   <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
        <code-example name="metricCodeExamplePlsql" result-value="0.4">
<![CDATA[
CREATE OR REPLACE Procedure UpdateCourse
     ( name_in IN varchar2 )
IS
      cnumber number;
      cursor c1 is
      select course_number
        from courses_tbl
        where course_name = name_in;

  BEGIN
      open c1;
      fetch c1 into cnumber;
      insert into student_courses
      ( course_name,
        course_number)
      values ( name_in,
                      cnumber );
      commit;
      close c1;
  EXCEPTION
  WHEN OTHERS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;

CREATE OR REPLACE FUNCTION FACTURACION.FN_SAP_IT (
   e_nrowid_in   ROWID                              /* Redefinicion a ROWID */
)
   RETURN NUMBER
AS
BEGIN
          BEGIN
            SELECT csap
              INTO k_ccodsap
              FROM txcodsap
             WHERE ctipocod = 'A'
               AND cipf = ee_cipfemb
               AND cdocumen = ee_cdocuemb
               AND brsch = ee_brsch;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               k_ccodsap := NULL;
         END;
END fn_sap_it; 
/
]]>
      </code-example>
      </language-parser>
     <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
        <code-example name="metricCodeExamplePowerscript" result-value="0.07692307692307693">
<![CDATA[
$PBExportHeader$n_application_globalparameter.sru
forward
global type n_application_globalparameter from n_globalparameter
end type
end forward

global type n_application_globalparameter from n_globalparameter
end type
global n_application_globalparameter n_application_globalparameter

on n_application_globalparameter.create
call super::create
end on

on n_application_globalparameter.destroy
call super::destroy
end on

event ue_decimal_separator_changed;call super::ue_decimal_separator_changed;/*////////////////////////////////////////////////////////
 Event   :  n_application_globalparameter.ue_Decimal_separator_changed
 Scope: <ACCESS>public</ACCESS>
 Returns: <RETURN>(None)</RETURN>
 Parameters:  <ARGS>
          String as_new_decimal_separator:  El nuevo separador decimal del Sistema operativo y de la aplicación
 </ARGS>
 Description: <DESC>  Llamamos a la funcion global que comprueba si 
 si el separador decimal coincide con el definidio en la userdll</DESC>
//////////////////////////////////////////////////////////
 01/12/2004 Initial version by <AUTH> JMN </AUTH>
////////////////////////////////////////////////////////// */
string ls_type = "FRAME"
post gf_test_decimal_separator(ls_type)
end event
]]>
       </code-example>
      </language-parser>
     <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQLSCRIPT">
        <code-example name="metricCodeExampleSQLScript" result-value="0">
       </code-example>
      </language-parser>      
   <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
        <code-example name="metricCodeExampleVb6" result-value="0.17">
<![CDATA[
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
'Control de locx vbalGrid_
Option Explicit 'Control de locx vbalGrid
Public obG As vbalGrid
'Purpose: retorna la fila on es troba el text indicat a la columna. Retorna 0 si es troba.
Public Function RowMatch(ByVal p_vaSearch As Variant, p_svClauColumna As String) As Long
    Dim i As Long
    Dim j As Long
    
    With Me.obG
        j = .ColumnIndex(p_svClauColumna)             
        For i = 1 To .Rows
            If .CellText(i, j) = p_vaSearch Then      
                RowMatch = i
                Exit Function
            End If
        Next i
    End With
End Function
]]>
      </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
        <code-example name="metricCodeExampleVbnet" result-value="1">
<![CDATA[
' Cyclomatic complexity by function: 1 + count(CCNsenteces)
' Cyclomatic complexity by file: sum(functionCCN)

Imports System
Namespace DesignLibrary

   Class History

      Friend Sub AddToHistory(uriString As String)                         ' FUNCTION CCN = 1
      End Sub

      Friend Sub AddToHistory(uriType As Uri)                              ' FUNCTION CCN = 1
      End Sub

   End Class

   Public Class Browser

      Dim uriHistory As New History()

      Sub ErrorProne()                                                      ' FUNCTION CCN = 1
         uriHistory.AddToHistory("http://www.adventure-works.com")
      End Sub

      Sub SaferWay()                                                        ' FUNCTION CCN = 1
         Try
            Dim newUri As New Uri("http://www.adventure-works.com")
            uriHistory.AddToHistory(newUri)
         Catch uriException As UriFormatException
         End Try
      End Sub

      Protected Sub validarTipo(ByVal nombre As String, ByVal tipo As String, ByVal valor As String)  ' FUNCTION CCN = 9

        Select Case tipo
            Case "Cadena"                                                   ' CCN
                Me.ValidarCampoCadena(nombre, valor)
            Case "Entidad"                                                  ' CCN
                Me.ValidarCampoEntidad(nombre, valor)
            Case "Entidad múltiple"                                         ' CCN
                Me.ValidarCampoEntidadMultiple(nombre, valor)
            Case "Número"                                                   ' CCN
                Me.ValidarCampoNumero(nombre, valor)
            Case "Fecha"                                                    ' CCN
                Me.ValidarCampoFecha(nombre, valor)
            Case "Usuario"                                                  ' CCN
                Me.ValidarCampoUsuario(nombre, valor)
            Case "Usuario múltiple"                                         ' CCN
                Me.ValidarCampoUsuarioMultiple(nombre, valor)
            Case "Booleano"                                                 ' CCN
                Me.ValidarCampoBooleano(nombre, valor)
        End Select
    End Sub
   End Class

End Namespace
]]>
        </code-example>
      </language-parser>

    </code-examples>

    <!-- Internationalizations for each human language -->
    <i18ns>
    <i18n ref="OPT.LANGUAGE.SPANISH">

      <name><![CDATA[Densidad de complejidad ciclomática]]></name>
      
      <description>
<![CDATA[
La densidad de complejidad ciclomática se deriva del cálculo de la complejidad ciclomática. Esta métrica muestra la complejidad ciclomática media entre las líneas de código del proyecto.

Normalmente, para cada elemento analizado, esta métrica se computa como la división entre la complejidad ciclomática y una métrica de tamaño. Dicha métrica sería idealmente "sentencias", pero si no estuviera presente o computada previamente, el usuario podría escoger la que más le conviniera (ncss, loc, funciones, métodos, programas, etc.).

La complejidad ciclomática generalmente es más alta en procedimientos más grandes. Cuántos caminos de decisión hay realmente, si se compara con líneas de código? Ahí es cuando necesita calcular la densidad de complejidad ciclomática. Gill y Kemerer llevaron a cabo un estudio que indicaba que "ha demostrado ser un predictor de mantenibilidad del producto estadísticamente sifgnificativo".
]]>
      </description>

      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
        ]]></implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
        ]]></implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQLSCRIPT">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
]]>
        </implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
<![CDATA[
División entre el valor de la complejidad ciclomática y el de una métrica de tamaño establecida por parámetro (por defecto, el número de sentencias).
        ]]></implementation-description>

      </implementation-descriptions>

      <parameters>
        <parameter ref="sizeMetric">
          <name><![CDATA[Métrica de tamaño]]></name>
          <description>
<![CDATA[
Identificador de la métrica de tamaño a utilizar como denominador en el cálculo de la densidad de complejidad ciclomática.
Los posibles valores disponibles son: operations, loc, methodsPerFile, sentences, files, ncss.
]]></description>
        </parameter>
      </parameters>
    </i18n>

    <i18n ref="OPT.LANGUAGE.ENGLISH">

      <name><![CDATA[Cyclomatic complexity density]]></name>
      
      <description>
<![CDATA[
Cyclomatic complexity density is a metric derived from cyclomatic complexity. This metric shows the average cyclomatic density of the code lines within the procedures of your project.

Typically, for each analyzed item, this metric is computed as the ratio between cyclomatic complexity and a size metric. That metric would be, ideally, "sentences", but if it is not present or computed, user can choose the metric that best describes the size (ncss, loc, functions / methods / programs, etc.).

Cyclomatic complexity is usually higher in longer procedures. How much decision is there actually, compared to lines of code? This is where you need cyclomatic density. Gill and Kemerer conducted a study that indicated that this is "shown to be a statistically significant single-value predictor of maintenance productivity".
]]>
      </description>

      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
        ]]></implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQLSCRIPT">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
<![CDATA[
Division between the value of the cyclomatic complexity and a size metric set by parameter (by default, the number of sentences).
        ]]></implementation-description>

      </implementation-descriptions>

      <parameters>
        <parameter ref="sizeMetric">
          <name><![CDATA[Size metric]]></name>
          <description>
<![CDATA[
Size metric identifier used as denominator in the cyclomatic complexity density calculation. Available values are:
operations, loc, methodsPerFile, sentences, files, ncss.
]]>
          </description>
        </parameter>
      </parameters>

    </i18n>
    </i18ns>
  </metric>
</metric-definition>
