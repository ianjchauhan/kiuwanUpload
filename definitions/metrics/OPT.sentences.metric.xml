<?xml version="1.0" encoding="UTF-8"?>

<metric-definition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.optimyth.com/schema/definitions/metric" 
    version="1.1">

  <metric id="OPT.sentences" unit="LOC" aggregation="sum" aggregationScope="program">

    <!-- Criteria values: better is, scopes, language parsers, etc. -->
    <criteria-values>
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_TYPE.SIZE" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_HIERARCHY.SIZE.CODE" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.BETTER_IS.NA" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.SYSTEM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.PROGRAM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.FOXPRO" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JSP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.TRANSACTSQL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET" />
    </criteria-values>

    <!-- Valid range -->
    <range>
      <minimum value="0" included="true" />
      <maximum value="+inf" included="false" />
    </range>

    <!-- Metric thresholds (up to three) -->
    <thresholds />

    <!-- Metric parameters (applies to implementations that reference them) -->
    <parameters />

    <!-- Metric implementations for each language parser -->
    <implementations>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
        <internal-name id="OPT.ABAP.SIZE.NSF" />
        <java-class>com.als.abap.metrics.SentencesMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
        <internal-name id="OPT.C.SIZE.LOC" />
        <java-class>com.als.cpp.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <internal-name id="OPT.COBOL.SIZE.LOC" />
        <java-class>com.als.cobol.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
        <internal-name id="OPT.CPP.SIZE.LOC" />
        <java-class>com.als.cpp.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
        <internal-name id="OPT.CSHARP.SIZE.LOC" />
        <java-class>com.optimyth.csharp.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.FOXPRO">
        <internal-name id="OPT.FOXPRO.SIZE.LOC" />
        <java-class>com.optimyth.qaking.foxpro.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
        <internal-name id="OPT.JAVA.SIZE.LOC" />
        <java-class>com.als.java.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
        <internal-name id="OPT.JS.LOC" />
        <java-class>com.optimyth.qaking.javascript.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
        <internal-name id="OPT.JCL.SIZE.LOC" />
        <java-class>com.als.jcl.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>      

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JSP">
        <internal-name id="OPT.JSP.SIZE.NSF" />
        <java-class>com.als.jsp.metrics.SentencesJspMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
        <internal-name id="OPT.NATURAL.SIZE.LOC" />
        <java-class>com.optimyth.qaking.natural.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
        <internal-name id="OPT.OBJECTIVEC.LOC" />
        <java-class>com.optimyth.qaking.objectivec.metrics.StatementsMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
        <internal-name id="OPT.ORACLEFORMS.LOC" />
        <java-class>com.optimyth.qaking.oracleforms.metrics.SentencesOracleformsMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>      
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
        <internal-name id="OPT.PHP.LOC" />
        <java-class>com.optimyth.qaking.php.metrics.StatementsMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
        <internal-name id="OPT.PLSQL.SIZE.NSF" />
        <java-class>com.als.plsql.metrics.SentencesPlSqlMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
        <internal-name id="OPT.POWERSCRIPT.SIZE.LOC" />
        <java-class>com.optimyth.qaking.powerscript.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQL">
        <internal-name id="OPT.SQL.SIZE.NSF" />
        <java-class>com.optimyth.sql.metrics.SentencesSqlMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.TRANSACTSQL">
        <internal-name id="OPT.TRANSACTSQL.SIZE.LOC" />
        <java-class>com.optimyth.qaking.tsql.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
        <internal-name id="OPT.VB6.SIZE.LOC" />
        <java-class>com.optimyth.qaking.vb6.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
        <internal-name id="OPT.VBNET.SIZE.LOC" />
        <java-class>com.optimyth.vbnet.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      
      <reference><![CDATA[Optimyth (http://www.optimyth.com)]]></reference>
    </implementations>

    <!-- Code examples for each language parser -->
    <code-examples>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
        <code-example name="metricCodeExampleAbap" result-value="12">
<![CDATA[
REPORT z_assign_casting_type.

 CLASS demo DEFINITION.                           " 1
   PUBLIC SECTION.
     CLASS-METHODS: main,
  assign_casting
    IMPORTING text  TYPE csequence
     dtype TYPE csequence.
 ENDCLASS.

 CLASS demo IMPLEMENTATION.                       " 2
   METHOD main.
     DATA: text TYPE c LENGTH 8 VALUE '20061001'. " 3
     assign_casting( text  = text dtype = 'D' ).  " 4
     assign_casting( text  = text dtype = 'N' ).  " 5
   ENDMETHOD.
   METHOD assign_casting.
     DATA: int4 TYPE i,                           " 6
  msg  TYPE c LENGTH 40.
     FIELD-SYMBOLS <fs> TYPE ANY.                 " 7
     ASSIGN text TO <fs> CASTING TYPE (dtype).    " 8
     int4 = <fs>.                                 " 9
     WRITE int4 TO msg NO-GROUPING.               " 10
     MESSAGE msg TYPE 'I'.                        " 11
   ENDMETHOD.
 ENDCLASS.

 START-OF-SELECTION.
   demo=>main( ).                                 " 12
]]>
        </code-example>
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
        <code-example name="metricCodeExampleC" result-value="5.0"><![CDATA[
#include <stdio.h>
#define LAST 10

int main()
{
  int i, sum = 0;
   
  for ( i = 1; i <= LAST; i++ ) {
    sum += i;
  }
  
  printf("sum = %d\n", sum);
  return 0;
}
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <code-example name="metricCodeExampleCobol" result-value="3">
<![CDATA[
IDENTIFICATION DIVISION.
PROGRAM-ID. B480K004.
 ENVIRONMENT DIVISION.
 CONFIGURATION SECTION.
 SPECIAL-NAMES.
    DECIMAL-POINT IS COMMA.
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.
DATA DIVISION.
FILE SECTION.
WORKING-STORAGE SECTION.
PROCEDURE DIVISION.
       EXEC SQL                                               * 1
         select * from t1
       END-EXEC
       IF SQLCODE = -911 OR SQLCODE = -913 OR SQLCODE = -904  * 2
         EXIT                                                 * 3
       END-IF
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
        <code-example name="metricCodeExampleCpp" result-value="18">
<![CDATA[
#include "BrowserClass.h"
#include "ClassData.h"
#include "ActualParamData.h"
#include "myio.h"
#include "ToolCom.h"

void ActualParamData::set_value(const AType & t) {
  if (value.type != t.type) {                                                       // 1
    if (value.type != 0)                                                            // 2
      disconnect(value.type->get_data(), 0, this, 0);                               // 3
    if ((value.type = t.type) != 0)                                                 // 4
      connect(value.type->get_data(), SIGNAL(deleted()), this, SLOT(on_delete()));  // 5
  }

  value.explicit_type = t.explicit_type;                                            // 6
}

void ActualParamData::on_delete() {
  if (value.type && value.type->deletedp()) {                                       // 7
    value.explicit_type = value.type->get_name();                                   // 8
    value.type = 0;                                                                 // 9
  }
}

void ActualParamData::send_uml_def(ToolCom * com) {
  super->write_id(com);                                                             // 10
  com->write_unsigned(rank);                                                        // 11
  value.send_def(com);                                                              // 12
}

void ActualParamData::save(QTextStream & st, QString & warning) const {
  nl_indent(st);                                                                    // 13
  st << "actual class ";                                                            // 14
  super->save(st, TRUE, warning);                                                   // 15
  nl_indent(st);                                                                    // 16
  st << "  rank " << rank << ' ';                                                   // 17
  value.save(st, warning, "value ", "explicit_value ");                             // 18
}
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
        <code-example name="metricCodeExampleCsharp" result-value="6">
<![CDATA[
using System;
using System.Collections.Generic;
using System.Text;
using Aps.Contenedores.Datos;

namespace Aps.Integracion.Asistentes
{
    [Serializable()]
    public class AEstructuras
    {
        public AEstructuras() { }

        public static void ObtenerDatosAsunto(string aAsunto,
      out string aProceso,
      out string aEntidad)
        {
  aProceso = string.Empty;                // 1
  aEntidad = string.Empty;                // 2
  string[] partes = aAsunto.Split('-');   // 3
  int lon = partes.Length;                // 4
  aProceso = partes[lon - 2];             // 5
  aEntidad = partes[lon - 1];             // 6
        }
    }
}
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.FOXPRO">
        <code-example name="metricCodeExampleJava" result-value="8">
<![CDATA[
*-- Common include
#define APLXXXXX           .T.

#include ..\..\comun\includes\foxpro.h
#include ..\..\comun\includes\msjlib.h
#include ..\..\comun\includes\msjmenu.h

#define PROC_OPEN_COMPANY    "   1"
#define PROC_OPEN_ENTRY    "   2"

#define INVOICE_NEW      .t.

#define FORM_ENTRY_EDITAR  .f.
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
        <code-example name="metricCodeExampleJava" result-value="10">
<![CDATA[
public class EngEcc{

  String field = "hello";
  CommandData commandData;
  String tipoAbucar;

  @SuppressWarnings("unchecked")
  public EngEcc(String dataSource)   {
    String var = "";
    System.out.println("Literal1");                                // 1
    doSomething(dataSource);                                       // 2
  }

  public String method(){
  if (commandData != null && commandData.getFiltros() == null) {   // 3
       tipoAbuscar = "AGE";                                        // 4
  } else if (commandData.getFiltros() == null && commandData.getPrior() != null){  // 5
    tipoAbuscar = "CT";                                            // 6
  } else {
    tipoAbuscar = "ALL";                                           // 7
  }
  for (int i=0, n=commandData.getNumFiltros(); i<n; i++){          // 8
    tipoAbuscar = Integer(i).toString() + tipoAbuscar;             // 9
  }
  return "b_" + tipoAbuscar;                                       // 10
  }

}
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
        <code-example name="metricCodeExampleJavaScript" result-value="23">
<![CDATA[
function whichModel(menuStyle){
  var aLink = document.getElementsByTagName('link')       // 1
  for(var i=0;i<aLink.length;i++){                        // 2
    if(aLink[i].href.indexOf(menuStyle) != -1){           // 3
      return true;                                        // 4
    }
  }
  return false;                                           // 5
}

var jInitial = '';                                        // 6
function getMenuParams(){
  var jFiltro = '{';                                      // 7
  var flag = 0;                                           // 8

  try{                                                    // 9
    jFiltro += "'fServer':{";                             // 10
    jFiltro += "'model':'"+getParameter('model')+"',";    // 11
    jFiltro += "'nuuma':'"+getParameter('nuuma')+"'";     // 12
    jFiltro += "},'fLocal':{";                            // 13
    if(window.location.protocol == 'file:'){              // 14
      jFiltro += "'subclass':'local'";                    // 15
    }
    jFiltro += "}}";                                      // 16

    jFServer = eval('('+jFiltro+')').fServer;             // 17
    if(jFServer.toString() === jInitial){                 // 18
      generateMenu(menu,jFiltro);                         // 19
    }else{                                                // 20
      load('container',jFServer,jFiltro);                 // 21
      jInitial = jFServer.toString();                     // 22
    }
  }catch(ex){
    alert("Error de conexión. \n"+ex.description)           // 23
  }
}
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
        <code-example name="metricCodeExampleJcl" result-value="6">
<![CDATA[
//DKP00615 EXEC PGM=ICEGENER                                  //1
//SYSUT1 DD DSN=MBVP.EI.FIX.UNLOAD.EIDTMAEC,DISP=SHR          //2
//SYSUT2 DD DSN=MBVP.DK.GDG.EIDTMAEC.RESPALDO(+1),            //3
// DISP=(NEW,CATLG,DELETE),
// SPACE=(CYL,(100,50),RLSE),UNIT=3390,
// DCB=(BKUX.MODEL,DSORG=PS,RECFM=FB,LRECL=324,BLKSIZE=0)

//*
//SYSPRINT DD SYSOUT=*                                        //4
//SYSOUT DD SYSOUT=*                                          //5
//SYSABOUT DD SYSOUT=*                                        //6
//*
]]>
        </code-example>
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JSP">
        <code-example name="metricCodeExampleJSP" result-value="14">
<![CDATA[
<%@ page language="java" %>
<%@ page import="com.model.util.ConfigProperties" %>

<html>                                                                                         <!-- 1 -->
<body>                                                                                         <!-- 2 -->
<div id="contentText">                                                                         <!-- 3 -->
  <p>@i18n:error:p_not_found@</p>                                                              <!-- 4 -->
  <p>URL: <%=request.getRequestURL()%></p>                                                     <!-- 5 -->
  <p>@i18n:error:refer@: <%=request.getHeader("Referer")%></p>                                 <!-- 6 -->
  <br/>                                                                                        <!-- 7 -->
  @i18n:error:comment@
  <a href="mailto:<%=ConfigProperties.getInstance().get("support.mail")%>">                    <!-- 8 -->
    @i18n:error:address@
  </a>
  <br/>                                                                                        <!-- 9 -->
  @i18n:error:answer@
  <br/>                                                                                        <!-- 10 -->
  @i18n:error:thank@
  <%@ page import="es.web.controller.ProjectSelectorFilter" %>
  <%                                                                                           <!-- 11 -->
    ProjectSelectorFilter filter = ProjectSelectorFilter.getInstance(request);
  %>
  <p style="background-color: #f0f0f0; padding: 3px;">@i18n:panelUC:Selector_p.filter@:</p>    <!-- 12 -->
  <p>@i18n:panelUC:projectsFilter@:                                                            <!-- 13 -->
    <input id="puc_projectsFilter" name="puc_projectsFilter" type="text"                       <!-- 14 -->
 class="text" size="50" title="@i18n:panelUC:projectsFilter.title@"
 value="<%=filter.getFilter()%>" onchange="YAHOO.projectSelectorTabConfig.filter();"
 onkeyup="YAHOO.projectSelectorTabConfig.filterWhenEnter(event);"/>
  </p>
</div>
</body>
</html>
]]></code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
        <code-example name="metricCodeExampleNatural" result-value="18">
<![CDATA[
// ...
0340 DEFINE DATA
0350 *
0360 PARAMETER
0370 1 M-CODPR(N2)
0380 1 M-INVENTA        (P7)
0390 1 W-DESCRIPCION    (A26)
0400 1 W-MENSAJE        (A22)
0410 1 W-CONT1(N7)
0420 1 FIN    (L)
0430 1 W-MOVIMIENTO     (A1)
0440 LOCAL
0450 1 M-MENSAJE        (A25)
0460 1 W-INVENTARIO     (A10)
0470 1 REDEFINE W-INVENTARIO
0480   2 W-PR (N2)
0490   2 W-P  (A1)
0500   2 W-I  (N7) (EM=9999999)
0510 END-DEFINE
0520 *

0530 ************************************************************************
0540 **       -----------  PROCESO PRINCIPAL   -----------       **
0550 ************************************************************************
0560 *

0570 ** Proceso de listado de las altas, bajas o modificaciones que
0580 ** se realizan via batch
0590 *
0600 FORMAT(1) LS=132 PS=60                                                // 1
0610 *
0620 DECIDE ON FIRST VALUE OF W-MOVIMIENTO                                 // 2
0630   VALUE 'A'
0640     MOVE 'ALTAS REALIZADAS' TO M-MENSAJE                              // 3
0650   VALUE 'B'
0660     MOVE 'BAJAS REALIZADAS' TO M-MENSAJE                              // 4
0670   VALUE 'M'
0680     MOVE 'MODIFICACIONES REALIZADAS' TO M-MENSAJE                     // 5
0690   VALUE 'E'
0700     MOVE 'ELIMINACIONES REALIZADAS' TO M-MENSAJE                       // 6
0710   VALUE 'R'
0720     MOVE 'REASIGNACIONES REALIZADAS' TO M-MENSAJE                      // 7
0730   NONE VALUE IGNORE                                                    // 8
0740 END-DECIDE
0750 *
0760 AT TOP OF PAGE (1)                                                      // 9
0770   WRITE(1) NOTITLE NOHDR USING MAP 'IC11119M'                           // 10
0780 END-TOPPAGE
0790 *
0800 IF M-CODPR NE 0                                                         // 11
0810   MOVE M-CODPR TO W-PR                                                  // 12
0820   MOVE '.' TO W-P                                                       // 13
0830   MOVE M-INVENTA TO W-I                                                 // 14
0840   WRITE(1) NOTITLE NOHDR 3X W-INVENTARIO 9X W-DESCRIPCION 7X W-MENSAJE  // 15
0850 END-IF
0860 *
0870 ** Cuando es la ultima linea  a listar presentamos el total
0880 *
0890 IF FIN EQ TRUE                                                          // 16
0900   SKIP(1) 3 LINES                                                       // 17
0910   WRITE(1) 'Nº TOTAL DE ' M-MENSAJE ':...' W-CONT1                      // 18
0920 END-IF
0930 *
0940 END
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
        <code-example name="metricCodeExampleObjectiveC" result-value="4">
<![CDATA[
@implementation QAMyProgram

/*
Version 1.0
*/

@synthesize initialized = _initialized;

- (id)initWithValue:(NSString *)initialValue
{
    if ((self = [super init])) 
    {
        // not initialized
        _initialized = NO;
    }
    
    return self;
}

@end 
]]>
        </code-example>
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
        <code-example name="metricCodeExampleOracleforms" result-value="7">
<![CDATA[
<?xml version = '1.0' encoding = 'UTF-8'?>
<Module version="101020002" xmlns="http://xmlns.oracle.com/Forms">
   <FormModule Name="FRM_ACTUPLANCO" ConsoleWindow="WIN_ACTUPLANCO" ParentType="29" DirtyInfo="true" MenuModule="" ParentName="CLA_BACKGROUND" ParentModule="DISPLAY_CLASS" Title="FRM_actuplanco" ParentFilename="DISPLAY_CLASS.olb" ParentModuleType="25">
      
      <ProgramUnit Name="POSI_CAN" ProgramUnitType="Procedimiento" ProgramUnitText="PROCEDURE POSI_CAN (WCAN varchar2, WWIN varchar2) IS&amp;#10;  
      win_ancho number;&amp;#10;  can_ancho   number;&amp;#10;  x_pos_can   number;&amp;#10;BEGIN&amp;#10;  win_ancho := get_window_property(WWIN,width);&amp;#10; 
      can_ancho := get_view_property(WCAN,width)+16;&amp;#10;  x_pos_can := (win_ancho/2)-(can_ancho/2);&amp;#10;  if x_pos_can &lt; 0 then x_pos_can := 0; end if;&amp;#10;
      set_view_property(WCAN,VIEWPORT_X_POS,x_pos_can);&amp;#10;END;"/>
     
   </FormModule>
</Module>
]]>
        </code-example>
      </language-parser>      

<language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
        <code-example name="metricCodeExamplePhp" result-value="4">
<![CDATA[
<?php

/*
 * This file is part of Twig.
 *
 * (c) Fabien Potencier
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

class Twig_Tests_Node_BlockReferenceTest extends Twig_Test_NodeTestCase
{
    /**
     * @covers Twig_Node_BlockReference::__construct
     */
    public function testConstructor()
    {
        $node = new Twig_Node_BlockReference('foo', 1);

        $this->assertEquals('foo', $node->getAttribute('name'));
    }

    /**
     * @covers Twig_Node_BlockReference::compile
     * @dataProvider getTests
     */
    public function testCompile($node, $source, $environment = null)
    {
        parent::testCompile($node, $source, $environment);
    }

    public function getTests()
    {
        return array(
            array(new Twig_Node_BlockReference('foo', 1), <<<EOF
// line 1
\$this->displayBlock('foo', \$context, \$blocks);
EOF
            ),
        );
    }
}

]]>
        </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
        <code-example name="metricCodeExamplePLSQL" result-value="10">
<![CDATA[
CREATE OR REPLACE FUNCTION IBPRISMA."FN_AVISOTRABAJADORSOCIAL" (         -- 1
   e_cdirterr_in   NUMBER,
   e_ctipocau_in   NUMBER
)
   RETURN NUMBER
AS
   e_cdirterr       NUMBER (5)     := e_cdirterr_in;
   e_ctipocau       NUMBER (5)     := e_ctipocau_in;
   v_ctramits       tpexpedi.ctramita%TYPE;
   resultado        NUMBER (5);
   resultadoaviso   NUMBER (5);
BEGIN
   BEGIN
      SAVEPOINT sp1;                                                     -- 2
      resultado := 0;                                                    -- 3
      v_ctramits := fn_asignatramitador_ts (e_cdirprov);                 -- 4

      IF v_ctramits > -1                                                 -- 5
      THEN
         resultadoaviso := fn_crearaviso (e_cdirterr, e_ctipocau);       -- 6
      END IF;

      COMMIT WORK;                                                       -- 7
      RETURN resultado;                                                  -- 8
   EXCEPTION
      /* SPCONV-WRN:(EXCEP) Emulation of Exceptions incomplete. */
      WHEN OTHERS
      THEN
         ROLLBACK WORK;                                                  -- 9
         RETURN 99;                                                      -- 10
   END;
END fn_avisotrabajadorsocial;
/
]]>
        </code-example>
      </language-parser>

     <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
        <code-example name="metricCodeExamplePowerscript" result-value="13">
<![CDATA[
$PBExportHeader$n_application_globalparameter.sru
forward
global type n_application_globalparameter from n_globalparameter
end type
end forward

global type n_application_globalparameter from n_globalparameter
end type
global n_application_globalparameter n_application_globalparameter

on n_application_globalparameter.create
call super::create
end on

on n_application_globalparameter.destroy
call super::destroy
end on

event ue_decimal_separator_changed;call super::ue_decimal_separator_changed;/*////////////////////////////////////////////////////////
 Event   :  n_application_globalparameter.ue_Decimal_separator_changed
 Scope: <ACCESS>public</ACCESS>
 Returns: <RETURN>(None)</RETURN>
 Parameters:  <ARGS>
          String as_new_decimal_separator:  El nuevo separador decimal del Sistema operativo y de la aplicación
 </ARGS>
 Description: <DESC>  Llamamos a la funcion global que comprueba si 
 si el separador decimal coincide con el definidio en la userdll</DESC>
//////////////////////////////////////////////////////////
 01/12/2004 Initial version by <AUTH> JMN </AUTH>
////////////////////////////////////////////////////////// */
string ls_type = "FRAME"
post gf_test_decimal_separator(ls_type)
end event
]]>
       </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQL">
        <code-example name="metricCodeExampleSQL" result-value="7">
<![CDATA[
drop table item_ja                                           -- 1
;
drop table product_ja                                        -- 2
;
drop table category_ja                                       -- 3
;

create table category_ja (                                   -- 4
    catid char(10) not null,
    name varchar(80) null,
    descn varchar(255) null,
    constraint pk_category_ja primary key (catid)
)
;

create table product_ja (                                    -- 5
    productid char(10) not null,
    category char(10) not null,
    name varchar(80) null,
    descn varchar(255) null,
    constraint pk_product_ja primary key (productid),
        constraint fk_product_1_ja foreign key (category)
        references category_ja (catid)
)
;

insert into repomeceda                                       -- 6
select fmescomu, cramo, npoliza, nidconre, cprov, current
from tbcesvig

insert into repomeceda                                       -- 7
select fmescomu, cramo, npoliza, nidconre, cprov, current_
from tbcesvig
;
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.TRANSACTSQL">
        <code-example name="metricCodeExampleTransactSQL" result-value="12">
<![CDATA[
/****** Object:  StoredProcedure [dbo].[PRPL_IPSFUNDO] ******/
SET ANSI_NULLS OFF                              -- 1
GO
SET QUOTED_IDENTIFIER OFF                       -- 2
GO
CREATE PROCEDURE [dbo].[PRPL_DFIWMS_IPSFUNDO]   -- 3
(
    @p_ID_SEGMENTOIPS char(36),
    @p_ID_CARTEIRA int,
    @p_CD_USUARIO char(7)
)
AS

BEGIN TRAN                                      -- 4
DECLARE @p_VL_MINIMO DECIMAL(5,2),              -- 5
    @p_VL_NEUTRO DECIMAL(5,2),
    @p_VL_MAXIMO DECIMAL(5,2)

  SELECT @p_VL_MINIMO =VL_MINIMO,               -- 6
      @p_VL_NEUTRO=VL_NEUTRO,
      @p_VL_MAXIMO=VL_MAXIMO
  FROM
    dbo.TBPL_FIWMS_IPSFUNDO  WITH(NOLOCK)
  WHERE
      ID_SEGMENTOIPS = @p_ID_SEGMENTOIPS
    AND ID_CARTEIRA = @p_ID_CARTEIRA

  DELETE                                        -- 7
    dbo.TBPL_FIWMS_IPSFUNDO
  WHERE
      ID_SEGMENTOIPS = @p_ID_SEGMENTOIPS
    AND ID_CARTEIRA = @p_ID_CARTEIRA

  if @@Error=0                                  -- 8
    INSERT INTO dbo.TBPL_FIWMS_IPSFUNDO_LOG (   -- 9
      ID_IPSFUNDOLOG,
      DS_ACAO)
    VALUES (
      newid(),
      @p_ID_SEGMENTOIPS,
      @p_CD_USUARIO,
      getdate(),
      'Excluded')

if @@Error=0                                    -- 10
  commit                                        -- 11
else
  rollback                                      -- 12

/* end SP */
GO
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
        <code-example name="metricCodeExampleVB6" result-value="15">
<![CDATA[
Private Sub cmdCalc_Click()
    For i = 0 To 2                                           ' 1
        If Text2(i).Text <> 0 And Text1(i).Text = "" Then    ' 2
  MsgBox ("Enter description")                               ' 3
  Text1(i).SetFocus                                          ' 4
        End If
    Next i

    For i = 0 To 2                                           ' 5
        sngPrice(i) = CSng(Text2(i).Text)                    ' 6
        sngSubTot = sngSubTot + sngPrice(i)                  ' 7
    Next i

    strCity = lstCity.Text                                   ' 8
    If strCity = "Capital City" Then                         ' 9
        sngTax = sngSubTot * 0.08                            ' 10
    Else
        sngTax = 0                                           ' 11
    End If

    sngTotal = sngSubTot + sngTax                            ' 12

    lblSubTot.Caption = Format(sngSubTot, "currency")        ' 13
    lblTax.Caption = Format(sngTax, "currency")              ' 14
    lblTotal.Caption = Format(sngTotal, "currency")          ' 15

End Sub
]]>
        </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
        <code-example name="metricCodeExampleVBnet" result-value="20">
<![CDATA[
Imports Bde.Aps.Gtc.Comunes.Datos.AccesoDatos
Imports Bde.Aps.Gtc.Comunes.Datos.AccesoDatos.Gea
Imports Bde.Aps.Gtc.Comunes.Datos.DataSets.Gea
Imports Bde.Aps.Gtc.AccesoGem.Negocio

Public NotInheritable Class clsConceptosAgregados

    Private Conexion As clsConexion

    Public Sub New(ByVal conexion As clsConexion)
        Me.Conexion = conexion                                                            ' 1
    End Sub

    Public Function DameValorConceptoAgregado(ByVal versionForcon As String) As Decimal

        Dim gestor As New clsDSConceptosAgregados(Conexion)                                ' 2
        Dim ds As DSTConceptosAgregados                                                    ' 3
        Dim filaEncontrada As DSTConcepAgregados.GTC_T_CONCEPTOS_AGREGADOSRow = Nothing    ' 4

        ds = gestor.DameDS(versionForcon, codConcepto, planContable, tipoCuestionario)     ' 5

        If ds Is Nothing OrElse ds.GTC_T_CONCEPTOS_AGREGADOS.Rows.Count <> 1 Then          ' 6
  Dim cBusca As New clsBuscaAgregado                                                       ' 7
  Dim ifc As New ifcProcedimientosGem                                                      ' 8

  ifc.ConsultaCNAE(agrupacion, clasificacion, sector, granSector)                          ' 9

  ar = cBusca.DameAgregado(agrupacion, sector, granSector, tamanyo)                        ' 10

  For Each idAgregado As clsIdAgregado In ar                                               ' 11
      ds = gestor.DameDS(versionForcon, codConcepto, planContable, tipoCuestionario)       ' 12

      If ds Is Nothing OrElse ds.GTC_T_CONCEPTOS_AGREGADOS.Rows.Count <> 1 Then            ' 13
      Else
filaEncontrada = Direct(ds.GTC_T_CONCEPTOS_AGREGADOS.Rows(0))                              ' 14
Exit For                                                                                   ' 15
      End If
  Next

        Else
  filaEncontrada = Direct(ds.GTC_T_CONCEPTOS_AGREGADOS.Rows(0))                            ' 16
        End If


        If Not filaEncontrada Is Nothing Then                                              ' 17
  If actualAnterior = 1 Then                                                               ' 18
      Return filaEncontrada.VALOR_ANTERIOR                                                 ' 19
  End If
        Else
  Return 0                                                                                 ' 20
        End If
    End Function

End Class
]]>
        </code-example>
      </language-parser>

    </code-examples>

    <!-- Internationalizations for each human language -->
    <i18ns>
    <i18n ref="OPT.LANGUAGE.SPANISH">
      <name><![CDATA[Sentencias]]></name>
      
      <description>
<![CDATA[
Esta métrica calcula el número de sentencias ejecutables en un programa. Programas con un número alto de sentencias son más difíciles de entender, y puede que haya que refactorizarlos, dividiendo la funcionalidad de dicho fichero entre varios, con responsabilidades bien definidas.
]]></description>

      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
<![CDATA[
Se considera sentencia un punto, una importación y una exportación, secciones privada, protegida y publica de una clase, control de impresión, exclusión (EXCLUDE), evento set, reset método, provide, operaciones aritméticas, loop, asignaciones, llamadas a funciones o procedimientos, operaciones con base de datos, creación de objetos, llamadas a sistema y sentencia de conversión de tiempo.
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
<![CDATA[
Contabiliza las instrucciones sql, sentencias precedidas por USING o USING NAMESPACE, declaraciones enum (ejemplo: enum { SPRING, SUMMER, FALL, WINTER };), declaración de tipos, listas, enlaces, funciones y clases, asignaciones, sentencias de selección if y switch, goto, break, continue, return, punto y coma, bloque try, lanzar excepciones con la intrucción throw, sentencias etiquetadas (usando Id, CASE y DEFAULT), bucles while, do-while y for.
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
Contabiliza como sentencia las intrucciones next sentece, exec, accept, acquire, add, alter, call, cancel, close, compute, commit, continue, delete, display, divide, drop, entry, evaluate, exit, format, go back, goto, if, initialize, inspect, invoke, merge, move, multiply, open, perform, read, release, return, rewrite, rollback, search, set, sort, start, stop, string, substract, unstring, write, exit, exitmethod, xml generate, xml parse, macro.
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
<![CDATA[
Contabiliza las instrucciones sql, sentencias precedidas por USING o USING NAMESPACE, declaraciones enum (ejemplo: enum { SPRING, SUMMER, FALL, WINTER };), declaración de tipos, listas, enlaces, funciones y clases, asignaciones, sentencias de selección if y switch, goto, break, continue, return, punto y coma, bloque try, lanzar excepciones con la intrucción throw, sentencias etiquetadas (usando Id, CASE y DEFAULT), bucles while, do-while y for.
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
<![CDATA[
Una sentencia puede ser una instrucción que asigne una etiqueta o una declaración de variables o constantes. También puede contener instrucciones empty, jump, asignaciones, queries, expresiones condicionales, instrucciones con anónimo, if, switch, while, do, for, foreach, break, continue, goto, return, throw, try-catch, checked, unchecked, lock,  using, yield return, yield break, unsafe y fixed.
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.FOXPRO">
<![CDATA[
Contabiliza las sentencias y declaraciones.
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
<![CDATA[
Contabiliza las instrucciones if y else, while, do, for, switch, condiciones que incluyan operador Or, And y ternario, break, continue, throw, empty, return, try, synchronized, etiquetas. No se tienen en cuenta declaraciones de variables.

NOTA: Cuando se ejecuta esta métrica sobre código JSP, se cuentan las sentencias contenidas en la definición de scriptlets <% ... %>, declaraciones <%! ... %> y evaluación de expresiones JSP<%= ... >

      En el siguiente código, la métrica 'sentencias' da un valor de 6:

      <%@ page contentType="text/html" language="java" %>
      <%@ page import="es.opt.group.Constants" %>
      <% String root = request.getContextPath(); %>
      <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

      <HTML>
        <BODY>

          <%!

            protected void doExecute(CommandData commandData) throws Exception {
              doSomething();                                                          // SENTENCIAS = 1
            }
          %>

          <%-- Funciones en JSP's --%>

          <%
              if (status != null) {                                                   // SENTENCIAS = 2
                try{                                                                  // SENTENCIAS = 3
                  doSomething();                                                      // SENTENCIAS = 4
                } catch(e Exception){
                  doSomething();                                                      // SENTENCIAS = 5
                }
          %>
          <p><font color="blue"><%=status%></font></p>                                // SENTENCIAS = 6
          <%                                                                             |
              } %>                                                                       --> EVALUACIÓN EXPRESION JSP <%= ... %>

        </BODY>
      </HTML>
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
<![CDATA[
Contabiliza declaración de variables, asignaciones, if, else, do, while, for, for var, for var in, for in, continue, break, return, with, switch, throw, try.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
<![CDATA[
Contabiliza las instrucciones if y else, asignaciones, sentencias CNTL, COMMAND, DATASET, FORMAT, INCLUDE, JCLLIB, JOB PARAM, MAIN, MESSAGE, NETACCT, NOTIFY, OPERATOR, OUTPUT, PAUSE, PRIORITY, RESTART, ROUTE, SET, SETUP, SIGNOFF, XEQ, XMIT Y SYSIN.
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JSP">
<![CDATA[
Calcula el número de "elements" y "jspScriptlets". Contiene las condiciones (disabled, nowrap, wrap, readonly, multiple, checked, selected, noresize, ismap, isindex, compact, declare, noshade, defer, nohref,  mastersound), JSP_EXPRESSION_START_INTAG (expresiones que comienzan por <%=), JSP_SCRIPTLET_START_INTAG (expresiones que comienzan por <%), onblur, onchange, onclick, onfocus, onkeypress, onload, onmouseout, onmouseover, onsubmit, TagLib(instruccion entre < >), operaciones con atributos, sentencias precedidas por $.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
<![CDATA[
Contabiliza las instrucciones fetch, llamar a un fichero, call loop, call, callnat, instrucción para procesar un comando y un submit, run, move, compute, add, substract, multiply, divide, compress, separate, examine, reset, examine, if, decideon, for, escape, repeat, onerror, Sql sentence(llamar a procedimiento de la BS, commit, delete, insert, procesar sql, leer reultado, rollback, select y update), definir, leer, escribir y cerrar fichero de trabajo, instrucciones adabas ( read, find, histogram, get same, accept reject, limit, store, update, delete, end transaction, backout, get transaction datas, retry, at start of data, at end of data, before breaking proccessing, perform break proccessing), instrucciones input(input, reinput, define y set window, procesar página), instrucciones output(format, top of page, end of page, skip, eject, new page, define y close printer, suspend identical suppress, write y print ), instrucciones misc (include, stop, terminate, release, set control, set key, set time, stack, expand, reduce, resize, sort, ignore), define class, create object, send method, interface, performe, null y get.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
<![CDATA[
Número de sentencias de la tecnología contenidos en el fichero.
]]>
        </implementation-description>   
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
<![CDATA[
Número de sentencias de la tecnología contenidos en el fichero, no se tienen en cuenta declaraciones. Contabiliza sentencias show, exit, goto, sentencias dll, if, creación de etiquetas, case, loop, librerías externas, sentencias null, raise, return, bucle for all, execute, asignaciones, execute inmediate, llamadas a funciones y procedimientos, comandos sql, truncate, grant permission, revoke permission y drop, crear y reemplazar paquetes y funciones, crear índices, tablas, vistas, enlaces a DB, librerías, definiciones de tipos, secuencias y triggers, modificar índices.
]]>
        </implementation-description>        
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
<![CDATA[
Número de sentencias de la tecnología contenidos en el fichero.
]]>
        </implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
<![CDATA[
Número de sentencias de la tecnología contenidos en el fichero, no se tienen en cuenta declaraciones. Contabiliza sentencias show, exit, goto, sentencias dll, if, creación de etiquetas, case, loop, librerías externas, sentencias null, raise, return, bucle for all, execute, asignaciones, execute inmediate, llamadas a funciones y procedimientos, comandos sql, truncate, grant permission, revoke permission y drop, crear y reemplazar paquetes y funciones, crear índices, tablas, vistas, enlaces a DB, librerías, definiciones de tipos, secuencias y triggers, modificar índices.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
<![CDATA[
Número de sentencias de la tecnología contenidos en el fichero.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQL">
<![CDATA[
Contabiliza select, nested select, insert, update, delete, execute y execute inmediate, DML (declare procedimiento, tabla temporal, definición secuencia, esquema, database, tabla, vista, dominio, índice), modificar tabla, borrar (tabla, índice, vista, sequencia) y procedimiento.
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.TRANSACTSQL">
<![CDATA[
Contabiliza las instrucciones use database, declaración de cursores y variables, set variable, set transaction, set, sentencia sql, cursor, transacción, service broker (conversation, dialog, identifier, transmission) , break, continue, if, goto, return, waitfor, while, try-catch,throw, grant, deny, revoke, revert, execute, set user, raise error, print, check point, kill, dbcc, shutdown, backup y restore DB, execute command y store procedure, llamadas a funciones y labels.
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
<![CDATA[
Contabiliza nodos etiquetados, instrucción debug, end, asignacion, declaraciones, declaraciones estáticas, declaraciones de constantes, let, set, on error, goto, if, do while, while, call, exit, for each, with, resume, case, redim, declaración procedimientos y funciones, condiciones, case, with, for, llamada a métodos.
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
<![CDATA[
Contabiliza asignaciones, lista de parámetros, parámetros, declaración etiquetas, declaración variables locales, instrucción with, instrucciones manejo arrays, instrucciones sincronizacion, eventos, select, loop, manejo de errores, branch (goto, exit, continue, stop,end y return), if, else, elseif, using, external check sum, do loop, while, condiciones.
]]>
            </implementation-description>

      </implementation-descriptions>
      <parameters />
    </i18n>

    <i18n ref="OPT.LANGUAGE.ENGLISH">
      <name><![CDATA[Statements]]></name>
      
      <description>
<![CDATA[
This metric gives the number of executable sentences in a program file. Programs with a large number of sentences are more difficult to understand, and may suggest a refactor, splitting the functionality in the file among multiple files, with a well-defined responsability.
]]>
       </description>

      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
<![CDATA[
Counts as statements the point, private, protected, an import and an export, sections and publishes of a class, control of printing, exclusion (EXCLUDE), event set, reset method, provide, arithmetical operations, loop, assignments called functions or procedures, operations with database, creation of objects, called system and sentence of conversion of time.
]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
<![CDATA[
Counts as statements the sql sentences, sentences preceded by USING or USING NAMESPACE, declarations enum (example: enum {SPRING, SUMMER, FALL, WINTER};), declaration of types, lists, links, functions and classes, assignments, sentences of selection if and switch, goto, break, continue, return, semicolon, try block, throwing exceptions statements with the throw intruction, labelled sentences (using Id, Case and DEFAULT), loops while, do-while and for.
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
Counts as statements the instructions next sentece, exec, accept, acquire, add, alter, call, cancel, close, compute, commit, continue, delete, display, divide, drop, entry, evaluate, exit, format, go back, goto, if, initialize, inspect, invoke, merge, move, multiply, open, perform, read, release, return, rewrite, rollback, search, set, sort, start, stop, string, substract, unstring, write, exit, exitmethod, xml generate, xml parse, macro.
]]>
       </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
<![CDATA[
Counts as statements the sql sentences, sentences preceded by USING or USING NAMESPACE, declarations enum (example: enum {SPRING, SUMMER, FALL, WINTER};), declaration of types, lists, links, functions and classes, assignments, sentences of selection if and switch, goto, break, continue, return, semicolon, try block, throwing exceptions statements with the throw intruction, labelled sentences (using Id, Case and DEFAULT), loops while, do-while and for.
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
<![CDATA[
Counts as statements instructions that assigns a label or a declaration of variables or constants. Also the instructions empty, jump, assignments, queries, conditional expressions, instructions with anonymous, if, switch, while, do, for, foreach, break, continue, goto, retun, throw, try-catch, checked, unchecked, lock, using, yield return, yield break, unsafe and fixed.
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.FOXPRO">
<![CDATA[
Counts statements and declarations.
]]>
            </implementation-description>


        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
<![CDATA[
Counts as statements the instructions if and else, while, do, for, switch, conditions that include operators Or, And and ternary, break, continue, throw, empty, return, try, synchronized, label. Not taken into account variable declarations.

NOTE: When execute this metric over JSP code, counts sentences contained in the definitions of scriptlets <% ... %>, declarations <%! ... %> and the evaluation of JSP expressions <%= ... %>

      In the following code, the 'statements' metric returns a value of 6:

      <%@ page contentType="text/html" language="java" %>
      <%@ page import="es.opt.group.Constants" %>
      <% String root = request.getContextPath(); %>
      <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

      <HTML>
        <BODY>

          <%!

            protected void doExecute(CommandData commandData) throws Exception {
              doSomething();                                                          // STATEMENTS = 1
            }
          %>

          <%-- Funciones en JSP's --%>

          <%
              if (status != null) {                                                   // STATEMENTS = 2
                try{                                                                  // STATEMENTS = 3
                  doSomething();                                                      // STATEMENTS = 4
                } catch(e Exception){
                  doSomething();                                                      // STATEMENTS = 5
                }
          %>
          <p><font color="blue"><%=status%></font></p>                                // STATEMENTS = 6
          <%                                                                             |
              } %>                                                                       --> EVALUATION OF JSP EXPRESION <%= ... %>

        </BODY>
      </HTML>
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
<![CDATA[
Counts as statements declaration of variables, assignments, if, else, do, while, for, for var, for var in, for in, continue, break, return, with, switch, throw, try.
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
<![CDATA[
Counts the number of instructions if and else, assignments, sentences CNTL, COMMAND, DATASET, FORMAT, INCLUDE, JCLLIB, JOB PARAM, MAIN, MESSAGE, NETACCT, NOTIFY, OPERATOR, OUTPUT, PAUSE, PRIORITY, RESTART, ROUTE, SET, SETUP, SIGNOFF, XEQ, XMIT Y SYSIN.
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JSP">
<![CDATA[
Counts the number of "elements" and "jspScriptlets". Checks conditions (disabled, nowrap, wrap, readonly, multiple, checked, selected, noresize, ismap, isindex, compact, declare, noshade, defer, nohref, mstersound), JSP_EXPRESSION_START_INTAG (expressions starting by <%=), JSP_SCRIPTLET_START_INTAG (expressions starting by <%), onblur, onchange, onclick, onfocus, onkeypress, onload, onmouseout, onmouseover, onsubmit, TagLib (instruction between < > ), operations with attributes, statements preceding by $.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
<![CDATA[
Counts as statements the instructions fetch, call to a file, call loop, call, callnat, instruction to sue a command and a submit, run, move, compute, add, substract, multiply, divide, compress, separate, examine, reset, if, decideon, for, escape, repeat, onerror, Sql sentence(call to procedure of the BS, commit, delete, insert, proccess sql, read result, rollback, select and update), define, read, write and close a file, adabas instructions ( read, find, histogram, get same, accept reject, limit, store, update, delete, end transaction, backout, get transaction datas, retry, at start of data, at end of data, before breaking proccessing, perform break proccessing), input instructions(input, reinput, define y set window, process page), output instructions(format, top of page, end of page, skip, eject, new page, define and close printer, suspend identical suppress, write and print ), misc instructions(include, stop, terminate, release, set control, set key, set time, stack, expand, reduce, resize, sort, ignore), define class, create object, send method, interface, performe, null and get.
]]>
            </implementation-description>
   
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
<![CDATA[
Number of statements of the technology contained in the file.
]]>
        </implementation-description> 
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
<![CDATA[
Number of statements of the technology contained in the file, declarations are not taken into account. Counts statements: show, exit, goto, dll, if, label creation, case, loop, external libraries, null sentences, raise, return, for all loop, execute, assignments, execute inmediate, function and procedure calls, sql commands, truncate, grant permission, revoke permission, drop, create and replace packages and functions, create index, tables, views, DB links, libraries, definitions of types, secuences and triggers, modifying indexes.
]]>
        </implementation-description>        
            
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
<![CDATA[
Number of statements of the technology contained in the file.
]]>
        </implementation-description>  

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
<![CDATA[
Number of statements of the technology contained in the file, declarations are not taken into account. Counts statements: show, exit, goto, dll, if, label creation, case, loop, external libraries, null sentences, raise, return, for all loop, execute, assignments, execute inmediate, function and procedure calls, sql commands, truncate, grant permission, revoke permission, drop, create and replace packages and functions, create index, tables, views, DB links, libraries, definitions of types, secuences and triggers, modifying indexes.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
<![CDATA[
Number of statements of the technology contained in the file.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQL">
<![CDATA[
Counts as statements select, nested select, insert, update, delete, execute and execute inmediate, DML (declare procedure, temporary table, definition sequences, scheme, database, table, view, domain, index), to modify table, to erase (table, index, view, secuence) and procedure.
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.TRANSACTSQL">
<![CDATA[
Counts as statements the instructions use database, declaration of cursors and variables, set variable, set transaction, set, it sentences sql, cursor, transaction, service broker (conversation, dialog, identifier, transmission), break, continue, if, goto, return, waitfor, while, try-catch, throw, grant, deny, revoke, revert, execute, set user, raise mistake, print, check point, kill, dbcc, shutdown, backup and restore DB, execute command and store procedure, called functions and labels.
]]>
            </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
<![CDATA[
Counts as statements labelled nodes, instruction debug, end, assignment, declarations, static declarations, declarations of constants, let, set, on mistake, goto, if, do while, while, call, exit, for each, with, resume, case, redim, declare procedures and functions, conditions, case, with, for, called methods.
]]>
            </implementation-description>
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
<![CDATA[
Counts as statements assignments, list of parameters, parameters, declaration label, declaration variable, instruction with, arrays manage instructions, instructions synchronization, events, select, loop, error handling, branch (goto, exit, continue, stop sign, end and return), if, else, elseif, using, external check sum, do loop, while, determine.
]]>
            </implementation-description>

      </implementation-descriptions>
      <parameters />
    </i18n>
    </i18ns>
  </metric> 
</metric-definition>
