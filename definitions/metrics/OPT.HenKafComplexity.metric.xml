<?xml version="1.0" encoding="UTF-8"?>

<metric-definition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.optimyth.com/schema/definitions/metric" 
    version="1.1">

  <metric id="OPT.HenKafComplexity" unit="" aggregation="avg" aggregationScope="program">

    <!-- Criteria values: better is, scopes, language parsers, etc. -->
    <criteria-values>
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_TYPE.COMPLEXITY" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_HIERARCHY.COMPLEXITY" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.BETTER_IS.LOWER" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.SYSTEM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.PROGRAM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL" />
    </criteria-values>

    <!-- Valid range -->
    <range>
      <minimum value="0" included="true" />
      <maximum value="+inf" included="false" />
    </range>

    <!-- Metric thresholds (up to three) -->
    <thresholds>
      <criterium-value>
        <threshold from="0.00" to="100.00" meaning="good" />
        <threshold from="100.00" to="+inf" meaning="bad" />
      </criterium-value>
    </thresholds>

    <!-- Metric parameters (applies to implementations that reference them) -->
    <parameters />

    <!-- Metric implementations for each language parser -->
    <implementations>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <internal-name id="OPT.COBOL.COMPLEXITY.COMPLEXITY" />
        <java-class>com.als.cobol.metrics.SystemComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      
      <reference><![CDATA[Optimyth (http://www.optimyth.com)]]></reference>
    </implementations>

     <!-- Code examples for each language parser -->
    <code-examples>
    <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <code-example name="metricCodeExampleCobol" result-value="4.0">
<![CDATA[
      ****************************************************************
      *  A2421-RUTINA-KC8921M.        ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦*
      *  Se llama la rut KC8921M para obtener el codigo de objeto.   *
      ****************************************************************
       A2421-RUTINA-KC8921M.

           INITIALIZE W-MEM-CODOBJET.
           INITIALIZE  KC8921P.

           SET UNIR OF KC8921P TO TRUE.

           MOVE CODENTID   OF FA7306I    TO  CODENTID   OF KC8921P
           MOVE TIPPRODUCT OF FA7306I    TO  TIPPRODUCT OF KC8921P
           MOVE CODCONTRAT OF FA7306I    TO  CODCONTRAT OF KC8921P
           MOVE W-MEM-TMSTAMP            TO  TSFECHORA  OF KC8921P
           MOVE W-CTE-1                  TO  SECOPERMUL OF KC8921P

           CALL W-LIT-KC8921M  USING  KC8921P

           IF  CODIRET  OF KC8921P  = W-LIT-OK
               MOVE REFERENCOR OF KC8921P   TO W-MEM-CODOBJET
               PERFORM DISPLAY-CAB.
               PERFORM CONFIGURAR.
               PERFORM ABRIR-ARCHIVOS.
           ELSE
               $AHERROR(ERROR,W-LIT-KC8921M-2,'RUT_FORMAT_CONCEPT')
           END-IF.

      ****************************************************************
      *  A2422-REC-CSB-DIGCON.        ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦*
      *  Llamada a la rutina BS8087M para formatear el resto         *
      *  del concepto.                                               *
      ****************************************************************
       A2422-REC-CSB-DIGCON.

           INITIALIZE BS8087P.
           MOVE W-CTE-1                 TO OPERACION OF BS8087P.
           MOVE CODENTID    OF FA7306I  TO CODENTID  OF BS8087P.
           MOVE TIPPRODUCT  OF FA7306I  TO PRO-BAS   OF BS8087P.
           MOVE CODCONTRAT  OF FA7306I  TO NUM-CTN   OF BS8087P.

           CALL W-LIT-BS8087M  USING  BS8087P

           IF  CODIRET  OF BS8087P  NOT = W-LIT-OK
               $AHERROR(ERROR,W-LIT-ERR-BS8087P,'RESTO_CONCEP')
           END-IF.
]]>
        </code-example>
      </language-parser>
    </code-examples>

    <!-- Internationalizations for each human language -->
    <i18ns>
    <i18n ref="OPT.LANGUAGE.SPANISH">
      <name><![CDATA[Complejidad de Henry-Kafura]]></name>
      
      <description>
<![CDATA[
Métrica de complejidad que se basa en el flujo de información entre los módulos de un programa, (fan-in*fan-out)^2, donde:
- fan-in es el número de llamadas entrantes al módulo desde otros módulos.
- fan-out es el número de llamadas salientes desde el módulo hacia otros módulos.

Esta métrica mide la complejidad estática (estructural) producida al acoplar funciones/procedimientos (cómo de complejo es el grafo de llamadas).
]]>
      </description>
      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
Complejidad de Henry-Kafura de los paragraphs cobol.

El valor de la métrica se calcula multiplicando los cuadrados de los medias de los fanout y fanin de cada párrafo.

   HenKafComplexity = [sum(fanout(parag)) / numParagInFile]^2 * [sum(fanin(parag)) / numParagInFile]^2  ; donde

   - fanout(parag): número de sentencias call en el párrafo.
   - fanin(parag): número de llamadas a cada párrafo (sentencias perform) desde otros párrafos del mismo fichero.
]]>
        </implementation-description>

      </implementation-descriptions>
      <parameters />
    </i18n>

    <i18n ref="OPT.LANGUAGE.ENGLISH">
      <name><![CDATA[Henry-Kafura complexity]]></name>
      
      <description>
<![CDATA[
Complexity metric based on the information flow among all the modules of a program, (fan-in*fan-out)^2, where:
- fan-in is the number of incoming calls to target module from other modules.
- fan-out is the number of outgoing calls from target module to other modules.

This metric measures static (structural) complexity induced by coupling between functions/procedures (how complex is the call graph).
]]>
     </description>

      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
Henry-Kafura complexity for cobol paragraphs.

Metric value is calculated by multiplying the squared averages of the fanout and fanin per paragraph.

   HenKafComplexity = [sum(fanout(parag)) / numParagInFile]^2 * [sum(fanin(parag)) / numParagInFile]^2  ; where

   - fanout(parag): number of 'call' statements in the paragraph.
   - fanin(parag): number of calls to each paragraph ('perform' statements) from other paragraphs of the same file.
]]>
        </implementation-description>

      </implementation-descriptions>

      <parameters />
    </i18n>
    </i18ns>
  </metric>
</metric-definition>
