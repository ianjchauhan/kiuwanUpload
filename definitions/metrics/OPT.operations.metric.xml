<?xml version="1.0" encoding="UTF-8"?>

<metric-definition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.optimyth.com/schema/definitions/metric" 
    version="1.1">

  <metric id="OPT.operations" unit="" aggregation="sum" aggregationScope="program">

    <!-- Criteria values: better is, scopes, language parsers, etc. -->
    <criteria-values>
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_TYPE.SIZE" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_HIERARCHY.SIZE.CODE" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.BETTER_IS.NA" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.SYSTEM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.PROGRAM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG4" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET" />
    </criteria-values>

    <!-- Valid range -->
    <range>
      <minimum value="0" included="true" />
      <maximum value="+inf" included="false" />
    </range>

    <!-- Metric thresholds (up to three) -->
    <thresholds />

    <!-- Metric parameters (applies to implementations that reference them) -->
    <parameters />

    <!-- Metric implementations for each language parser -->
    <implementations>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
        <internal-name id="OPT.ABAP.SIZE.FILEFUNCTIONS" />
        <java-class>com.als.abap.metrics.FunctionsMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
        <internal-name id="OPT.C.SIZE.LOC" />
        <java-class>com.als.cpp.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>      

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <internal-name id="OPT.COBOL.COMPLEXITY.COMPLEXITY" />
        <java-class>com.als.cobol.metrics.SystemComplexityMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
        <internal-name id="OPT.CSHARP.SIZE.LOC" />
        <java-class>com.optimyth.csharp.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
        <internal-name id="OPT.CPP.SIZE.LOC" />
        <java-class>com.als.cpp.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
        <internal-name id="OPT.JAVA.SIZE.LOC" />
        <java-class>com.als.java.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
        <internal-name id="OPT.JS.LOC" />
        <java-class>com.optimyth.qaking.javascript.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
        <internal-name id="OPT.JCL.SIZE.LOC" />
        <java-class>com.als.jcl.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
        <internal-name id="OPT.NATURAL.SIZE.LOC" />
        <java-class>com.optimyth.qaking.natural.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
        <internal-name id="OPT.OBJECTIVEC.CLASSES_FUNCTIONS" />
        <java-class>com.optimyth.qaking.objectivec.metrics.ClassFunctionMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
        <internal-name id="OPT.ORACLEFORMS.OPERATIONS" />
        <java-class>com.optimyth.qaking.oracleforms.metrics.OperationsOracleformsMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
        <internal-name id="OPT.PHP.CLASSES_FUNCTIONS" />
        <java-class>com.optimyth.qaking.php.metrics.ClassFunctionMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
        <internal-name id="OPT.PLSQL.SIZE.OPERATIONS" />
        <java-class>com.als.plsql.metrics.OperationsPlsqlMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
        <internal-name id="OPT.POWERSCRIPT.SIZE.LOC" />
        <java-class>com.optimyth.qaking.powerscript.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>      
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG">
        <internal-name id="OPT.RPG.OPERATIONS" />
        <java-class>com.optimyth.rpg4.metrics.OperationsMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG4">
        <internal-name id="OPT.RPG4.OPERATIONS" />
        <java-class>com.optimyth.rpg4.metrics.OperationsMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
        <internal-name id="OPT.VB6.SIZE.LOC" />
        <java-class>com.optimyth.qaking.vb6.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
        <internal-name id="OPT.VBNET.SIZE.LOC" />
        <java-class>com.optimyth.vbnet.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      
      <reference><![CDATA[Optimyth (http://www.optimyth.com)]]></reference>
    </implementations>

    <code-examples>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
        <code-example name="metricCodeExampleAbap" result-value="4">
<![CDATA[
MODULE LIST OUTPUT.                                                    "OPERATION 1
 SUPPRESS DIALOG.
 LEAVE TO LIST-PROCESSING.
 SET PF-STATUS 'STRU'.
 SET TITLEBAR 'STR'.
 PERFORM OUTPUT.
ENDMODULE. " list OUTPUT
*&--------------------------------------------------------------------*
*& Form output
*&--------------------------------------------------------------------*
FORM OUTPUT.                                                            "OPERATION 2
 WRITE / SY-ULINE(66).
 LOOP AT IT_LDBN.
  WRITE: / SY-VLINE,
   IT_LDBN-CHECK AS CHECKBOX,
   SY-VLINE,
   (15) IT_LDBN-STRUCTURE,
   SY-VLINE,
   (40) IT_LDBN-NODETEXT,
   SY-VLINE.
 ENDLOOP.
 WRITE / SY-ULINE(66).
ENDFORM. "output
*&---------------------------------------------------------------------*
*& Module USER_COMMAND_0100 INPUT
*&---------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.                                          "OPERATION 3
 SET SCREEN 0.
 LEAVE SCREEN.
ENDMODULE. " USER_COMMAND_0100 INPUT

        FUNCTION Z_IDOC_INBOUND_ASYNCHRONOUS.                            "OPERATION 4

        data e1edp16 type e1edp16.
        CALL FUNCTION 'IDOC_INBOUND_ASYNCHRONOUS'
          TABLES
            idoc_control_rec_40       = IDOC_CONTROL_REC_40
            idoc_data_rec_40          = IDOC_DATA_REC_40.
        ENDFUNCTION.
]]>
       </code-example>
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
        <code-example name="metricCodeExampleC" result-value="1.0"><![CDATA[
#include <stdio.h>
#define LAST 10

int main()
{
  int i, sum = 0;
   
  for ( i = 1; i <= LAST; i++ ) {
    sum += i;
  }
  
  printf("sum = %d\n", sum);
  return 0;
}
]]>
        </code-example>
      </language-parser>      
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <code-example name="metricCodeExampleCobol" result-value="2">
<![CDATA[
      ****************************************************************
      *  A2421-RUTINA-KC8921M.        ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦*
      *  Se llama la rut KC8921M para obtener el codigo de objeto.   *
      ****************************************************************
       A2421-RUTINA-KC8921M.                                         * OPERATION 1

           INITIALIZE W-MEM-CODOBJET.
           INITIALIZE  KC8921P.

           SET UNIR OF KC8921P TO TRUE.

           MOVE CODENTID   OF FA7306I    TO  CODENTID   OF KC8921P
           MOVE TIPPRODUCT OF FA7306I    TO  TIPPRODUCT OF KC8921P
           MOVE CODCONTRAT OF FA7306I    TO  CODCONTRAT OF KC8921P
           MOVE W-MEM-TMSTAMP            TO  TSFECHORA  OF KC8921P
           MOVE W-CTE-1                  TO  SECOPERMUL OF KC8921P

           CALL W-LIT-KC8921M  USING  KC8921P

           IF  CODIRET  OF KC8921P  = W-LIT-OK
               MOVE REFERENCOR OF KC8921P   TO W-MEM-CODOBJET
           ELSE
               $AHERROR(ERROR,W-LIT-KC8921M-2,'RUT_FORMAT_CONCEPT')
           END-IF.

      ****************************************************************
      *  A2422-REC-CSB-DIGCON.        ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦*
      *  Llamada a la rutina BS8087M para formatear el resto         *
      *  del concepto.                                               *
      ****************************************************************
       A2422-REC-CSB-DIGCON.                                         * OPERATION 2

           INITIALIZE BS8087P.
           MOVE W-CTE-1                 TO OPERACION OF BS8087P.
           MOVE CODENTID    OF FA7306I  TO CODENTID  OF BS8087P.
           MOVE TIPPRODUCT  OF FA7306I  TO PRO-BAS   OF BS8087P.
           MOVE CODCONTRAT  OF FA7306I  TO NUM-CTN   OF BS8087P.

           CALL W-LIT-BS8087M  USING  BS8087P

           IF  CODIRET  OF BS8087P  NOT = W-LIT-OK
               $AHERROR(ERROR,W-LIT-ERR-BS8087P,'RESTO_CONCEP')
           END-IF.
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
        <code-example name="metricCodeExampleCpp" result-value="3">
<![CDATA[

void run_test()                                                // OPERATION 1
{
   typedef typename boost::property_map<Graph1, boost::vertex_index_t>::type
           IndexMap1;
   typedef typename boost::property_map<Graph2, boost::vertex_index_t>::type
           IndexMap2;
   Graph1 g1(24);
   Graph2 g2(24);
   IndexMap1 index_map1 = boost::get(boost::vertex_index_t(), g1);
   IndexMap2 index_map2 = boost::get(boost::vertex_index_t(), g2);
   BGL_FORALL_EDGES_T(e, g3, Graph2) {
     edge_pairs_g3.push_back(
       std::make_pair(get(index_map3, source(e, g3)),
                      get(index_map3, target(e, g3))));
   }
   BOOST_CHECK(edge_pairs_g1 == edge_pairs_g3);
}

void test_remove_edges()                                       // OPERATION 2
{
    using namespace boost;
    remove_edge(vertex(0, g), vertex(1, g), g);
    BOOST_CHECK(num_edges(g) == 0);
}
int test_main(int, char*[])                                    // OPERATION 3
{
    typedef boost::adjacency_list<boost::setS, boost::vecS, boost::undirectedS>
            UGraph1;
    typedef boost::adjacency_matrix<boost::undirectedS>
            UGraph2;
    run_test<UGraph1, UGraph2>();
    test_remove_edges<UGraph2>();
    test_remove_edges<BGraph2>();
    return 0;
}
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
        <code-example name="metricCodeExampleCsharp" result-value="1">
<![CDATA[
using System;
using System.Collections.Generic;
using System.Text;
using ral.Frk.Print.Common;
using ral.Frk.Print.Entities;

namespace ral.Impresion.Raiz.Vehiculos.Serializacion
{
    public class QuejasSerializer

    {
        protected static string GeneraQuejas(REP_QUEJAS_OBJ from)   // OPERATION 1
        {
            RalStringBuilder sb = new RalStringBuilder();
            sb.AppendLine(
                    DocPathSerializer.SerializeTexto(from.E_QUEJAS1));
            sb.AppendLine(
                    DocPathSerializer.SerializeTexto(from.E_QUEJAS2));
            sb.AppendLine(
                    DocPathSerializer.SerializeTexto(from.E_QUEJAS3));
            return sb.ToString();
        }
    }
}
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
        <code-example name="metricCodeExampleJava" result-value="1">
<![CDATA[
package ci.cliente;

import ci.componentes.*;

public class CITabObjetoInmueble extends ae.presentacion.AqTab implements ci.componentes.CIPanelObjeto {
  public final int NUM_PANELES_OBJ_INMUEBLE = 2;
  private boolean completarMensajeGrabacion(ci.componentes.CIEstructuraDatosGrid datos) {   //OPERATION 1
    CIPanelObjeto panelActual = null;
    boolean completadoCorrectamente = true;
    for (int i = 0; i < NUM_PANELES_OBJ_INMUEBLE; i++) {
        panelActual = (CIPanelObjeto) devolverPanel(i);
        completadoCorrectamente = panelActual.completarMensajeGrabacion(datos);
        if (!completadoCorrectamente) break;
    }
    return completadoCorrectamente;
  }
}
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
        <code-example name="metricCodeExampleJavascript" result-value="2">
<![CDATA[
function f(x) {                    // OPERATIONS 1
  if(x==3) {
    return 3;
  } else {
    return 5;
  }

}


var f2 = function(x) {              // OPERATION 2

  var inner = function(x) {
    return x*x;
  }

  return inner(x);
}
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
        <code-example name="metricCodeExampleJCL" result-value="2">
<![CDATA[
//SAMPINST JOB 1,CLASS=6
//* 
//INSTPROC   PROC
//PROC1		EXEC PGM=SORT
//SORTIN	DD DSN=&DSNAME,DISP=SHR
//SORTOUT	DD SYSOUT=*MYINCL
//SYSOUT	DD SYSOUT=*
//SYSIN		DD DSN=&DATAC,LRECL=80
//           PEND
//INSTPROC   PROC
//PROC2		EXEC PGM=SORT
//SORTIN	DD DSN=&DSNAME,DISP=SHR
//SORTOUT	DD SYSOUT=*MYINCL
//SYSOUT	DD SYSOUT=*
//SYSIN		DD DSN=&DATAC,LRECL=80
//           PEND

]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
        <code-example name="metricCodeExampleNatural" result-value="1">
<![CDATA[
 3600 DEFINE SUBROUTINE CARGAR-ANO-TABLA                 // OPERATION 1
 3650 DECIDE FOR FIRST CONDITION
 3660   WHEN TAR(WI) EQ 625
 3670     MOVE 2002                   TO WANO-AUX
 3680     FOR I=1 TO 20
 3690       MOVE WANO-AUX TO ANO-625(I)
 3700       ADD 1 TO WANO-AUX
 3710       IF AÑO-625(I) EQ WANO
 3720         ESCAPE BOTTOM
 3730       END-IF
 3740     END-FOR
 3750   WHEN TAR(WI) EQ 651
 3760     MOVE 2002                   TO WANO-AUX
 3770     FOR I=1 TO 20
 3780       MOVE WANO-AUX TO ANO-651(I)
 3790       ADD 1 TO WANO-AUX
 3800       IF ANO-651(I) EQ WANO
 3810         ESCAPE BOTTOM
 3820       END-IF
 3830     END-FOR
 4110   WHEN NONE
 4120     IGNORE
 4130 END-DECIDE
 4140 END-SUBROUTINE
 4150 ************************************************************************
 4160 END     /* -------------   END OF PROGRAM     -------------------------
 4170 ************************************************************************
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
        <code-example name="metricCodeExampleObjectiveC" result-value="2">
<![CDATA[
@implementation QAMyProgram

@synthesize initialized = _initialized;

- (id)initWithValue:(NSString *)initialValue
{
    if ((self = [super init])) 
    {
        _initialized = NO;
    }
    
    return self;
}

- (void)start 
{
    _initialized = YES;
}

@end
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
        <code-example name="metricCodeExampleOracleforms" result-value="3">
<![CDATA[ 
<?xml version = '1.0' encoding = 'UTF-8'?>
<Module version="101020002" xmlns="http://xmlns.oracle.com/Forms">
   <FormModule Name="FRM_ACTUPLANCO" ConsoleWindow="WIN_ACTUPLANCO" ParentType="29" DirtyInfo="true" MenuModule="" ParentName="CLA_BACKGROUND" ParentModule="DISPLAY_CLASS" Title="FRM_actuplanco" ParentFilename="DISPLAY_CLASS.olb" ParentModuleType="25">
      <ProgramUnit Name="SET_UP_LIST" ProgramUnitType="Procedimiento" ProgramUnitText="PROCEDURE Set_Up_List (pList in VARCHAR2, pGroup in VARCHAR2) IS&amp;#10;  vErrFlag                   NUMBER := 0;&amp;#10;  eListPopulationProblem     EXCEPTION;&amp;#10;BEGIN&amp;#10;  vErrFlag  := Populate_Group(pGroup);&amp;#10;  IF vErrFlag = 0 THEN&amp;#10;     Clear_List(pList);&amp;#10;     Populate_List(pList, pGroup);&amp;#10;  ELSE&amp;#10;     IF vErrFlag = 1403 THEN&amp;#10;        Null;&amp;#10;     ELSE&amp;#10;        RAISE eListPopulationProblem;&amp;#10;     END IF;&amp;#10;  END IF;&amp;#10;EXCEPTION&amp;#10;  WHEN OTHERS THEN&amp;#10;       MESSAGE('Excepción: No se puede cargar la lista '||pList||' con el grupo de registros '||&amp;#10;               pGroup||'.');  &amp;#10;END;"/>
      <ProgramUnit Name="POSI_CAN" ProgramUnitType="Procedimiento" ProgramUnitText="PROCEDURE POSI_CAN (WCAN varchar2, WWIN varchar2) IS&amp;#10;  win_ancho   number;&amp;#10;  can_ancho   number;&amp;#10;  x_pos_can   number;&amp;#10;BEGIN&amp;#10;  win_ancho := get_window_property(WWIN,width);&amp;#10;  can_ancho := get_view_property(WCAN,width)+16;&amp;#10;  x_pos_can := (win_ancho/2)-(can_ancho/2);&amp;#10;  if x_pos_can &lt; 0 then x_pos_can := 0; end if;&amp;#10;  set_view_property(WCAN,VIEWPORT_X_POS,x_pos_can);&amp;#10;END;"/>
      <ProgramUnit Name="OBLIGATORIO" ProgramUnitType="Función" ProgramUnitText="Function OBLIGATORIO ( Block_Item In Varchar2 ) Return Boolean Is&amp;#10;Begin	&amp;#10;	If Name_In(Block_Item) Is Null Then&amp;#10;		Return True;&amp;#10;	Else&amp;#10;	  Return False;&amp;#10;	End If;&amp;#10;End;"/>
   </FormModule>
</Module>
]]>
       </code-example>
      </language-parser>      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
        <code-example name="metricCodeExamplePhp" result-value="3">
<![CDATA[
<?php

/*
 * This file is part of Twig.
 *
 * (c) Fabien Potencier
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

class Twig_Tests_Node_BlockReferenceTest extends Twig_Test_NodeTestCase
{
    /**
     * @covers Twig_Node_BlockReference::__construct
     */
    public function testConstructor()
    {
        $node = new Twig_Node_BlockReference('foo', 1);

        $this->assertEquals('foo', $node->getAttribute('name'));
    }

    /**
     * @covers Twig_Node_BlockReference::compile
     * @dataProvider getTests
     */
    public function testCompile($node, $source, $environment = null)
    {
        parent::testCompile($node, $source, $environment);
    }

    public function getTests()
    {
        return array(
            array(new Twig_Node_BlockReference('foo', 1), <<<EOF
// line 1
\$this->displayBlock('foo', \$context, \$blocks);
EOF
            ),
        );
    }
}

]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
        <code-example name="metricCodeExamplePlsql" result-value="1">
<![CDATA[
CREATE OR REPLACE PACKAGE PQSEG_VIRUS IS
  TYPE refcursor IS REF CURSOR;

  FUNCTION GET_NOTICIAS RETURN refcursor;
END PQSEG_VIRUS;
/
CREATE OR REPLACE PACKAGE BODY PQSEG_VIRUS IS


-- COMMENT
  FUNCTION GET_NOTICIAS RETURN REFCURSOR IS
    result REFCURSOR;
  BEGIN
    OPEN result FOR
      SELECT FECHA_ALTA_NOTICIA_CHAR FECHA_ALTA_NOTICIA,
             TITULO_NOTICIA,
             ID_NOTICIA
        FROM (SELECT TO_CHAR(FECHA_ALTA_NOTICIA, 'dd/mm/yyyy') FECHA_ALTA_NOTICIA_CHAR,
                     TITULO_NOTICIA,
                     TO_CHAR(ID_NOTICIA, '99999999') ID_NOTICIA
                FROM NOTICIA
               WHERE ESTADO_NOTICIA = 'P'
               ORDER BY FECHA_ALTA_NOTICIA DESC) NOTICIA2
       WHERE rownum <= 10;
    RETURN result;
  EXCEPTION
    WHEN OTHERS THEN
      UFILE(TO_CHAR(SYSDATE, 'dd/mm/yyyy hh24:mi:ss') ||
            'PQSEG_VIRUS.GET_NOTICIAS#' || TO_CHAR(SQLCODE) || '#' ||
            SQLERRM || '#');
      RAISE;
  END;

END PQSEG_VIRUS;
/

]]>
       </code-example>
      </language-parser>
     <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
        <code-example name="metricCodeExamplePowerscript" result-value="0">
<![CDATA[
$PBExportHeader$n_application_globalparameter.sru
forward
global type n_application_globalparameter from n_globalparameter
end type
end forward

global type n_application_globalparameter from n_globalparameter
end type
global n_application_globalparameter n_application_globalparameter

on n_application_globalparameter.create
call super::create
end on

on n_application_globalparameter.destroy
call super::destroy
end on

event ue_decimal_separator_changed;call super::ue_decimal_separator_changed;/*////////////////////////////////////////////////////////
 Event   :  n_application_globalparameter.ue_Decimal_separator_changed
 Scope: <ACCESS>public</ACCESS>
 Returns: <RETURN>(None)</RETURN>
 Parameters:  <ARGS>
          String as_new_decimal_separator:  El nuevo separador decimal del Sistema operativo y de la aplicaci�n
 </ARGS>
 Description: <DESC>  Llamamos a la funcion global que comprueba si 
 si el separador decimal coincide con el definidio en la userdll</DESC>
//////////////////////////////////////////////////////////
 01/12/2004 Initial version by <AUTH> JMN </AUTH>
////////////////////////////////////////////////////////// */
string ls_type = "FRAME"
post gf_test_decimal_separator(ls_type)
end event
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG">
        <code-example name="metricCodeExampleRpg" result-value="1">
<![CDATA[

     H DATFMT(*YMD) DATEDIT(*YMD) DEBUG
    ‚ *
     FKRBM10T   IF   E           K DISK    RENAME(KRBM10T:KRBM10TR)
     FKRBN50T   IF A E           K DISK    RENAME(KRBN50T:KRBN50TR) COMMIT
     FKRBA61T   IF   E           K DISK    RENAME(KRBA61T:KRBA61TR)
    ‚ *
     FRCFMESV   O    E             DISK
    ‚ *
     DENTRY            DS
     D PMNUMREC                            LIKE(CDNUMREC)
     D PMCMVTO                             LIKE(FECMVTO )
     D PMPROCRB                            LIKE(TCPROCRB)
     D ERROR                          4P 0
    ‚ *
     DWFECTRAB         S                   LIKE(FECTRAB )
     DWNUTRAB          S                   LIKE(NUTRAB  )
     DTIMESTAMP        S               Z
    ‚ *
     DREC              DS
     D KDTCAR                  1      4
    ‚ *
    ‚ * Para controlar errores de ejecución del programa ...
    ‚ *
     C                   Z-ADD     7399          ERROR
    ‚ *
     C                   EXSR      INIT
    ‚ *
     C                   EXSR      MOVIMESV
    ‚ *
    ‚ * Si ha llegado hasta aquí no hay error de ejecución del programa ...
    ‚ *
     C                   Z-ADD     *ZEROS        ERROR
     C                   RETURN
    ‚ *****************************************************************
    ‚ *  ERR     Tratamiento de errores                               *
    ‚ *****************************************************************
     C     ERR           BEGSR
    ‚ *
     C                   EVAL      *INLR = *ON
     C                   RETURN
    ‚ *
     C                   ENDSR

]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG4">
        <code-example name="metricCodeExampleRpg4" result-value="1">
<![CDATA[

     H DATFMT(*YMD) DATEDIT(*YMD) DEBUG
    ‚ *
     FKRBM10T   IF   E           K DISK    RENAME(KRBM10T:KRBM10TR)
     FKRBN50T   IF A E           K DISK    RENAME(KRBN50T:KRBN50TR) COMMIT
     FKRBA61T   IF   E           K DISK    RENAME(KRBA61T:KRBA61TR)
    ‚ *
     FRCFMESV   O    E             DISK
    ‚ *
     DENTRY            DS
     D PMNUMREC                            LIKE(CDNUMREC)
     D PMCMVTO                             LIKE(FECMVTO )
     D PMPROCRB                            LIKE(TCPROCRB)
     D ERROR                          4P 0
    ‚ *
     DWFECTRAB         S                   LIKE(FECTRAB )
     DWNUTRAB          S                   LIKE(NUTRAB  )
     DTIMESTAMP        S               Z
    ‚ *
     DREC              DS
     D KDTCAR                  1      4
    ‚ *
    ‚ * Para controlar errores de ejecución del programa ...
    ‚ *
     C                   Z-ADD     7399          ERROR
    ‚ *
     C                   EXSR      INIT
    ‚ *
     C                   EXSR      MOVIMESV
    ‚ *
    ‚ * Si ha llegado hasta aquí no hay error de ejecución del programa ...
    ‚ *
     C                   Z-ADD     *ZEROS        ERROR
     C                   RETURN
    ‚ *****************************************************************
    ‚ *  ERR     Tratamiento de errores                               *
    ‚ *****************************************************************
     C     ERR           BEGSR
    ‚ *
     C                   EVAL      *INLR = *ON
     C                   RETURN
    ‚ *
     C                   ENDSR

]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
        <code-example name="metricCodeExampleVb6" result-value="1">
<![CDATA[
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END

Option Explicit 'Control de locx vbalGrid
Public obG As vbalGrid

Public Function RowMatch(ByVal p_vaSearch As Variant, p_svClauColumna As String) As Long    ' OPERATION 1
    Dim i As Long
    Dim j As Long

    With Me.obG
        j = .ColumnIndex(p_svClauColumna)
        For i = 1 To .Rows
            If .CellText(i, j) = p_vaSearch Then
                RowMatch = i
                Exit Function
            End If
        Next i
    End With
End Function
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
        <code-example name="metricCodeExampleVbnet" result-value="2">
<![CDATA[
Imports System

Namespace DesignLibrary

   Public Class Browser

      Dim uriHistory As New History()

      Sub ErrorProne()                           ' OPERATION 1
         uriHistory.AddToHistory("http://www.adventure.com")
      End Sub

      Sub SaferWay()                             ' OPERATION 2
         Try
            Dim newUri As New Uri("http://www.adventure.com")
            uriHistory.AddToHistory(newUri)
         Catch uriException As UriFormatException
         End Try
      End Sub

   End Class

End Namespace
]]>
       </code-example>
      </language-parser>
    </code-examples>

    <!-- Internationalizations for each human language -->
    <i18ns>
    <i18n ref="OPT.LANGUAGE.SPANISH">
      <name><![CDATA[Operaciones]]></name>
      
      <description>
<![CDATA[
Número de form, module, function, párrafo, subrutinas, procedure, métodos, constructores, destructores y sub para cualquier ámbito o nivel de acceso según sea aplicable en cada tecnología.
]]>
      </description>

      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
<![CDATA[
Número de declaraciones de form, module y function. Los form contabilizados pueden incluir parámetros "USING", "CHANGING", "TABLES" o ninguno, los "USING" y "CHANGING" pueden ser de cualquier tipo  mientras que los "TABLES" deben ser tablas internas. Los modules contabilizados pueden declararse en module pool o en otro tipo de ficheros (report, includes ...). Suma de todas las funciones definidas en un mismo fichero, independiente del tipo de parámetros que declare ("IMPORTING", "EXPORTING", "USING", "TABLES" o ninguno) y pueden estar incluídas en function groups, function modules o en otro tipo de ficheros (report...).
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
<![CDATA[
Número de funciones, métodos, constructores y destructores IMPLEMENTADOS. En el caso de los métodos, constructores y destructores pueden pertenecer a cualquier ámbito ("PUBLIC", "PROTECTED", "PRIVATE"). En el caso de las funciones cuenta todos las funciones, independientemente del tipo de almacenamiento utilizado (extern, static o ninguno que implicaría por defecto extern), del valor de retorno definido o void si no es necesario, de los modificadores adicionales utilizados (extern, inline o static) y del número de parámetros definidos (incluido ninguno) IMPLEMENTADAS en un mismo fichero. Sólo se cuentan las funciones en los ficheros donde están IMPLEMENTADAS. Si tenemos un a.h con 5 funciones definidas de las cuales 1 está implementada en a.h y un a.cpp con 4 implementaciones el conteo de funciones es a.h=1 y a.cpp=4.
]]>
        </implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
Número de párrafos y Procedure Section, sin tener en cuenta el ámbito al que pertenecen.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
<![CDATA[
Número de métodos y constructores (no contabiliza destructores), contabiliza todos los ámbitos ("PUBLIC", "PROTECTED", "PRIVATE").
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
<![CDATA[
Número de funciones, métodos, constructores y destructores IMPLEMENTADOS. En el caso de los métodos, constructores y destructores pueden pertenecer a cualquier ámbito ("PUBLIC", "PROTECTED", "PRIVATE"). En el caso de las funciones cuenta todos las funciones, independientemente del tipo de almacenamiento utilizado (extern, static o ninguno que implicaría por defecto extern), del valor de retorno definido o void si no es necesario, de los modificadores adicionales utilizados (extern, inline o static) y del número de parámetros definidos (incluido ninguno) IMPLEMENTADAS en un mismo fichero. Sólo se cuentan las funciones en los ficheros donde están IMPLEMENTADAS. Si tenemos un a.h con 5 funciones definidas de las cuales 1 está implementada en a.h y un a.cpp con 4 implementaciones el conteo de funciones es a.h=1 y a.cpp=4.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
<![CDATA[
Número de métodos "public", "protected", "private" o "package", que no tengan el modificador "abstract",(independientemente de los modificadores adicionales "static", "final", etc...) definidos en todas las clases definidas en un mismo fichero (pertenecientes a una clase, subclase o clase privada). Las interfaces no serán tenidas en cuenta.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
<![CDATA[
Número de funciones que no esten anidadas en otras funciones. Incluye todos los niveles de alcance.
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
<![CDATA[
Número de procedimientos internos. Si no hay ninguno se cuenta por defecto siempre 1.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
<![CDATA[
Número de subrutinas en un fichero, tanto inline como externas. Cuenta las declaradas como DEFINE SUBROUTINE o solo DEFINE siempre que termine en END-SUBROUTINE.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
<![CDATA[
Número de métodos y funciones Objective C (los métodos y funciones locales se suman al elemento clase contenedora; las funciones globales se suman al elemento programa).
]]>
        </implementation-description>    
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
<![CDATA[
Número de operacions SQL (funciones y procedimientos).
]]>
        </implementation-description>   
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
<![CDATA[
Número de funciones PHP (los métodos se suman al elemento clase contenedora; las funciones globales se suman al elemento programa).
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
<![CDATA[
Número de operacions SQL (funciones y procedimientos).
]]>
        </implementation-description> 
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
<![CDATA[
Número de declaración de funciones (los métodos se suman al elemento clase contenedora; las funciones globales se suman al elemento programa).
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG">
<![CDATA[
Número de subrutinas.
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG4">
<![CDATA[
Número de subrutinas.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
<![CDATA[
Número de funciones y procedimientos sub, con ámbito "PUBLIC" o "PRIVATE", con argumentos o sin ellos.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
<![CDATA[
Número de métodos, constructores y destructores, pertenecientes a cualquier ámbito ("PUBLIC", "PRIVATE", "PROTECTED", "FRIEND").
]]>
        </implementation-description>

      </implementation-descriptions>
      <parameters />
    </i18n>

    <i18n ref="OPT.LANGUAGE.ENGLISH">
      <name><![CDATA[Operations]]></name>
      
      <description>
<![CDATA[
Number of forms, modules, functions, paragraphs, subroutines, procedures, methods, constructors, destructors and subs for any scope or access level as be applicable in every technology.
]]></description>

      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
<![CDATA[
Number of form, module and function declarations. The form counted can define parameters "USING", "CHANGING", "TABLES" or none, the "USING" and "CHANGING" parameters can be of any type whereas the "TABLES" must be internal tables. Module counted can be declared in module pool or in another type of files (report, includes ...). Counts all the functions defined in the same file, independent from the type of parameters that it declares ("IMPORTING", "EXPORTING", "USING", "TABLES" or none) and they coud be included in function groups, function modules or another type of files (report...).
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
Number of paragraphs and Procedure Section, without consider the area to which they belong.
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
<![CDATA[
Number of functions, methods, constructors and destructors IMPLEMENTED. In case of the methods, constructor and destructors can belong to any scope("PUBLIC", "PROTECTED", " PRIVATE "). In case of functions it counts all the functions, independently of the type of used storage ("extern", "static" or none that it would imply for default extern), of the type of return value or void if it is not necessary, Of the additional used modifiers ("extern", "inline" oR "static") and the number of defined parameters (included none)IMPLEMENTED in the same file. Only counts functions in the files where they are IMPLEMENTED. If we have an a.h with 5 defined functions, with only 1 implemented in a.h, and an a.cpp with 4 implementations, the count will be a.h=1 and a.cpp=4.
]]>
        </implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
<![CDATA[
Number of methods and constructors(it does not count destructors), it counts all the scopes ("PUBLIC", "PROTECTED", "PRIVATE").
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
<![CDATA[
Number of functions, methods, constructors and destructors IMPLEMENTED. In case of the methods, constructor and destructors can belong to any scope("PUBLIC", "PROTECTED", " PRIVATE "). In case of functions it counts all the functions, independently of the type of used storage ("extern", "static" or none that it would imply for default extern), of the type of return value or void if it is not necessary, Of the additional used modifiers ("extern", "inline" oR "static") and the number of defined parameters (included none)IMPLEMENTED in the same file. Only counts functions in the files where they are IMPLEMENTED. If we have an a.h with 5 defined functions, with only 1 implemented in a.h, and an a.cpp with 4 implementations, the count will be a.h=1 and a.cpp=4.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
<![CDATA[
Counts all the  "public", "protected", "private" or "package" methods, without the "abstract" modifier (regardless additional modifiers "static", "final", etc...) defined in all the classes of the file(belonging to a class, subclass or private class). Interfaces are not taken into account.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
<![CDATA[
Number of functions which are not nested in another functions. Include all access level.
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
<![CDATA[
Number of internal procedures. If there isn't any procedures, the operations value is 1 by default.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
<![CDATA[
Number of subroutines, so much inline as extern. It counts declared since SUBROUTINE DEFINE or only DEFINE providing that it ends in END-SUBROUTINE.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
<![CDATA[
Count the number of Objective C methods and functions (if methods or local functions, count goes to the containing class item; if global functions, count goes to the program item).
]]>
        </implementation-description>   
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
<![CDATA[
Number of SQL operations (functions or procedures).
]]>
        </implementation-description>   
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
<![CDATA[
Count the number of PHP functions (if methods, count goes to the containing class item; if global functions, count goes to the program item).
]]>
        </implementation-description>   
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
<![CDATA[
Number of SQL operations (functions or procedures).
]]>
        </implementation-description>  
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
<![CDATA[
Count the number of function declarations (if methods, count goes to the containing class item; if global functions, count goes to the program item).
]]>
        </implementation-description>       
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG">
<![CDATA[
Count the number of subroutines.
]]>
        </implementation-description> 
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG4">
<![CDATA[
Count the number of subroutines.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
<![CDATA[
Number of functions and sub procedures, with scope "PUBLIC" or "PRIVATE",  with arguments or without them.
]]>
        </implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
<![CDATA[
Number of methods, constructors and destructors, belonging to any scope ("PUBLIC", "PRIVATE", "PROTECTED", "FRIEND").
]]>
        </implementation-description>

      </implementation-descriptions>
      <parameters />
    </i18n>
    </i18ns>
  </metric>
</metric-definition>
