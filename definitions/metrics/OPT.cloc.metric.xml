<?xml version="1.0" encoding="UTF-8"?>

<metric-definition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.optimyth.com/schema/definitions/metric" 
    version="1.1">

  <metric id="OPT.cloc" unit="LOC" aggregation="sum" aggregationScope="program">

    <!-- Criteria values: better is, scopes, language parsers, etc. -->
    <criteria-values>
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_TYPE.DOCUMENTATION" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.METRIC_HIERARCHY.DOCUMENTATION" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.BETTER_IS.NA" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.SYSTEM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.SCOPE.PROGRAM" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ACTIONSCRIPT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ASP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ASPNET" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CL400" />   
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.FOXPRO" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.GO" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.GROOVY" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.HTML" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.INFORMIX" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JSP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.KOTLIN" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PERL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PYTHON" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG4" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RUBY" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SCALA" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQLSCRIPT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SWIFT" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.TRANSACTSQL" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET" />
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.XML" />
    </criteria-values>

    <!-- Valid range -->
    <range>
      <minimum value="0" included="true" />
      <maximum value="+inf" included="false" />
    </range>

    <!-- Metric thresholds (up to three) -->
    <thresholds>
      <criterium-value>
        <threshold from="0.00" to="30.00" meaning="bad" />
        <threshold from="30.00" to="+inf" meaning="good" />
      </criterium-value>
    </thresholds>

    <!-- Metric parameters (applies to implementations that reference them) -->
    <parameters />

    <!-- Metric implementations for each language parser -->
    <implementations>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
        <internal-name id="OPT.ABAP.SIZE.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ACTIONSCRIPT">
        <internal-name id="OPT.ACTIONSCRIPT.SIZE.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>      

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ASP">
        <internal-name id="OPT.ASP.SIZE.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ASPNET">
        <internal-name id="OPT.ASPNET.SIZE.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
        <internal-name id="OPT.C.SIZE.LOC" />
        <java-class>com.als.cpp.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
        <internal-name id="OPT.CSHARP.SIZE.LOC" />
        <java-class>com.optimyth.csharp.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
        <internal-name id="OPT.CPP.SIZE.LOC" />
        <java-class>com.als.cpp.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CL400">
        <internal-name id="OPT.CL400.SIZE.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>      

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <internal-name id="OPT.COBOL.SIZE.LOC" />
        <java-class>com.als.cobol.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.FOXPRO">
        <internal-name id="OPT.FOXPRO.SIZE.LOC" />
        <java-class>com.optimyth.qaking.foxpro.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.GO">
        <internal-name id="OPT.GO.SIZE.LOC" />
        <java-class>com.kiuwan.qaking.go.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.GROOVY">
        <internal-name id="OPT.GROOVY.SIZE.LOC" />
        <java-class>com.optimyth.qaking.groovy.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>          

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.HTML">
        <internal-name id="OPT.HTML.SIZE.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.INFORMIX">
        <internal-name id="OPT.INFORMIX.SIZE.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
        <internal-name id="OPT.JAVA.SIZE.LOC" />
        <java-class>com.als.java.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
        <internal-name id="OPT.JS.LOC" />
        <java-class>com.optimyth.qaking.javascript.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
        <internal-name id="OPT.JCL.SIZE.LOC" />
        <java-class>com.als.jcl.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JSP">
        <internal-name id="OPT.JSP.SIZE.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.KOTLIN">
        <internal-name id="OPT.KOTLIN.SIZE.LOC" />
        <java-class>com.kiuwan.qaking.kotlin.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>       

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
        <internal-name id="OPT.NATURAL.SIZE.LOC" />
        <java-class>com.optimyth.qaking.natural.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
        <internal-name id="OPT.OBJECTIVEC.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
        <internal-name id="OPT.ORACLEFORMS.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PERL">
        <internal-name id="OPT.PERL.SIZE.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>       

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
        <internal-name id="OPT.PHP.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
        <internal-name id="OPT.PLSQL.SIZE.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
        <internal-name id="OPT.POWERSCRIPT.SIZE.LOC" />
        <java-class>com.optimyth.qaking.powerscript.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PYTHON">
        <internal-name id="OPT.PYTHON.SIZE.LOC" />
        <java-class>com.optimyth.python.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>       

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG">
        <internal-name id="OPT.RPG.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG4">
        <internal-name id="OPT.RPG4.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RUBY">
        <internal-name id="OPT.RUBY.LOC" />
        <java-class>com.als.core.metric.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SCALA">
        <internal-name id="OPT.SCALA.SIZE.LOC" />
        <java-class>com.kiuwan.qaking.scala.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>         

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQL">
        <internal-name id="OPT.SQL.SIZE.LOC" />
        <java-class>com.optimyth.sql.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQLSCRIPT">
        <internal-name id="OPT.SQLSCRIPT.SIZE.LOC" />
        <java-class>com.optimyth.sql.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>      
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SWIFT">
        <internal-name id="OPT.SWIFT.SIZE.LOC" />
        <java-class>com.optimyth.qaking.swift.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>         

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.TRANSACTSQL">
        <internal-name id="OPT.TRANSACTSQL.SIZE.LOC" />
        <java-class>com.optimyth.qaking.tsql.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
        <internal-name id="OPT.VB6.SIZE.LOC" />
        <java-class>com.optimyth.qaking.vb6.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
        <internal-name id="OPT.VBNET.SIZE.LOC" />
        <java-class>com.optimyth.vbnet.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.XML">
        <internal-name id="OPT.XML.SIZE.LOC" />
        <java-class>com.optimyth.xml.metrics.LocMetricRule</java-class>
        <java-version>1.5</java-version>
        <parameters />
      </language-parser>

      
      <reference><![CDATA[Optimyth (http://www.optimyth.com)]]></reference>
    </implementations>

    <!-- Code examples for each language parser -->
    <code-examples>
    <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
        <code-example name="metricCodeExampleAbap" result-value="7">
<![CDATA[
FUNCTION Z_IDOC_INBOUND_ASYNCHRONOUS.
 *"----------------------------------------------------------------------  COMMENT 1 (* Line beginning)
 *"*"Local interface:  COMMENT 2
 *"  TABLES COMMENT 3
 *"      IDOC_CONTROL_REC_40 STRUCTURE  EDI_DC40  COMMENT 4
 *"      IDOC_DATA_REC_40 STRUCTURE  EDI_DD40   COMMENT 5
 *"----------------------------------------------------------------------  COMMENT 6
 data e1edp16 type e1edp16.
 "COMMENT 7  (" In any place without code ahead)
 CALL FUNCTION 'IDOC_INBOUND_ASYNCHRONOUS'  "IT DOES NOT COUNT IN CLOC
 TABLES
 idoc_control_rec_40       = IDOC_CONTROL_REC_40
 idoc_data_rec_40          = IDOC_DATA_REC_40.
 ENDFUNCTION.
]]>
      </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ASP">
        <code-example name="metricCodeExampleAsp" result-value="6">
<![CDATA[
<!--#include file="constantes.inc.asp"              COMMENT 1 -->
<!--#include file="conectores.inc.asp"              COMMENT 2 -->
<!--#include file="adovbs.inc"                      COMMENT 3 -->
<%
Function OpenBox(vAncho,vTitulo)
 dim ancho, Titulo
 if vAncho <> "" then ancho = "style='width:"&vAncho&"'" end if
 if vTitulo <> "" then Titulo = "<h1>"&vTitulo&"</h1>" end if
%>
<div id="box" <%=ancho%>>                           <!--- IT DOES NOT COUNT IN CLOC, ONLY IN LOC -->
<div id="lb">
<div id="rb">
<div id="bb"><div id="blc"><div id="brc">
<div id="tb"><div id="tlc"><div id="trc">
<!-- COMMENT 4 -->
<div id="content">
<%=Titulo%>
  <div style="margin-right:10px">
    <%
     End Function

     Function CloseBox()
    %>
  </div>
</div>
<!--- end                                      COMMENT 5
of box border --> </div></div></div></div>     <!--- IT DOES NOT COUNT IN CLOC, ONLY IN LOC -->

</div></div></div></div>

<!-- COMMENT 6 -->
</div>
<%
 End Function
%>
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ASPNET">
        <code-example name="metricCodeExampleAspnet" result-value="7">
<![CDATA[
<head runat="server">
<title>Untitled Page</title>
</head>
<body>
<form id="form1" runat="server">
<div><%--<asp:Label ID="texto"
runat="server"></asp:Label>--%>                            <%--COMMENT 1--%>
<%--<asp:Label ID="texto" runat="server"></asp:Label>--%>  <%--COMMENT 2--%>
<%--                                                       <%--COMMENT 3--%>
Commented out HTML/CODE/Markup.  Anything with             <%--COMMENT 4--%>
this block will     not be parsed/handled by ASP.NET.      <%--COMMENT 5--%>
--%>                                                       <%--COMMENT 6--%>
<%--<asp:Label ID="texto" runat="server">                  <%--COMMENT 7--%>
</asp:Label>--%><asp:TextBox ID="texto" runat="server"></asp:TextBox>
 </form>
 </body>
 ]]>
        </code-example>
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
        <code-example name="metricCodeExampleC" result-value="0"><![CDATA[
#include <stdio.h>
#define LAST 10

int main()
{
  int i, sum = 0;
   
  for ( i = 1; i <= LAST; i++ ) {
    sum += i;
  }
  
  printf("sum = %d\n", sum);
  return 0;
}
]]>
        </code-example>
      </language-parser>      
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
        <code-example name="metricCodeExampleCobol" result-value="6">
<![CDATA[
      ****************************************************************     COMMENT 1

       DATA DIVISION.

      ****************************************************************     COMMENT 2


        WORKING-STORAGE SECTION.


        01  SEM-RD-CURSORES.
            05  SEM-KT9136TC1 PIC X VALUE "N".
                88  SEM-KT9136TC1-OPEN             VALUE "Y".
                88  SEM-KT9136TC1-CLOSED           VALUE "N".
            05  SEM-KCIM06TC1 PIC X VALUE "N".
                88  SEM-KCIM06TC1-OPEN             VALUE "Y".
                88  SEM-KCIM06TC1-CLOSED           VALUE "N".

      * ERROR ROUTINE COPY                                               COMMENT 3

          COPY KAELCWER OF QCBLSRC.


      * R4.1-CR298-26062009-INI                                          COMMENT 4
          COPY KAELCR11 OF QCBLSRC.
      * R4.1-CR298-26062009-FIN                                          COMMENT 5

      * WORKING COMUN                                                    COMMENT 6

      **& END   FSC-L&P***
]]>
</code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
        <code-example name="metricCodeExampleCpp" result-value="1">
<![CDATA[
switch (kind) {
  case anAssociation:
  /*COMMENT*/ case anAggregation:       //IT DOES NOT COUNT IN CLOC, ONLY IN LOC

  case anAggregationByValue:
    end->reread_children_if_needed_();  // IT DOES NOT COUNT IN CLOC, ONLY IN CLOC
    break;

  case aGeneralisation:
  case aRealization:
    if (!end->formals().isEmpty())
    // to update actuals & base_type    COMMENT 1
    start->reread_if_needed_();
  default:
    break;
}
]]>
       </code-example>
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CL400">
        <code-example name="metricCodeExampleCpp" result-value="13">
<![CDATA[
              PGM (&TOMATE &PATATA)

 /*******************************************/
 /* DECLARE STATIC VARIABLES FOR TEST CALL  */
 /*******************************************/
              DCL        VAR(&FILE) TYPE(*CHAR) LEN(10) VALUE(QCUSTCDT)
              DCL        VAR(&LIB) TYPE(*CHAR) LEN(10) VALUE(QIWS)
              DCL        VAR(&MBR) TYPE(*CHAR) LEN(10) VALUE(*FIRST)
              DCL        VAR(&TOEMAIL) TYPE(*CHAR) LEN(255) VALUE('richard@rjssoft.com')
              DCL        VAR(&FROMEMAIL) TYPE(*CHAR) LEN(255) VALUE('richard@rjssoft.com')
              DCL        VAR(&SUBJECT) TYPE(*CHAR) LEN(255) VALUE('This is a Test call to SMTPDB2')
              DCL        VAR(&MESSAGE) TYPE(*CHAR) LEN(5000) VALUE('This is a test message')

 /***************************************************************/
 /* GO TO ERROR HANDLER IF ERRORS OCCUR                         */
 /***************************************************************/
              MONMSG     MSGID(CPF0000) EXEC(GOTO CMDLBL(ERRORS))

 /*******************************************/
 /* SEND AS/400 FILE TO EMAIL RECIPIENT NOW */
 /*******************************************/
              SMTPDB2    FILE(&LIB/&FILE) MBR(&MBR) TOADDR(&TOEMAIL) +
                           FROMADDR(&FROMEMAIL) SUBJECT(&SUBJECT) +
                           MESSAGE(&MESSAGE) INTFILE(*AS400FILE) +
                           SMTPHOST(*DEFAULT) RCDDLM(*CRLF) +
                           LASTRCDDLM(*YES) DTAFMT(*CSV) +
                           FLDDLM(*COMMA) COLHDG(*NO) QUOTES(*YES) +
                           CONTYPE('text/plain') LOG(*NO)

              RETURN

  /********************************************************************/
  /* HANDLE ERRORS */
  /********************************************************************/
  ERRORS:

    /* SEND EXIT MESSAGE ON ERROR */
              SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) MSGDTA('Errors +
                           occurred while creating email') +
                           MSGTYPE(*ESCAPE)

              ENDPGM 
]]>
       </code-example>
      </language-parser>      
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
        <code-example name="metricCodeExampleCsharp" result-value="5">
<![CDATA[
public class QuejasSerializer
{
  // <summary>             COMMENT 1
  /*checking               COMMENT 2
    comment                COMMENT 3
    csharp */              COMMENT 4
  public static string GeneraQuejas(REP_QUEJAS_OBJ from)
  {
    RealeStringBuilder sb = new RealeStringBuilder();            // my comment - IT DOES NOT COUNT IN CLOC, ONLY IN LOC
    sb.AppendLine(DocPathSerializer.SerializeTexto(from.E_QUEJAS1));
    /*comment              COMMENT 5
      test*/ sb.AppendLine(DocPathSerializer.SerializeTexto(from.E_QUEJAS2)); // IT DOES NOT COUNT IN CLOC, ONLY IN LOC
    sb.AppendLine(DocPathSerializer.SerializeTexto(from.E_QUEJAS3));
    return sb.ToString();
  }
}
        ]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.FOXPRO">
        <code-example name="metricCodeExampleHtml" result-value="1">
<![CDATA[
*-- Common include
#define APLXXXXX           .T.

#include ..\..\comun\includes\foxpro.h
#include ..\..\comun\includes\msjlib.h
#include ..\..\comun\includes\msjmenu.h

#define PROC_OPEN_COMPANY    "   1"
#define PROC_OPEN_ENTRY    "   2"

#define INVOICE_NEW      .t.

#define FORM_ENTRY_EDITAR  .f.
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.GO">
        <code-example name="metricCodeExampleGo" result-value="6">
          <![CDATA[
package main

import "fmt"

const favColor string = "blue"

func main() {
    var guess string
    // Create an input loop
    for {
        // Ask the user to guess my favorite color
        fmt.Println("Guess my favorite color:")
        // Try to read a line of input from the user. Print out the error 0
        if _, err := fmt.Scanln(&guess); err != nil {
            fmt.Printf("%s\n", err)
            return
        }
        // Did they guess the correct color?
        if favColor == guess {
            // They guessed it!
            fmt.Printf("%q is my favorite color!\n", favColor)
            return
        }
        // Wrong! Have them guess again.
        fmt.Printf("Sorry, %q is not my favorite color. Guess again.\n", guess)
    }
}
]]>
        </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.GROOVY">
        <code-example name="metricCodeExampleGroovy" result-value="5">
<![CDATA[
    /*
    * Block comment
    */
    File includes = new File((String)properties.basedir, 'includes')

    includes.eachDir{File platform ->
      if(platform.name=='CVS') return
      File indexFile = new File(platform, "index.list")
      int count = 0;

      //  inline comment
      indexFile.withPrintWriter { PrintWriter w ->
        int p = platform.absolutePath.length()+1
        platform.eachFileRecurse { File header ->
          if(!header.file) return;
          String headerName = header.absolutePath.substring(p).replace('\\', '/')
          if(headerName.startsWith('CVS')) return;
          w.println("${headerName}")
          count++;
        }
      }
      // inline comment
      println "Found ${count} header files for platform ${platform.name}. Index ${indexFile} generated."
    }
]]>
       </code-example>
      </language-parser>       
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.HTML">
        <code-example name="metricCodeExampleHtml" result-value="5">
<![CDATA[
<HTML>
 <BODY>
 <!--   SELECT,                                         COMMENT 1
 INPUT TYPE=BUTTON,                                     COMMENT 2
 INPUT TYPE=PASSWORD -->                                COMMENT 3
 <FORM name="formulario" action="">
  <input type="checkbox" name="pasa" value="tv" />TV                      <!-- IT DOES NOT COUNT IN CLOC, ONLY IN LOC -->
  <input type="radio" value="libros"name="musica" />Libros                <!-- IT DOES NOT COUNT IN CLOC, ONLY IN LOC -->
  <input type="radio" value="libros" />Libros
  <!-- another                 COMMENT 4
       comment                 COMMENT 5
       comment -->  </FORM>    <!-- IT DOES NOT COUNT IN CLOC, ONLY IN LOC -->
 </BODY>
</HTML>
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.INFORMIX">
        <code-example name="metricCodeExampleInformix" result-value="3">
<![CDATA[
# ------------------------------------------------------------------
# @1    
# ------------------------------------------------------------------ 

DATABASE dummy

define wtime                                        datetime year to second

MAIN

   LET wtime = current year to second
   LET wmessage = "Start -  : ",wtime clipped
   DISPLAY wmessage clipped

   LET ls_sql =" Select  numinvoice from invoices "
   PREPARE psel_invoices FROM ls_sql  
   DECLARE qsel_concprefact cursor with hold for psel_invoices   

   LET wtime = current year to second
   LET wmessage = "End - ", wtime clipped
   DISPLAY wmessage clipped

END MAIN     
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
        <code-example name="metricCodeExampleJava" result-value="5">
<![CDATA[
package pack1.ci.cliente;

import pack1.ci.componentes.*;

/**                                            COMMENT 1
 * Autor: consulting  Date: 22/12/1998         COMMENT 2
                                               COMMENT 3  */
public class CITabObjetoInmueble extends pack1.ae.presentacion.AqTab implements pack1.ci.componentes.CIPanelObjeto {
  public final int NUM_PANELES_OBJ_INMUEBLE = 2;
    // method comment.                          COMMENT 4
    public boolean completarMensajeGrabacion(pack1.ci.componentes.CIEstructuraDatosGrid datos) {
      CIPanelObjeto panelActual = null;
      boolean finishOK = true;
      for (int i = 0; i < NUM_PANELES_OBJ_INMUEBLE; i++) {                           // IT DOES NOT COUNT IN CLOC, ONLY IN LOC
        panelActual = (CIPanelObjeto) devolverPanel(i);
        /* comment                              COMMENT 5
           divided test */ finishOK = panelActual.completarMensajeGrabacion(datos);  //IT DOES NOT COUNT IN CLOC, ONLY IN LOC
        if (!finishOK) break;
      }
    return finishOK;
  }
}
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
        <code-example name="metricCodeExampleJavascript" result-value="4">
<![CDATA[
// PEOtherPartyData.js           COMMENT 1

TEXT_AHV_NO = 'idTxtNewAhv';

function ahvnumber() {
  /* my comment                  COMMENT 2
   */                            COMMENT 3
  var ahvstring = "";
  var numZeropad1 = document.getElementById(TEXT_AHV_NO).value;
  var numZeropad = numZeropad1 + '';        // IT DOES NOT COUNT IN CLOC, ONLY IN LOC
  if(numZeropad.length > 0 && numZeropad1 > 0)
  {
    /* prueba                    COMMENT 4
     */ while(numZeropad.length < count) {  // IT DOES NOT COUNT IN CLOC, ONLY IN LOC
         numZeropad = "0" + numZeropad;
        }
        ahvstring =  numZeropad.value;
        var ahvfinal = ahvstring.substring(0,3) + "."  + ahvstring.substring(3,7) + "." +
        document.getElementById(TEXT_AHV_NO).value=ahvfinal;
  }
}
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
        <code-example name="metricCodeExampleJcl" result-value="2">
<![CDATA[
//DKP00615 EXEC PGM=ICEGENER
//SYSUT1 DD DSN=MBVP.EI.FIX.UNLOAD.EIDTMAEC,DISP=SHR
//SYSUT2 DD DSN=MBVP.DK.GDG.EIDTMAEC.RESPALDO(+1),
// DISP=(NEW,CATLG,DELETE),
// SPACE=(CYL,(100,50),RLSE),UNIT=3390,
// DCB=(BKUX.MODEL,DSORG=PS,RECFM=FB,LRECL=324,BLKSIZE=0)

//*                                                                         COMMENT1
//SYSPRINT DD SYSOUT=*
//SYSOUT DD SYSOUT=*
//SYSABOUT DD SYSOUT=*
//*                                                                         COMMENT2
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JSP">
        <code-example name="metricCodeExampleJsp" result-value="3">
<![CDATA[
<?xml version='1.0' encoding='iso-8859-15' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
         "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

 <f:view locale="#{excepcionesController.userContext.locale}">
 <f:loadBundle basename="i18n.messagesExcepciones" var="msg" />
 <head>
  <title>#{msg.tituloBrowser}</title>
  <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=ISO-8859-15" />
  <link rel="stylesheet" type="text/css" href="${request.contextPath}/docs/arqos/css/Comun.css" />
  <script type="text/javascript" src="${request.contextPath}/docs/comun/js_excepciones/filtroBusquedaExcepciones.js"></script>
 </head>

  <body onload="verifyErrors(); deshabilitarBotones()">
    <h:form id ="form_excepciones">
      <rich:panel styleClass="superContainer">
        <rich:panel styleClass="containerWithoutMenu">
          <h:outputText styleClass="search_title" value="#{msg['selecexcepciones.subtitulo']}" />
            <rich:panel styleClass="exit_data">
              <h:panelGrid columns="1"  style="width:90%;margin-left:1%;margin-right:1%;">
                <rich:panel>
                  <h:outputText>
                    <B><h:outputText value="#{msg['selecexcepciones.detalle.tipCombi']} " /></B>
                  </h:outputText>
                  <h:outputText value="#{excepcionesController.atributos}" />
                </rich:panel>   <!-- END PANEL HEAD-BOARD - IT DOES NOT COUNT IN CLOC, ONLY IN LOC -->
              </h:panelGrid>
            </rich:panel>
            <!-- CONSULTATION OF ASSIGNAMENT EXCEPTIONS ** LIST OF EXCEPTIONS ** - COMMENT 1-->
            <a4j:keepAlive beanName="excepcionesController"></a4j:keepAlive>
            <!-- FIN                                                               COMMENT 2
                 DE ESTA                                                           COMMENT 3
                 TABLA --> </rich:panel>   <!-- IT DOES NOT COUNT IN CLOC, ONLY IN LOC -->
        </rich:panel>
    </h:form>
 </body>
</f:view>
</html>
]]>
       </code-example>
      </language-parser>
  <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.KOTLIN">
    <code-example name="metricCodeExampleKotlin" result-value="6">
<![CDATA[
import java.sql.DriverManager

class SourceInSink {

    /* 
     * Comment
     * block
     * line
     */
    fun main(args: Array<String>) {
        val sql = args[0]
        val db = DriverManager.getConnection("jdbc:sqlite::memory:")
        val statement = db.createStatement()
        // sink
        val rs = statement.executeQuery(sql)  
    }
}
]]>
     </code-example>
  </language-parser>      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
        <code-example name="metricCodeExampleNatural" result-value="7">
<![CDATA[
 0240 DEFINE DATA
 0250 LOCAL
 0260   USING RVIV01L
 0270 LOCAL
 0280   USING RVIV03L
 0290 LOCAL
 0300 1 PARAM-TAB (N3)
 0350 1 SI-NO-REC   (A2)
 0360 1 SI-NO-BONF  (A2)
 0380 *****************************                                COMMENT 1
 0390 * VARIABLES FOR THE FORMAT 1                                 COMMENT 2
 0400 *****************************                                COMMENT 3
 0490 **1 M-TAB     (N6,2/0:150)                                   COMMENT 4
 0500 1 M-TAB     (N8,7/0:150)
 0510 1 R-TAB     (N8,2/0:150)
 0520 1 T-TAB     (N10,2/0:150)
 0530 *****************************                                COMMENT 5
 0540 *  TABLES OF THE SECOND MAP                                  COMMENT 6
 0550 *****************************                                COMMENT 7
 0630 1 INICIO    (N3)
 0710 1 REDEFINE DES-TABLA-INI
 0720   2 COD-TABLA (N3)
 0730   2 PAR-TABLA (A2)
 0740   2 ANO-TABLA (N3)
 0760 1 DES-TABLA-FIN  (A8)
 0770 1 REDEFINE DES-TABLA-FIN
 0780   2 COD-TABLA (N3)
 0790   2 PAR-TABLA (A2)
 0800   2 ANO-TABLA (N3)
 0810 END-DEFINE
 0860 ON ERROR
 0870   WRITE (03) '='  RVI01U03.PARAMETRO
 0880   WRITE (03) '='  RVI01U03.VALOR
 0890 END-ERROR
 0910 INPUT PARAM-TAB
 1850 END
]]>
       </code-example>
      </language-parser>
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
        <code-example name="metricCodeExampleObjectiveC" result-value="4">
<![CDATA[
@implementation QAMyProgram

/*
Version 1.0
*/

@synthesize initialized = _initialized;

- (id)initWithValue:(NSString *)initialValue
{
    if ((self = [super init])) 
    {
        // not initialized
        _initialized = NO;
    }
    
    return self;
}

@end
]]>
        </code-example>
      </language-parser>           

      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
        <code-example name="metricCodeExampleOracleForms" result-value="0">
<![CDATA[
<?xml version = '1.0' encoding = 'UTF-8'?>
<Module version="101020002" xmlns="http://xmlns.oracle.com/Forms">
   <FormModule>
      <ProgramUnit Name="CARGAR_LISTAS" ProgramUnitType="Procedimiento" ProgramUnitText="PROCEDURE CARGAR_LISTAS IS&amp;#10;BEGIN&amp;#10;	:BLACTUPLANCO01.T_TIPCUENTA  := '*';		&amp;#10;	:BLACTUPLANCO01.T_TIPIVA     := '*';		&amp;#10;	--:BLACTUPLANCO02.T_TIPCUENTA  := '*';		&amp;#10;	:BLACTUPLANCO02.T_TIPCUENTA  := null;		&amp;#10;	:BLACTUPLANCO02.T_TIPIVA     := '*';   	&amp;#10;END;"/>
      <ProgramUnit Name="ACTIVAR_ITEM" ProgramUnitType="Procedimiento" ProgramUnitText="Procedure ACTIVAR_ITEM ( Bloque In Varchar2,&amp;#10;                         Item   In Varchar2,&amp;#10;                         SiNo   In Boolean ) Is&amp;#10;  BloqueItem     Varchar2(50) := Bloque||'.'||Item;                         &amp;#10;Begin	&amp;#10;  If Get_Item_Property(BloqueItem, Insert_Allowed) = 'TRUE' And Not SiNo Then&amp;#10;  	Set_Item_Property(BloqueItem, Insert_Allowed, Property_False);&amp;#10;  	Set_Item_Property(BloqueItem, Update_Allowed, Property_False);&amp;#10;  	Set_Item_Property(BloqueItem, Navigable     , Property_False);&amp;#10;  ElsIf Get_Item_Property(BloqueItem, Insert_Allowed) = 'FALSE' And SiNo Then	                                                          &amp;#10;  	Set_Item_Property(BloqueItem, Insert_Allowed, Property_True);&amp;#10;  	Set_Item_Property(BloqueItem, Update_Allowed, Property_True);&amp;#10;  	Set_Item_Property(BloqueItem, Navigable     , Property_True);&amp;#10;  End If;&amp;#10;End;"/>
      <ProgramUnit Name="BACKGROUND_ITEM" ProgramUnitType="Procedimiento" ProgramUnitText="Procedure BACKGROUND_ITEM ( Bloque In Varchar2,&amp;#10;                            Item   In Varchar2,&amp;#10;                            Color  In Varchar2 ) Is&amp;#10;  /* r225g225b225 Gray12 &amp;#10;     r255g255b255 White  */                            &amp;#10;  BloqueItem     Varchar2(50) := Bloque||'.'||Item;                         &amp;#10;Begin	&amp;#10;  If Get_Item_Property(BloqueItem, BackGround_Color) = 'r225g225b225' And Color = 'r255g255b255' Then&amp;#10;  	Set_Item_Property(BloqueItem, Visual_Attribute, 'ATT_WHITE');  	  	&amp;#10;  ElsIf Get_Item_Property(BloqueItem, BackGround_Color) = 'r255g255b255' And Color = 'r225g225b225' Then&amp;#10;  	Set_Item_Property(BloqueItem, Visual_Attribute, 'ATT_GRAY12');   	&amp;#10;  End If;&amp;#10;End;"/>
   </FormModule>
</Module>
]]>
        </code-example>
      </language-parser>  
      
     <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PERL">
        <code-example name="metricCodeExamplePerl" result-value="1">
<![CDATA[
package AroundPlugin;
use Mojo::Base 'Mojolicious::Plugin';

sub register {
  my ($self, $app) = @_;

  # Render return value
  $app->hook(
    around_action => sub {
      my ($next, $c, $action, $last) = @_;
      my $value = $next->();
      $c->render(text => $value) if $last && $c->stash->{return};
      return $value;
    }
  );
}

1;
]]>
       </code-example>
     </language-parser>       
      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
        <code-example name="metricCodeExamplePhp" result-value="16">
<![CDATA[
<?php

/*
 * This file is part of Twig.
 *
 * (c) Fabien Potencier
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

class Twig_Tests_Node_BlockReferenceTest extends Twig_Test_NodeTestCase
{
    /**
     * @covers Twig_Node_BlockReference::__construct
     */
    public function testConstructor()
    {
        $node = new Twig_Node_BlockReference('foo', 1);

        $this->assertEquals('foo', $node->getAttribute('name'));
    }

    /**
     * @covers Twig_Node_BlockReference::compile
     * @dataProvider getTests
     */
    public function testCompile($node, $source, $environment = null)
    {
        parent::testCompile($node, $source, $environment);
    }

    public function getTests()
    {
        return array(
            array(new Twig_Node_BlockReference('foo', 1), <<<EOF
// line 1
\$this->displayBlock('foo', \$context, \$blocks);
EOF
            ),
        );
    }
}
]]>
       </code-example>
      </language-parser>      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
        <code-example name="metricCodeExamplePlsql" result-value="5">
<![CDATA[
CREATE OR REPLACE PACKAGE BODY CONF_ETIQ_ENTREGA3.MC_QRY IS
         pResultado  OUT SYS_REFCURSOR)
IS
BEGIN
 OPEN pResultado FOR
  WITH
   rol AS (
   SELECT cdc,
    sistema_id,
    id_rol_nplex
   FROM table1
    INNER JOIN (SELECT *
     FROM rol_nplex
     WHERE cdc                     = pCdc
      AND estado_configuracion_id = CONSTANTES_QRY.EC_OPERATIVO)
    USING (cdc, rol_nplex_id))
    SELECT s.id_sistema                 AS "idSistema",
     c.id_central                 AS "idNodo",                    /* IT DOES NOT COUNT IN CLOC, ONLY IN LOC
     otro                                                            COMMENT 1
     comentario                                                      COMMENT 2 */
     s.descripcion                AS "descripcion",
     /* my comment                                                   COMMENT 3
     recuperado*/s.nombre                     AS "nombreSistema", /* IT DOES NOT COUNT IN CLOC, ONLY IN LOC */
     h.nombre                     AS "nombreHost",
     r.id_rol_nplex               AS "idRol",
     --                                                              COMMENT 4
     s.ip_servicios_generales     AS "ip",   --r.descripcion
     s.puerto_servicios_generales AS "puerto",
     /*                                                              COMMENT 5 */
     s.tipo_sistema_id            AS "tipoSistema"
    FROM tables2 s
    INNER JOIN (SELECT *
          FROM host
          WHERE cdc                     = pCdc
                AND estado_configuracion_id = CONSTANTES_QRY.EC_OPERATIVO) h
    USING (cdc, host_id)
    INNER JOIN (SELECT *
          FROM central
          WHERE cdc                     = pCdc
                 AND estado_configuracion_id = CONSTANTES_QRY.EC_OPERATIVO) c
    USING (cdc, sistema_id)
    INNER JOIN rol r
    USING (cdc, sistema_id)
   ORDER BY s.id_sistema;
 END GetCentrales;

END MC_QRY;
]]>
       </code-example>
      </language-parser>
     <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
        <code-example name="metricCodeExamplePowerscript" result-value="2">
<![CDATA[
$PBExportHeader$n_application_globalparameter.sru
forward
global type n_application_globalparameter from n_globalparameter
end type
end forward

global type n_application_globalparameter from n_globalparameter
end type
global n_application_globalparameter n_application_globalparameter

on n_application_globalparameter.create
call super::create
end on

on n_application_globalparameter.destroy
call super::destroy
end on

event ue_decimal_separator_changed;call super::ue_decimal_separator_changed;/*////////////////////////////////////////////////////////
 Event   :  n_application_globalparameter.ue_Decimal_separator_changed
 Scope: <ACCESS>public</ACCESS>
 Returns: <RETURN>(None)</RETURN>
 Parameters:  <ARGS>
          String as_new_decimal_separator:  El nuevo separador decimal del Sistema operativo y de la aplicación
 </ARGS>
 Description: <DESC>  Llamamos a la funcion global que comprueba si 
 si el separador decimal coincide con el definidio en la userdll</DESC>
//////////////////////////////////////////////////////////
 01/12/2004 Initial version by <AUTH> JMN </AUTH>
////////////////////////////////////////////////////////// */
string ls_type = "FRAME"
post gf_test_decimal_separator(ls_type)
end event
]]>
       </code-example>
      </language-parser>
     <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PYTHON">
        <code-example name="metricCodeExamplePython" result-value="12">
<![CDATA[
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
requests.certs
~~~~~~~~~~~~~~

This module returns the preferred default CA certificate bundle.

If you are packaging Requests, e.g., for a Linux distribution or a managed
environment, you can change the definition of where() to return a separately
packaged CA bundle.
"""
import os.path

try:
    from certifi import where
except ImportError:
    def where():
        """Return the preferred certificate bundle."""
        # vendored bundle inside Requests
        return os.path.join(os.path.dirname(__file__), 'cacert.pem')

if __name__ == '__main__':
    print(where())
]]>
       </code-example>
      </language-parser>       
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.TRANSACTSQL">
        <code-example name="metricCodeExampleTransactsql" result-value="2">
<![CDATA[
/****** Object:  StoredProcedure [dbo].[PR_IMSG_COTA]    Script Date: 08/13/2012 11:48:49 ****** - COMMENT 1 */
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[PR_IMSG_COTA_USUARIO_CARTEIRA]
@p_ID_CADASTRO AS BIGINT = 0 OUTPUT,
@p_ID_PARAMETRO AS INT = NULL,
@p_CD_USUARIO AS VARCHAR(15) = NULL,
@p_CD_USUARIO_ALTERACAO AS VARCHAR(15) = NULL,
@p_DT_INCLUSAO AS DATETIME = NULL,                                 /* IT DOES NOT COUNT IN CLOC, ONLY IN LOC */
@p_DT_EXCLUSAO AS DATETIME = NULL,
@p_IC_NOVA AS BIT = 0
AS
BEGIN
DECLARE
@v_ID_PARAMETRO AS INT,
@v_CD_USUARIO AS VARCHAR(15),
@v_CD_USUARIO_ALTERACAO AS VARCHAR(15),
@v_DT_INCLUSAO AS DATETIME,
@v_DT_EXCLUSAO AS DATETIME,
@v_IC_NOVA AS BIT
/*otro                                                                                              COMMENT 2
  comentario*/    SET @v_ID_PARAMETRO = @p_ID_PARAMETRO           /* IT DOES NOT COUNT IN CLOC, ONLY IN LOC */
SET @v_CD_USUARIO = @p_CD_USUARIO
SET @v_CD_USUARIO_ALTERACAO = @p_CD_USUARIO_ALTERACAO
SET @v_DT_INCLUSAO = @p_DT_INCLUSAO
SET @v_DT_EXCLUSAO = @p_DT_EXCLUSAO
SET @v_IC_NOVA = @p_IC_NOVA

END
GO
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG">
            <code-example name="metricCodeExampleSql" result-value="1">
<![CDATA[
      C                     DOW  '1'
      C                     READ FILEA
      C                     IF   %EOF
      C                     LEAVE
      C                     ENDIF

      C                     READ REC1                N                  64
      C   64                LEAVE
      C                     ENDDO

      C     KEYFLD          READEFILEA
      C     KEYFLD          READEREC1                                   56
      C                     READEFILEA
      C                     READEREC1                N                                          56

      C                     READPFILEA
      C                     IF   %EOF
      C                     GOTO BOF
      C                     ENDIF

      C                     READPPREC1               N                             72
      C   72                GOTO      BOF
       *
      C      BOF            TAG
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG4">
        <code-example name="metricCodeExampleSql" result-value="1">
<![CDATA[
      D pCusNo          S              6p 0
      D pName           S             30a
      D pAddr1          S             30a
      D pAddr2          S             30a
      D pCity           S             25a
      D pState          S              2a
      D pZip            S             10a

 	 *
      D Length                         4B 0 VALUE
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RUBY">
        <code-example name="metricCodeExampleSql" result-value="6">
<![CDATA[
module Tester
  class StaticFileReader
    attr_reader :site, :dir, :unfiltered_content
    def initialize(site, dir)
      @site = site
      @dir = dir
      @unfiltered_content = Array.new
    end

    # Read all the files in <source>/<dir>/ for Yaml header and create a new Page
    # object for each file.
    #
    # dir - The String relative path of the directory to read.
    #
    # Returns an array of static files.
    def read(files)
      files.map{ |file| @unfiltered_content << StaticFile.new(@site, @site.source, @dir, file)}
      @unfiltered_content
    end
  end
end
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SCALA">
            <code-example name="metricCodeExampleScala" result-value="7">
<![CDATA[
package gitbucket.core.model

trait AccessTokenComponent { self: Profile =>
  import profile.api._

  lazy val AccessTokens = TableQuery[AccessTokens]

  class AccessTokens(tag: Tag) extends Table[AccessToken](tag, "ACCESS_TOKEN") {
    // in line comment
    val accessTokenId = column[Int]("ACCESS_TOKEN_ID", O AutoInc)
    val userName = column[String]("USER_NAME")
    val tokenHash = column[String]("TOKEN_HASH")
    val note = column[String]("NOTE")
    def * = (accessTokenId, userName, tokenHash, note) <> (AccessToken.tupled, AccessToken.unapply)
  }
}

      /* this
      * is 
      * a 
      * block
      * comment
      */
case class AccessToken(
  accessTokenId: Int = 0,
  userName: String,
  tokenHash: String,
  note: String
)
]]>
       </code-example>
      </language-parser>         
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQL">
        <code-example name="metricCodeExampleSql" result-value="4">
<![CDATA[
-- Des:                                          COMMENT 1
--   my comment                                  COMMENT 2
drop table liredeci /*comment                    IT DOES NOT COUNT IN CLOC, ONLY IN LOC
comment */                                       COMMENT 3
/* comment                                       COMMENT 4
comment */select * from NWI92330                 -- IT DOES NOT COUNT IN CLOC, ONLY IN LOC
order by centidad, cseguro, cnegreas -- comment  IT DOES NOT COUNT IN CLOC, ONLY IN LOC
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQLSCRIPT">
        <code-example name="metricCodeExampleSql" result-value="0">
        </code-example>
      </language-parser>      
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SWIFT">
        <code-example name="metricCodeExampleSwift" result-value="2">
<![CDATA[
import UIKit

class AccountsViewController: UITableViewController {
    // this is a comment
    override func viewDidLoad() {
        super.viewDidLoad()
        // set title
        title = "Title"
    }

}
]]>
       </code-example>
      </language-parser>       
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
        <code-example name="metricCodeExampleVb6" result-value="2">
<![CDATA[
VERSION 1.0 CLASS
BEGIN
MultiUse = -1  'True
Persistable = 0  'NotPersistable
DataBindingBehavior = 0  'vbNone
DataSourceBehavior  = 0  'vbNone
MTSTransactionMode  = 0  'NotAnMTSObject
END
'comment                                              COMMENT 1
Option Explicit 'Comment                              IT DOES NOT COUNT IN CLOC, ONLY IN LOC
Public obG As vbalGrid
'comment                                              COMMENT 2
Public Function RowMatch(ByVal p_vaSearch As Variant, p_svClauColumna As String) As Long
 Dim i As Long
 Dim j As Long

 With Me.obG
  j = .ColumnIndex(p_svClauColumna)
  For i = 1 To .Rows
   If .CellText(i, j) = p_vaSearch Then
    RowMatch = i
    Exit Function
   End If
  Next i
 End With
End Function
]]>
       </code-example>
      </language-parser>
            <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
        <code-example name="metricCodeExampleVbnet" result-value="4">
<![CDATA[
Class NativeMethods
Friend Sub AddToHistory(uriType As Uri)
End Sub

Friend Sub AddToHistory(ByRef uriType As Uri)                                   'IT DOES NOT COUNT IN CLOC, ONLY IN LOC
End Sub

Friend Sub AddToHistory(uriType As Uri, ByRef var as String)
End Sub

Friend Sub AddToHistory(uriType As Uri, var as String)
End Sub

'Comentarios: Los comentarios se indican, através del signo de apóstrofe (').     COMMENT 1
'Los comentarios multilinea no existen, por lo que para comentar varias lineas,   COMMENT 2
'habrá que colocar un apóstrofe por cada línea de comentario.                     COMMENT 3
 Public Declare Function SetWindowsHookEx Lib "user32" _
  Alias "SetWindowsHookExA" (ByVal idHook As Integer, _
  ByVal lpfn As KeyboardHookDelegate, ByVal hmod As Integer, _
  ByVal dwThreadId As Integer) As Boolean '...                                    IT DOES NOT COUNT IN CLOC, ONLY IN LOC
 ' ...                                                                            COMMENT 4
 End Function

End Class
]]>
       </code-example>
      </language-parser>
      <language-parser ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.XML">
        <code-example name="metricCodeExampleXml" result-value="3">
<![CDATA[
<web-app id="WebApp">
 <servlet-mapping>
  <servlet-name>Mic</servlet-name>
   <url-pattern>/mic</url-pattern>     <!-- comment - IT DOES NOT COUNT IN CLOC, ONLY IN LOC-->
  </servlet-mapping>
 <!--<welcome-file-list>                           COMMENT 1
  <welcome-file>app/index.jsp</welcome-file>       COMMENT 2
 </welcome-file-list>                              COMMENT 3
--> </web-app>                          <!-- IT DOES NOT COUNT IN CLOC, ONLY IN LOC -->
]]>
      </code-example>
      </language-parser>
    </code-examples>

    <!-- Internationalizations for each human language -->
    <i18ns>
    <i18n ref="OPT.LANGUAGE.SPANISH">
      <name><![CDATA[Líneas de comentarios]]></name>
      
      <description>
<![CDATA[
Número de líneas de comentarios. Serán líneas de comentario aquellas que empiecen por el marcador de comentario propio de cada tecnología. Se cuentan tanto líneas simples de comentario como bloques. No cuenta como línea de comentario aquella que comparte comentario y código fuente. En ese caso, solo cuenta como línea de código fuente.

Esta métrica se usa para computar después "pctdoc", una métrica sencilla de mantenibilidad que estima la "densidad" de documentación en el código fuente. Recuerda que la documentación no debe ser sólo suficiente, sino además estar bien escrita y cumplir su propósito.
]]></description>

      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Se contabilizará una línea que empiece por *. Cualquier línea que contenga " sólo se contara como comentario si no contiene código.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ASP">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ASPNET">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CL400">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>         

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque. Una línea se contará como comentario si en la columna 7 tiene un *.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.HTML"><![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.FOXPRO"><![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.GO">
          <![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.GROOVY"><![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.INFORMIX"><![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque /* ... */ y del número de lineas que son comentario de una línea // ...
Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea.

    // comment
    doSomething(); // comment      --> loc=1, cloc=1

En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.

    /* comment
     */ doSomething();             --> loc=1, cloc=1

    /* comment
     */                            --> loc=0, cloc=2

NOTA: Cuando se ejecuta esta métrica sobre código JSP, se cuentan las líneas de comentario contenidas en la definción de scriptlets <% ... %>, declaraciones <%! ... %> y directivas de importación <%@ page import=... %>
En el siguiente código, la métrica 'cloc' da un valor de 3:

        <%! // Java code inside JSP file

          /*  method JavaDoc
           */
           public String myFuntion(String str)
           {
                 return "Hello: " + str;
           }
        %>
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del numero de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque. Una línea se contará como comentario si comienza con //*.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JSP">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea.

  <div>something</div><!-- comment -->
  <!-- comment -->                               --> loc=1, cloc=1

En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.

  <!-- comment
       comment--> <div>something</div>           --> loc=1, cloc=1

  <!-- comment
       comment-->                                --> loc=0, cloc=2

NOTA: La métrica ignora las líneas contenidas dentro de scriptlets <% ... %>, declaraciones <%! ... %> y directivas de importación <%@ page import=... %> Estas líneas se contabilizan aplicando la métrica correspondiente de la tecnología JAVA sobre los ficheros JSP.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.KOTLIN">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea.
        ]]></implementation-description>
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
<![CDATA[
Da un resultado de 0 en todos los casos, porque se analiza el fichero XML generado automáticamente a partir de Oracle Forms.
        ]]></implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PERL">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PYTHON">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
]]>
        </implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG4">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RUBY">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SCALA">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQL">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQLSCRIPT">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SWIFT">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.TRANSACTSQL">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque y del número de lineas que contienen comentario de una línea. Los comentarios de una línea se contabilizarán sólo si no hay código fuente en esa misma línea. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.XML">
<![CDATA[
Suma del número de líneas que forman parte de un comentario de bloque. En los bloques de comentario, las líneas inicial y final se contabilizarán como comentario sólo si no hay código fuente en la misma línea.
        ]]></implementation-description>

      </implementation-descriptions>
      <parameters />
    </i18n>

    <i18n ref="OPT.LANGUAGE.ENGLISH">
      <name><![CDATA[Lines of comments]]></name>
      
      <description>
<![CDATA[
Number of lines with comments. Comment lines are those which start with the comment marker specific of each technology. Include both simple lines of comments and block comments. Not counted as line of comment that one that shares comment and source code. In that case, it is only counted as source code line.

This metric is used to compute the "pctdoc" metric, a simple maintainability metric to estimate the "density" of documentation in source code. Remember that documentation should be not only enough (in volume), but also well-written for its purpose.
]]></description>

      <implementation-descriptions>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ABAP">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. There will be counted a line that it begins for *. Any line that it contains " only was counted as comment if it does not contain code.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ASP">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ASPNET">
<![CDATA[
Counts the number of lines in a comments block. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.C">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CSHARP">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CPP">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.CL400">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.COBOL">
<![CDATA[
Counts the number of inline comment. A line will be counted as comment if in the column 7 it has one *.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.FOXPRO">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.GO">
          <![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.GROOVY">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.HTML">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.INFORMIX">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA">
<![CDATA[
Counts the number of lines in block comments /* ... */ and the number of lines of inline comment //...
Inline comments will be counted only if there is no source code in the same line.

    // comment
    doSomething(); // comment      --> loc=1, cloc=1

In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.

    /* comment
     */ doSomething();             --> loc=1, cloc=1

    /* comment
     */                            --> loc=0, cloc=2

NOTE: When execute this metric over JSP code, counts comment lines contained in the definition of scriptlets <% ... %>, declarations <%! ... %> and import directives <%@ page import=... %>
In the following code, the 'cloc' metric returns a value of 3:

        <%! // Java code inside JSP file

          /*  method JavaDoc
           */
           public String myFuntion(String str)
           {
                 return "Hello: " + str;
           }
        %>
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVASCRIPT">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JCL">
<![CDATA[
Counts the number of inline comment. A line will be counted as comment if in the line starts with //*.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JSP">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line.

  <div>something</div><!-- comment -->
  <!-- comment -->                               --> loc=1, cloc=1

In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.

  <!-- comment
       comment--> <div>something</div>           --> loc=1, cloc=1

  <!-- comment
       comment-->                                --> loc=0, cloc=2

NOTE: The metric ignores lines contained on scriptlets <% ... %>, declarations <%! ... %> and import directives <%@ page import=...%> Those lines are counted with the proper metric of the JAVA technology applied over the JSP files.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.KOTLIN">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.NATURAL">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment.
        ]]></implementation-description>
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.OBJECTIVEC">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.ORACLEFORMS">
<![CDATA[
Result is 0 always, becauses analyzed XML files are created automatically from Oracle Forms.
        ]]></implementation-description>
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PERL">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PHP">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PLSQL">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.POWERSCRIPT">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
]]>
        </implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.PYTHON">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
]]>
        </implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RPG4">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.RUBY">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SCALA">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQL">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SQLSCRIPT">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>        
        
        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.SWIFT">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>        

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.TRANSACTSQL">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VB6">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.VBNET">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. Inline comments will be counted only if there is no source code in the same line. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>

        <implementation-description ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.XML">
<![CDATA[
Counts the number of lines in block comments and the number of lines of inline comment. In the block comments, the first and the last line will be counted as comment line only if there is no source code in the same line.
        ]]></implementation-description>

      </implementation-descriptions>
      <parameters />
    </i18n>
    </i18ns>
  </metric>
</metric-definition>
